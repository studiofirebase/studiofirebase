// Script de testes para Instagram API with Instagram Login
// Cole isso no console do navegador na p√°gina /admin/integrations

console.log('='.repeat(50));
console.log('INSTAGRAM API WITH INSTAGRAM LOGIN - TESTE COMPLETO');
console.log('='.repeat(50));

// ============================================
// 1. TESTE DE INICIALIZA√á√ÉO
// ============================================
console.log('\n1Ô∏è‚É£  TESTE: Inicializando Instagram SDK');

(async () => {
    try {
        const { InstagramSDKIntegration } = await import('@/services/instagram-sdk-integration');
        await InstagramSDKIntegration.initialize();
        console.log('‚úÖ Instagram SDK inicializado');
        console.log('FB global:', typeof window.FB !== 'undefined');
    } catch (error) {
        console.error('‚ùå Erro:', error);
    }
})();

// ============================================
// 2. TESTE DE VERIFICA√á√ÉO DE CREDENCIAIS
// ============================================
setTimeout(async () => {
    console.log('\n2Ô∏è‚É£  TESTE: Verificando Credenciais');
    console.log('NEXT_PUBLIC_FACEBOOK_APP_ID:', process.env.NEXT_PUBLIC_FACEBOOK_APP_ID);
    console.log('‚úÖ Escopos Instagram atualizados (instagram_business_*)');
}, 1000);

// ============================================
// 3. TESTE DO HOOK
// ============================================
setTimeout(async () => {
    console.log('\n3Ô∏è‚É£  TESTE: Hook useInstagramIntegration');
    try {
        const { useInstagramIntegration } = await import('@/hooks/useInstagramIntegration');
        const instagram = useInstagramIntegration();
        console.log('‚úÖ Hook carregado com sucesso');
        console.log('M√©todos dispon√≠veis:');
        console.log('  ‚Ä¢ initialize');
        console.log('  ‚Ä¢ login');
        console.log('  ‚Ä¢ logout');
        console.log('  ‚Ä¢ getProfile');
        console.log('  ‚Ä¢ getMedia');
        console.log('  ‚Ä¢ publishMedia');
        console.log('  ‚Ä¢ getInsights');
        console.log('  ‚Ä¢ replyToComment');
        console.log('  ‚Ä¢ getMessages');
        console.log('  ‚Ä¢ sendMessage');
        console.log('  ‚Ä¢ apiCall');
    } catch (error) {
        console.error('‚ùå Erro:', error);
    }
}, 2000);

// ============================================
// 4. TESTE DE NOVOS ESCOPOS
// ============================================
setTimeout(async () => {
    console.log('\n4Ô∏è‚É£  TESTE: Verificando Novos Escopos');
    console.log('‚úÖ Escopos Instagram atualizados (obrigat√≥rio at√© 27/01/2025):');
    console.log('  ‚Ä¢ instagram_business_basic (antes: business_basic)');
    console.log('  ‚Ä¢ instagram_business_content_publish (antes: business_content_publish)');
    console.log('  ‚Ä¢ instagram_business_manage_messages (antes: business_manage_messages)');
    console.log('  ‚Ä¢ instagram_business_manage_comments (antes: business_manage_comments)');
    console.log('\nüìå Deadline: 27 de Janeiro de 2025');
}, 3000);

// ============================================
// 5. VERIFICAR REFRESH TOKEN SERVICE
// ============================================
setTimeout(async () => {
    console.log('\n5Ô∏è‚É£  TESTE: Verificando Token Refresh Service');
    try {
        const tokenService = await import('@/services/token-refresh-service');
        console.log('‚úÖ Token Refresh Service carregado');
        console.log('Fun√ß√µes dispon√≠veis:');
        console.log('  ‚Ä¢ isTokenExpired(platform)');
        console.log('  ‚Ä¢ refreshAccessToken(platform)');
        console.log('  ‚Ä¢ getValidAccessToken(platform)');
        console.log('  ‚Ä¢ logTokenExpiration(platform)');
    } catch (error) {
        console.error('‚ùå Erro:', error);
    }
}, 4000);

// ============================================
// FUN√á√ïES AUXILIARES
// ============================================

console.log('\n' + '='.repeat(50));
console.log('FUN√á√ïES AUXILIARES');
console.log('='.repeat(50));

// Login com Instagram
window.instagramLogin = async () => {
    console.log('\nüì± Fazendo login com Instagram...');
    try {
        const { InstagramSDKIntegration } = await import('@/services/instagram-sdk-integration');
        const result = await InstagramSDKIntegration.login();
        console.log('Login result:', result);
        if (result.status === 'connected') {
            console.log('‚úÖ Login bem-sucedido!');
            console.log('Access Token:', result.accessToken?.substring(0, 20) + '...');
            console.log('User ID:', result.userID);
        }
    } catch (error) {
        console.error('‚ùå Erro no login:', error);
    }
};

console.log('Use: instagramLogin()');

// Logout com Instagram
window.instagramLogout = async () => {
    console.log('\nüì± Fazendo logout do Instagram...');
    try {
        const { InstagramSDKIntegration } = await import('@/services/instagram-sdk-integration');
        await InstagramSDKIntegration.logout();
        console.log('‚úÖ Logout bem-sucedido!');
    } catch (error) {
        console.error('‚ùå Erro no logout:', error);
    }
};

console.log('Use: instagramLogout()');

// Obter perfil
window.getInstagramProfile = async (accessToken) => {
    console.log('\nüë§ Obtendo perfil do Instagram...');
    try {
        const { InstagramSDKIntegration } = await import('@/services/instagram-sdk-integration');
        const profile = await InstagramSDKIntegration.getInstagramProfile(accessToken);
        console.log('‚úÖ Perfil obtido:');
        console.log(profile);
        return profile;
    } catch (error) {
        console.error('‚ùå Erro:', error);
    }
};

console.log('Use: getInstagramProfile(accessToken)');

// Obter m√≠dia
window.getInstagramMedia = async (accessToken, userId) => {
    console.log('\nüì∏ Obtendo m√≠dia do Instagram...');
    try {
        const { InstagramSDKIntegration } = await import('@/services/instagram-sdk-integration');
        const media = await InstagramSDKIntegration.getInstagramMedia(accessToken, userId, 5);
        console.log('‚úÖ M√≠dia obtida:');
        console.log(media);
        return media;
    } catch (error) {
        console.error('‚ùå Erro:', error);
    }
};

console.log('Use: getInstagramMedia(accessToken, userId)');

// Obter insights
window.getInstagramInsights = async (accessToken, userId) => {
    console.log('\nüìä Obtendo insights do Instagram...');
    try {
        const { InstagramSDKIntegration } = await import('@/services/instagram-sdk-integration');
        const insights = await InstagramSDKIntegration.getInstagramInsights(accessToken, userId);
        console.log('‚úÖ Insights obtidos:');
        console.log(insights);
        return insights;
    } catch (error) {
        console.error('‚ùå Erro:', error);
    }
};

console.log('Use: getInstagramInsights(accessToken, userId)');

// Obter mensagens
window.getInstagramMessages = async (accessToken, userId) => {
    console.log('\nüí¨ Obtendo mensagens diretas...');
    try {
        const { InstagramSDKIntegration } = await import('@/services/instagram-sdk-integration');
        const messages = await InstagramSDKIntegration.getInstagramMessages(accessToken, userId);
        console.log('‚úÖ Mensagens obtidas:');
        console.log(messages);
        return messages;
    } catch (error) {
        console.error('‚ùå Erro:', error);
    }
};

console.log('Use: getInstagramMessages(accessToken, userId)');

// Verificar expira√ß√£o de token
window.checkTokenExpiration = async (platform = 'instagram') => {
    console.log(`\n‚è∞ Verificando expira√ß√£o do token ${platform}...`);
    try {
        const tokenService = await import('@/services/token-refresh-service');
        const isExpired = await tokenService.isTokenExpired(platform);
        if (isExpired) {
            console.log(`‚ö†Ô∏è  Token ${platform} vai expirar em menos de 1 hora`);
        } else {
            console.log(`‚úÖ Token ${platform} ainda v√°lido`);
        }
        return isExpired;
    } catch (error) {
        console.error('‚ùå Erro:', error);
    }
};

console.log('Use: checkTokenExpiration("instagram")');

// Renovar token
window.refreshToken = async (platform = 'instagram') => {
    console.log(`\nüîÑ Renovando token ${platform}...`);
    try {
        const tokenService = await import('@/services/token-refresh-service');
        const success = await tokenService.refreshAccessToken(platform);
        if (success) {
            console.log(`‚úÖ Token ${platform} renovado com sucesso`);
        } else {
            console.log(`‚ùå Falha ao renovar token ${platform}`);
        }
        return success;
    } catch (error) {
        console.error('‚ùå Erro:', error);
    }
};

console.log('Use: refreshToken("instagram")');

// Obter token v√°lido
window.getValidToken = async (platform = 'instagram') => {
    console.log(`\nüîë Obtendo token v√°lido para ${platform}...`);
    try {
        const tokenService = await import('@/services/token-refresh-service');
        const token = await tokenService.getValidAccessToken(platform);
        if (token) {
            console.log(`‚úÖ Token obtido: ${token.substring(0, 20)}...`);
        } else {
            console.log(`‚ùå Token n√£o dispon√≠vel`);
        }
        return token;
    } catch (error) {
        console.error('‚ùå Erro:', error);
    }
};

console.log('Use: getValidToken("instagram")');

// ============================================
// RESUMO
// ============================================
console.log('\n' + '='.repeat(50));
console.log('RESUMO DOS TESTES');
console.log('='.repeat(50));

console.log(`
‚úÖ Instagram SDK inicializado
‚úÖ Hook useInstagramIntegration funcional
‚úÖ Token refresh service dispon√≠vel
‚úÖ Novos escopos implementados (instagram_business_*)
‚úÖ Pronto para usar

FUN√á√ïES DISPON√çVEIS:
  instagramLogin()
  instagramLogout()
  getInstagramProfile(accessToken)
  getInstagramMedia(accessToken, userId)
  getInstagramInsights(accessToken, userId)
  getInstagramMessages(accessToken, userId)
  checkTokenExpiration(platform)
  refreshToken(platform)
  getValidToken(platform)

DEADLINE: 27 de Janeiro de 2025
(Atualizar de business_* para instagram_business_*)
`);

console.log('='.repeat(50));
console.log('Para come√ßar, use: instagramLogin()');
console.log('='.repeat(50));
