'use client';

import React, { createContext, useContext, useEffect, useState } from 'react';
import {
  User,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  updatePassword,
  updateEmail,
  updateProfile,
  onAuthStateChanged,
  sendPasswordResetEmail,
  reauthenticateWithCredential,
  EmailAuthProvider,
  verifyBeforeUpdateEmail,
  sendEmailVerification
} from 'firebase/auth';
import { doc, setDoc, getDoc, updateDoc, collection, getDocs } from 'firebase/firestore';
import { auth, db, isLocalhost } from '@/lib/firebase';
import { validateEmailExists } from '@/services/email-validation';
import { sendEmailChangeNotificationToOldEmail, sendWelcomeToNewEmail, sendEmailRollbackNotification } from '@/services/email-notifications';
import { usePathname } from 'next/navigation';

interface UserProfile {
  uid: string;
  email: string;
  displayName: string;
  photoURL?: string;
  phoneNumber?: string;
  createdAt: string;
  lastLogin: string;
  isSubscriber: boolean;
  subscriptionType?: string;
  subscriptionEndDate?: string;
  faceIdEnabled?: boolean;
  faceData?: string;
  lastFaceIdUpdate?: string;
  lastSync?: string;
  emailVerified?: boolean;
  lastEmailVerification?: string;
}

interface AuthContextType {
  user: User | null;
  userProfile: UserProfile | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<{ user: User }>;
  signUp: (email: string, password: string, displayName: string) => Promise<{ user: User }>;
  logout: () => Promise<void>;
  resetPassword: (email: string) => Promise<void>;
  resendEmailVerification: () => Promise<void>;
  updateUserEmail: (newEmail: string, currentPassword: string) => Promise<any>;
  updateUserPassword: (currentPassword: string, newPassword: string) => Promise<void>;
  updateUserProfile: (updates: Partial<UserProfile>) => Promise<void>;
  refreshUserProfile: () => Promise<void>;
  checkEmailUpdateAndSync: () => Promise<boolean>;
  checkEmailVerificationAndSync: (expectedEmail?: string) => Promise<boolean>;
  forceUpdateEmailInFirestore: (newEmail: string) => Promise<boolean>;
  syncFirestoreWithAuth: () => Promise<boolean>;
  forceCompleteSync: () => Promise<boolean>;
  manualSync: () => Promise<boolean>;
  checkOfficialEmailVerification: (expectedEmail?: string) => Promise<boolean>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const pathname = usePathname();

  useEffect(() => {
    // üîí CR√çTICO: N√£o interferir com rotas do admin
    if (pathname?.startsWith('/admin')) {
      setLoading(false);
      return;
    }

    // ‚úÖ LISTENER OFICIAL: Sincroniza√ß√£o autom√°tica Firebase Auth ‚Üî Firestore
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      console.log('[üîÑ AuthProvider] Estado de autentica√ß√£o alterado:', {
        hasUser: !!user,
        email: user?.email,
        emailVerified: user?.emailVerified,
        uid: user?.uid
      });
      
      setUser(user);
      try {
        if (user) {
          // ‚úÖ SINCRONIZA√á√ÉO INTELIGENTE: Verificar se precisa sincronizar
          const userDocRef = doc(db, 'users', user.uid);
          const userDoc = await getDoc(userDocRef);
          
          if (userDoc.exists()) {
            const firestoreData = userDoc.data();
            
            // ‚úÖ DETECTAR DESSINCRONIZA√á√ÉO
            const authEmail = user.email;
            const firestoreEmail = firestoreData.email;
            const authVerified = user.emailVerified;
            const firestoreVerified = firestoreData.emailVerified;
            
            if (authEmail !== firestoreEmail || authVerified !== firestoreVerified) {
                        console.log('[üîÑ AuthProvider] üö® DESSINCRONIZA√á√ÉO DETECTADA - Aplicando corre√ß√£o oficial');
          console.log('[üìß AuthProvider] Firebase Auth (oficial):', { email: authEmail, verified: authVerified });
          console.log('[üìß AuthProvider] Firestore (desatualizado):', { email: firestoreEmail, verified: firestoreVerified });
          
          // ‚úÖ CORRE√á√ÉO OFICIAL IMEDIATA: Firebase Auth ‚Üí Firestore
          console.log('[üîÑ AuthProvider] üîß Aplicando corre√ß√£o oficial imediata...');
          
          const correctionData = {
            email: authEmail, // üìß FONTE DA VERDADE
            emailVerified: authVerified, // ‚úÖ FONTE DA VERDADE
            displayName: user.displayName || firestoreData.displayName || 'Usu√°rio',
            lastSync: new Date().toISOString(),
            lastLogin: new Date().toISOString(),
            lastEmailVerification: authVerified ? new Date().toISOString() : (firestoreData.lastEmailVerification || new Date().toISOString()),
            // üîí PRESERVAR dados cr√≠ticos
            isSubscriber: firestoreData.isSubscriber || false,
            subscriptionType: firestoreData.subscriptionType || '',
            subscriptionEndDate: firestoreData.subscriptionEndDate || null,
            faceIdEnabled: firestoreData.faceIdEnabled || false,
            faceData: firestoreData.faceData || null,
            createdAt: firestoreData.createdAt || new Date().toISOString()
          };
          
          await updateDoc(userDocRef, correctionData);
          
          console.log('[‚úÖ AuthProvider] üéØ CORRE√á√ÉO OFICIAL APLICADA COM SUCESSO!');
          console.log('[üìß AuthProvider] Email sincronizado:', authEmail);
          console.log('[‚úÖ AuthProvider] Status verifica√ß√£o:', authVerified);
            } else {
              console.log('[‚úÖ AuthProvider] Dados j√° sincronizados');
            }
          }
          
          // Carregar perfil ap√≥s sincroniza√ß√£o
          await loadUserProfile(user.uid);
        } else {
          setUserProfile(null);
        }
      } catch (err) {
        console.error('[‚ùå AuthProvider] Erro no listener de auth:', err);
      } finally {
        setLoading(false);
      }
    });
    return unsubscribe;
  }, [pathname]);

  // üîí SISTEMA SEGURO: Recarregar perfil quando assinatura √© ativada
  useEffect(() => {
    // N√£o interferir com rotas do admin
    if (pathname?.startsWith('/admin')) {
      return;
    }

    const handleSubscriptionActivated = () => {
      if (user?.uid) {
        loadUserProfile(user.uid);
      }
    };

    window.addEventListener('subscription-activated', handleSubscriptionActivated);
    
    return () => {
      window.removeEventListener('subscription-activated', handleSubscriptionActivated);
    };
  }, [user, pathname]);

  const loadUserProfile = async (uid: string) => {
    try {
      const userDoc = await getDoc(doc(db, 'users', uid));
      if (userDoc.exists()) {
        const firestoreData = userDoc.data() as UserProfile;
        
        // ‚úÖ SINCRONIZA√á√ÉO CR√çTICA: Garantir que Firebase Auth e Firestore estejam alinhados
        if (user?.email && user.email !== firestoreData.email) {
          console.log('[Auth] üö® DESSINCRONIZA√á√ÉO DETECTADA:');
          console.log('[Auth] üìß Firebase Auth email:', user.email);
          console.log('[Auth] üìß Firestore email:', firestoreData.email);
          console.log('[Auth] üîÑ Iniciando sincroniza√ß√£o FOR√áADA...');
          
          try {
            // FOR√áA sincroniza√ß√£o com Firebase Auth como fonte da verdade
            await updateDoc(doc(db, 'users', uid), {
              email: user.email,
              emailVerified: user.emailVerified,
              lastSync: new Date().toISOString(),
              lastLogin: new Date().toISOString(),
              // Preservar dados importantes existentes
              displayName: firestoreData.displayName || user.displayName || 'Usu√°rio',
              isSubscriber: firestoreData.isSubscriber || false,
              faceIdEnabled: firestoreData.faceIdEnabled || false,
              faceData: firestoreData.faceData || null
            });
            
            // ‚úÖ CR√çTICO: Atualizar dados locais com email correto
            firestoreData.email = user.email;
            firestoreData.emailVerified = user.emailVerified;
            firestoreData.lastSync = new Date().toISOString();
            
            console.log('[Auth] ‚úÖ SINCRONIZA√á√ÉO FOR√áADA CONCLU√çDA!');
            console.log('[Auth] üìß Email agora sincronizado:', user.email);
            
            // For√ßar atualiza√ß√£o do estado local
            setTimeout(() => {
              setUserProfile({...firestoreData});
            }, 100);
            
          } catch (syncError) {
            console.error('[Auth] ‚ùå ERRO CR√çTICO na sincroniza√ß√£o:', syncError);
          }
        } else {
          console.log('[Auth] ‚úÖ Emails j√° sincronizados:', user?.email);
        }
        
        setUserProfile(firestoreData);
      } else {
        // Criar perfil inicial se n√£o existir
        const initialProfile: UserProfile = {
          uid: uid,
          email: user?.email || '',
          displayName: user?.displayName || 'Usu√°rio',
          createdAt: new Date().toISOString(),
          lastLogin: new Date().toISOString(),
          isSubscriber: false,
        };
        // S√≥ adiciona photoURL se existir
        if (user?.photoURL) {
          (initialProfile as any).photoURL = user.photoURL;
        }
        
        await setDoc(doc(db, 'users', uid), initialProfile);
        setUserProfile(initialProfile);
      }
    } catch (error) {
      console.error('[AuthProvider] Erro ao carregar perfil:', error);
      // Em caso de erro, n√£o bloquear - definir perfil b√°sico do Firebase Auth
      setUserProfile({
        uid: uid,
        email: user?.email || '',
        displayName: user?.displayName || 'Usu√°rio',
        createdAt: new Date().toISOString(),
        lastLogin: new Date().toISOString(),
        isSubscriber: false,
      });
    }
  };

  const signIn = async (email: string, password: string) => {
    try {
      // ‚úÖ RETRY AUTOM√ÅTICO para erros 503/tempor√°rios
      let result;
      let attempts = 0;
      const maxAttempts = 3;
      
      while (attempts < maxAttempts) {
        try {
          result = await signInWithEmailAndPassword(auth, email, password);
          break; // Sucesso, sair do loop
        } catch (error: any) {
          attempts++;
          
          console.log(`[Auth] Login - Erro capturado (tentativa ${attempts}/${maxAttempts}):`, {
            code: error.code,
            message: error.message,
            name: error.name
          });
          
          // Se √© erro 503 ou tempor√°rio, tentar novamente
          if ((error.code === 'auth/error-code:-47' || 
               error.message.includes('503') || 
               error.message.includes('Service Unavailable')) && 
               attempts < maxAttempts) {
            
            console.log(`[Auth] Login - Tentativa ${attempts}/${maxAttempts} falhou (503). Tentando novamente em ${2 * attempts}s...`);
            await new Promise(resolve => setTimeout(resolve, 2000 * attempts)); // Backoff exponencial
            continue;
          }
          
          // Se n√£o √© erro tempor√°rio ou esgotaram tentativas, relan√ßar
          console.log(`[Auth] Login - Relan√ßando erro ap√≥s ${attempts} tentativas`);
          throw error;
        }
      }
      
      // Verificar se result foi definido
      if (!result) {
        throw new Error('Falha ao fazer login ap√≥s m√∫ltiplas tentativas');
      }
      
      // Atualizar √∫ltimo login
      if (result.user) {
        await updateDoc(doc(db, 'users', result.user.uid), {
          lastLogin: new Date().toISOString()
        });
      }
      
      return result; // ‚úÖ Retornar o resultado para acessar user.email atualizado
    } catch (error) {
      throw error;
    }
  };

  const signUp = async (email: string, password: string, displayName: string) => {
    if (!email || !email.includes('@')) {
      throw new Error('Email obrigat√≥rio e v√°lido para cadastro.');
    }
    try {
      // ‚úÖ RETRY AUTOM√ÅTICO para erros 503/tempor√°rios
      let result;
      let attempts = 0;
      const maxAttempts = 3;
      
      while (attempts < maxAttempts) {
        try {
          result = await createUserWithEmailAndPassword(auth, email, password);
          break; // Sucesso, sair do loop
        } catch (error: any) {
          attempts++;
          
          console.log(`[Auth] SignUp - Erro capturado (tentativa ${attempts}/${maxAttempts}):`, {
            code: error.code,
            message: error.message,
            name: error.name
          });
          
          // Se √© erro 503 ou tempor√°rio, tentar novamente
          if ((error.code === 'auth/error-code:-47' || 
               error.message.includes('503') || 
               error.message.includes('Service Unavailable')) && 
               attempts < maxAttempts) {
            
            console.log(`[Auth] SignUp - Tentativa ${attempts}/${maxAttempts} falhou (503). Tentando novamente em ${2 * attempts}s...`);
            await new Promise(resolve => setTimeout(resolve, 2000 * attempts)); // Backoff exponencial
            continue;
          }
          
          // Se n√£o √© erro tempor√°rio ou esgotaram tentativas, relan√ßar
          console.log(`[Auth] SignUp - Relan√ßando erro ap√≥s ${attempts} tentativas`);
          throw error;
        }
      }
      
      // Verificar se result foi definido
      if (!result) {
        throw new Error('Falha ao criar conta ap√≥s m√∫ltiplas tentativas');
      }
      
      if (!result.user.email) {
        // Seguran√ßa extra: se o Firebase n√£o retornar email, apaga o usu√°rio imediatamente
        await result.user.delete();
        throw new Error('Falha ao cadastrar: email n√£o registrado. Tente novamente.');
      }
      // Atualizar perfil do Firebase Auth
      await updateProfile(result.user, {
        displayName: displayName
      });

      // Criar documento do usu√°rio no Firestore
      const userProfile: UserProfile = {
        uid: result.user.uid,
        email: result.user.email,
        displayName: displayName,
        createdAt: new Date().toISOString(),
        lastLogin: new Date().toISOString(),
        isSubscriber: false,
      };

      await setDoc(doc(db, 'users', result.user.uid), userProfile);
      
      // Enviar email de verifica√ß√£o nativo do Firebase
      try {
        await sendEmailVerification(result.user);
        console.log('[Auth] ‚úÖ Email de verifica√ß√£o enviado para:', result.user.email);
      } catch (emailError) {
        console.error('[Auth] ‚ö†Ô∏è Erro ao enviar email de verifica√ß√£o:', emailError);
        // N√£o falhar o cadastro por causa do email
      }
      
      // Retornar o resultado para poder acessar o UID
      return { user: result.user };
    } catch (error) {
      throw error;
    }
  };

  const logout = async () => {
    try {
      await signOut(auth);
      setUserProfile(null);
    } catch (error) {
      throw error;
    }
  };

  const resetPassword = async (email: string) => {
    try {
      await sendPasswordResetEmail(auth, email);
    } catch (error) {
      throw error;
    }
  };

  const resendEmailVerification = async () => {
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado');
    }

    try {
      await sendEmailVerification(user);
      console.log('[Auth] ‚úÖ Email de verifica√ß√£o reenviado para:', user.email);
    } catch (error) {
      console.error('[Auth] ‚ùå Erro ao reenviar email de verifica√ß√£o:', error);
      throw error;
    }
  };

  const updateUserEmail = async (newEmail: string, currentPassword: string) => {
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado. Fa√ßa login novamente.');
    }

    // Validar email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(newEmail)) {
      throw new Error('Email inv√°lido');
    }

    // Garante que o usu√°rio do Auth est√° atualizado
    try {
    await user.reload();
    } catch (error) {
      console.error('[Auth] Erro ao recarregar usu√°rio:', error);
    }

    // Verificar m√©todo de login do usu√°rio
    const providerData = user.providerData;
    console.log('[Auth] Provider data:', providerData);

    if (!user.email) {
      throw new Error('Usu√°rio n√£o possui email cadastrado. Entre em contato com o suporte.');
    }

    // ‚úÖ NOVA L√ìGICA: Permitir qualquer email, mas com valida√ß√£o inteligente
    const currentAuthEmail = user.email;
    const currentFirestoreEmail = userProfile?.email;
    
    console.log('[Auth] Valida√ß√£o de email:');
    console.log('[Auth] - Email no Firebase Auth:', currentAuthEmail);
    console.log('[Auth] - Email no Firestore:', currentFirestoreEmail);
    console.log('[Auth] - Novo email solicitado:', newEmail);
    
    // ‚úÖ PERMITIR QUALQUER EMAIL, mas avisar sobre situa√ß√µes especiais
    if (currentAuthEmail === newEmail) {
      console.log('[Auth] ‚ö†Ô∏è Email solicitado √© igual ao Firebase Auth atual');
      // Se √© igual ao Auth mas diferente do Firestore, pode ser sincroniza√ß√£o pendente
      if (currentFirestoreEmail !== newEmail) {
        console.log('[Auth] ‚úÖ Permitindo - pode ser sincroniza√ß√£o de email verificado');
      } else {
        console.log('[Auth] ‚ÑπÔ∏è Email j√° est√° sincronizado em ambos os locais');
        throw new Error('Este email j√° est√° ativo e verificado na sua conta');
      }
    }
    
    if (currentFirestoreEmail === newEmail && currentAuthEmail !== newEmail) {
      console.log('[Auth] ‚úÖ Permitindo troca para email do Firestore (pode estar dessincronizado)');
    }
    
    // ‚úÖ VALIDA√á√ÉO CR√çTICA: Verificar se email j√° est√° em uso no Firestore
    console.log('[Auth] üîç Verificando se email j√° existe no banco...');
    try {
      const usersRef = collection(db, 'users');
      const usersSnapshot = await getDocs(usersRef);
      
      for (const doc of usersSnapshot.docs) {
        const userData = doc.data();
        if (userData.email === newEmail && doc.id !== user.uid) {
          throw new Error(`Este email j√° est√° sendo usado por outro usu√°rio no sistema`);
        }
      }
      
      console.log('[Auth] ‚úÖ Email dispon√≠vel no banco de dados');
    } catch (emailCheckError: any) {
      console.error('[Auth] ‚ùå Erro ao verificar email no banco:', emailCheckError);
      if (emailCheckError.message.includes('j√° est√° sendo usado')) {
        throw emailCheckError;
      }
      throw new Error('Erro ao verificar disponibilidade do email');
    }

    console.log('[Auth] ‚úÖ Prosseguindo com troca de email:', newEmail);

    // Verificar se o usu√°rio fez login com email/senha
    const hasEmailProvider = providerData.some(provider => provider.providerId === 'password');
    
    if (!hasEmailProvider) {
      throw new Error('Este usu√°rio n√£o foi criado com email e senha. N√£o √© poss√≠vel alterar o email desta forma. Entre em contato com o suporte.');
    }

    try {
      console.log('[Auth] Tentando reautenticar com email:', user.email);
      
      // Reautenticar antes de atualizar email
      const credential = EmailAuthProvider.credential(user.email, currentPassword);
      await reauthenticateWithCredential(user, credential);

      console.log('[Auth] Reautentica√ß√£o bem-sucedida, enviando verifica√ß√£o de email...');

      // üéØ M√âTODO H√çBRIDO OTIMIZADO
      console.log('[Auth] üéØ INICIANDO M√âTODO H√çBRIDO OTIMIZADO');
      console.log('[Auth] üåç Ambiente:', isLocalhost ? 'Localhost/Emulator' : 'Produ√ß√£o');
      
      const oldEmail = user.email!;
      const userName = user.displayName || 'Usu√°rio';
      
      try {
        // ‚úÖ PASSO 1: VALIDAR SE EMAIL EXISTE E √â V√ÅLIDO
        console.log('[Auth] üîç Validando exist√™ncia do email...');
        const emailIsValid = await validateEmailExists(newEmail);
        
        if (!emailIsValid) {
          throw new Error('Este email n√£o existe ou n√£o pode receber mensagens. Verifique o endere√ßo e tente novamente.');
        }
        
        console.log('[Auth] ‚úÖ Email validado com sucesso');
        
        // ‚úÖ PASSO 2: ENVIAR VERIFICA√á√ÉO DE EMAIL
        console.log('[Auth] üìß Enviando email de verifica√ß√£o...');
        await verifyBeforeUpdateEmail(user, newEmail);
        console.log('[Auth] ‚úÖ Email de verifica√ß√£o enviado para:', newEmail);
        
        console.log('[Auth] üéâ VERIFICA√á√ÉO ENVIADA COM SUCESSO!');
        
        return { 
          success: true, 
          message: `üìß Email de verifica√ß√£o enviado para ${newEmail}. Verifique sua caixa de entrada e clique no link para confirmar a altera√ß√£o.`,
          requiresVerification: true,
          newEmail
        };
        
      } catch (emailUpdateError: any) {
        console.error('[Auth] ‚ùå Erro durante atualiza√ß√£o h√≠brida:', emailUpdateError);
        
        // üîÑ ROLLBACK: Tentar reverter mudan√ßas se necess√°rio
        try {
          console.log('[Auth] üîÑ Iniciando rollback...');
          
          // Se o Firebase Auth foi alterado, tentar reverter
          if (user.email !== oldEmail) {
            await updateEmail(user, oldEmail);
            console.log('[Auth] ‚úÖ Firebase Auth revertido');
          }
          
          // Notificar sobre o rollback
          await sendEmailRollbackNotification(oldEmail, userName, emailUpdateError.message);
          
        } catch (rollbackError) {
          console.error('[Auth] ‚ùå Erro no rollback:', rollbackError);
        }
        
        throw emailUpdateError;
      }
      
    } catch (error: any) {
      console.error('[Auth] Erro ao atualizar email:', error);
      
      // Melhorar mensagens de erro
      if (error.code === 'auth/wrong-password') {
        throw new Error('Senha atual incorreta');
      } else if (error.code === 'auth/invalid-credential') {
        throw new Error('Credenciais inv√°lidas. Verifique sua senha ou fa√ßa login novamente.');
      } else if (error.code === 'auth/email-already-in-use') {
        throw new Error('Este email j√° est√° sendo usado por outra conta');
      } else if (error.code === 'auth/invalid-email') {
        throw new Error('Email inv√°lido');
      } else if (error.code === 'auth/requires-recent-login') {
        throw new Error('Por seguran√ßa, fa√ßa login novamente antes de alterar o email');
      } else if (error.code === 'auth/too-many-requests') {
        throw new Error('Muitas tentativas. Tente novamente em alguns minutos');
      } else if (error.code === 'auth/user-mismatch') {
        throw new Error('Erro de autentica√ß√£o. Fa√ßa logout e login novamente.');
      } else {
        throw new Error(error.message || 'Erro ao atualizar email');
      }
    }
  };

  // Fun√ß√£o para for√ßar atualiza√ß√£o do email no Firestore (chamada manual)
  const forceUpdateEmailInFirestore = async (newEmail: string) => {
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado');
    }

    try {
      console.log('[Auth] For√ßando atualiza√ß√£o de email no Firestore...');
      console.log('[Auth] Novo email:', newEmail);
      console.log('[Auth] UID:', user.uid);
      
      const userDocRef = doc(db, 'users', user.uid);
      
      await updateDoc(userDocRef, {
        email: newEmail,
        lastLogin: new Date().toISOString()
      });
      
      console.log('[Auth] ‚úÖ Email for√ßadamente atualizado no Firestore!');

      // Recarregar perfil
      await loadUserProfile(user.uid);
      
      return true;
    } catch (error) {
      console.error('[Auth] ‚ùå Erro ao for√ßar atualiza√ß√£o no Firestore:', error);
      throw error;
    }
  };

  // ‚úÖ FUN√á√ÉO CR√çTICA: Sincroniza√ß√£o FOR√áADA e COMPLETA
  const forceCompleteSync = async () => {
    if (!user) {
      console.log('[Auth] ‚ùå Nenhum usu√°rio para sincroniza√ß√£o for√ßada');
      return false;
    }

    try {
      console.log('[Auth] üöÄ INICIANDO SINCRONIZA√á√ÉO FOR√áADA COMPLETA...');
      console.log('[Auth] üÜî UID:', user.uid);
      
      // ‚úÖ FOR√áA reload para pegar dados mais atuais
      try {
        await user.reload();
        console.log('[Auth] üîÑ Dados do Firebase Auth recarregados');
      } catch (reloadError) {
        console.warn('[Auth] ‚ö†Ô∏è Erro ao recarregar, mas continuando:', reloadError);
      }
      
      console.log('[Auth] üìß Email atual no Firebase Auth:', user.email);
      console.log('[Auth] ‚úÖ Email verificado:', user.emailVerified);
      
      if (!user.email) {
        console.log('[Auth] ‚ùå Usu√°rio n√£o tem email no Firebase Auth');
        return false;
      }

      // ‚úÖ FOR√áA atualiza√ß√£o completa no Firestore
      const userDocRef = doc(db, 'users', user.uid);
      
      // Primeiro, buscar dados existentes para preservar informa√ß√µes importantes
      const existingDoc = await getDoc(userDocRef);
      let existingData: any = {};
      
      if (existingDoc.exists()) {
        existingData = existingDoc.data() || {};
        console.log('[Auth] üìä Dados existentes no Firestore:', {
          email: existingData.email,
          isSubscriber: existingData.isSubscriber,
          faceIdEnabled: existingData.faceIdEnabled
        });
      }
      
      // ‚úÖ ATUALIZA√á√ÉO COMPLETA preservando dados importantes
      const updateData = {
        // Dados do Firebase Auth (fonte da verdade)
        email: user.email,
        emailVerified: user.emailVerified,
        displayName: user.displayName || existingData.displayName || 'Usu√°rio',
        
        // Timestamps de sincroniza√ß√£o
        lastSync: new Date().toISOString(),
        lastLogin: new Date().toISOString(),
        lastEmailVerification: new Date().toISOString(),
        
        // Preservar dados cr√≠ticos do neg√≥cio
        uid: user.uid,
        isSubscriber: existingData.isSubscriber || false,
        subscriptionType: existingData.subscriptionType || '',
        subscriptionEndDate: existingData.subscriptionEndDate || null,
        faceIdEnabled: existingData.faceIdEnabled || false,
        faceData: existingData.faceData || null,
        createdAt: existingData.createdAt || new Date().toISOString()
      };
      
      await updateDoc(userDocRef, updateData);
      
      console.log('[Auth] ‚úÖ SINCRONIZA√á√ÉO FOR√áADA CONCLU√çDA!');
      console.log('[Auth] üìß Email sincronizado:', user.email);
      console.log('[Auth] üéØ Todos os dados preservados e atualizados');
      
      // ‚úÖ FOR√áA reload do perfil
      await loadUserProfile(user.uid);
      
      return true;
    } catch (error: any) {
      console.error('[Auth] ‚ùå ERRO na sincroniza√ß√£o for√ßada:', error);
      return false;
    }
  };

  // ‚úÖ FUN√á√ÉO OFICIAL: Verifica√ß√£o simples com Firebase + Cloud Functions
  const checkOfficialEmailVerification = async (expectedEmail?: string): Promise<boolean> => {
    if (!user) {
      console.log('[Auth] ‚ùå Usu√°rio n√£o autenticado');
      return false;
    }

    try {
      console.log('[Auth] üéØ VERIFICA√á√ÉO OFICIAL INICIADA');
      console.log('[Auth] Email esperado:', expectedEmail);
      console.log('[Auth] Email atual:', user.email);
      
      // ‚úÖ Recarregar dados do Firebase Auth
      await user.reload();
      console.log('[Auth] ‚úÖ Dados recarregados');
      console.log('[Auth] Novo email:', user.email);
      console.log('[Auth] Verificado:', user.emailVerified);
      
      // ‚úÖ Verificar se mudan√ßa foi detectada
      if (expectedEmail && user.email === expectedEmail && user.emailVerified) {
        console.log('[Auth] ‚úÖ SUCESSO! Email verificado e atualizado no Firebase Auth');
        console.log('[Auth] ‚ö° Cloud Function sincronizar√° automaticamente');
        
        // Aguardar um pouco para Cloud Function processar
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Recarregar perfil
        await loadUserProfile(user.uid);
        
        return true;
      }
      
      console.log('[Auth] ‚è≥ Ainda aguardando verifica√ß√£o...');
      return false;
      
    } catch (error: any) {
      console.error('[Auth] ‚ùå Erro na verifica√ß√£o:', error);
      
      if (error.code === 'auth/user-token-expired') {
        throw new Error('‚è∞ Sess√£o expirada. Fa√ßa login novamente.');
      }
      
      throw error;
    }
  };

  // ‚úÖ FUN√á√ÉO REMOVIDA: Era apenas para desenvolvimento h√≠brido

  // ‚úÖ SINCRONIZA√á√ÉO OFICIAL 100%: Firebase Auth ‚Üí Firestore (Estruturada)
  const syncFirestoreWithAuth = async (authUser?: User) => {
    const currentUser = authUser || user;
    
    if (!currentUser) {
      console.log('[Auth] ‚ùå Nenhum usu√°rio para sincroniza√ß√£o');
      return false;
    }

    try {
      console.log('[Auth] üöÄ SINCRONIZA√á√ÉO OFICIAL INICIADA (100% Estruturada)');
      console.log('[Auth] üÜî UID:', currentUser.uid);
      console.log('[Auth] üìß Email Auth (fonte da verdade):', currentUser.email);
      console.log('[Auth] ‚úÖ Verificado:', currentUser.emailVerified);

      if (!currentUser.email) {
        console.log('[Auth] ‚ùå Email n√£o encontrado no Firebase Auth');
        return false;
      }

      // ‚úÖ PASSO 1: Buscar dados atuais do Firestore
      const userDocRef = doc(db, 'users', currentUser.uid);
      const existingDoc = await getDoc(userDocRef);
      
      // ‚úÖ PASSO 2: Preparar dados oficiais do Firebase Auth
      const officialAuthData = {
        uid: currentUser.uid,
        email: currentUser.email, // üìß FONTE DA VERDADE
        emailVerified: currentUser.emailVerified, // ‚úÖ FONTE DA VERDADE
        displayName: currentUser.displayName || 'Usu√°rio',
        lastSync: new Date().toISOString(),
        lastLogin: new Date().toISOString(),
        lastEmailVerification: currentUser.emailVerified ? new Date().toISOString() : new Date().toISOString()
      };

      if (existingDoc.exists()) {
        const firestoreData = existingDoc.data();
        
        // ‚úÖ PASSO 3: Detectar dessincroniza√ß√£o
        const isDesynchronized = 
          firestoreData.email !== officialAuthData.email ||
          firestoreData.emailVerified !== officialAuthData.emailVerified;

        if (isDesynchronized) {
          console.log('[Auth] üö® DESSINCRONIZA√á√ÉO DETECTADA - Aplicando corre√ß√£o oficial');
          console.log('[Auth] üìä Firestore (antigo):', { 
            email: firestoreData.email, 
            verified: firestoreData.emailVerified 
          });
          console.log('[Auth] üìä Firebase Auth (oficial):', { 
            email: officialAuthData.email, 
            verified: officialAuthData.emailVerified 
          });
          
          // ‚úÖ PASSO 4: Aplicar dados oficiais preservando dados de neg√≥cio
          const correctedData = {
            ...officialAuthData, // üìß Dados oficiais do Firebase Auth
            // üîí Preservar dados cr√≠ticos do neg√≥cio
            isSubscriber: firestoreData.isSubscriber || false,
            subscriptionType: firestoreData.subscriptionType || '',
            subscriptionEndDate: firestoreData.subscriptionEndDate || null,
            faceIdEnabled: firestoreData.faceIdEnabled || false,
            faceData: firestoreData.faceData || null,
            createdAt: firestoreData.createdAt || new Date().toISOString()
          };

          await updateDoc(userDocRef, correctedData);
          
          console.log('[Auth] ‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!');
          console.log('[Auth] üìß Email sincronizado:', officialAuthData.email);
          console.log('[Auth] ‚úÖ Status verifica√ß√£o:', officialAuthData.emailVerified);
        } else {
          console.log('[Auth] ‚úÖ Dados j√° sincronizados - nenhuma corre√ß√£o necess√°ria');
          
          // Atualizar apenas timestamp de login
          await updateDoc(userDocRef, {
            lastLogin: new Date().toISOString(),
            lastSync: new Date().toISOString()
          });
        }
      } else {
        // ‚úÖ PASSO 5: Criar documento novo com dados oficiais
        console.log('[Auth] üÜï Criando documento com dados oficiais do Firebase Auth');
        
        const newUserData = {
          ...officialAuthData,
          createdAt: new Date().toISOString(),
          isSubscriber: false,
          faceIdEnabled: false
        };

        await setDoc(userDocRef, newUserData);
        console.log('[Auth] ‚úÖ DOCUMENTO CRIADO COM DADOS OFICIAIS!');
      }

      // ‚úÖ PASSO 6: Recarregar perfil atualizado
      await loadUserProfile(currentUser.uid);
      
      console.log('[Auth] üéØ SINCRONIZA√á√ÉO OFICIAL 100% CONCLU√çDA!');
      return true;
    } catch (error: any) {
      console.error('[Auth] ‚ùå ERRO na sincroniza√ß√£o oficial:', error);
      return false;
    }
  };

  // ‚úÖ NOVA FUN√á√ÉO: Verificar se o NOVO email foi REALMENTE verificado (clicou no link)
  const checkEmailVerificationAndSync = async (expectedEmail?: string) => {
    if (!user) {
      console.log('[Auth] Nenhum usu√°rio logado para verificar');
      return false;
    }

    try {
      console.log('[Auth] üîç Verificando se NOVO email foi REALMENTE verificado...');
      console.log('[Auth] UID do usu√°rio:', user.uid);
      console.log('[Auth] Email esperado (novo):', expectedEmail);
      console.log('[Auth] Email atual no Auth:', user.email);
      
      // ‚úÖ CR√çTICO: Recarregar dados do usu√°rio para pegar status atualizado
      try {
        await user.reload();
        console.log('[Auth] Dados do usu√°rio recarregados');
        console.log('[Auth] Email ap√≥s reload:', user.email);
        console.log('[Auth] emailVerified atual:', user.emailVerified);
      } catch (reloadError: any) {
        console.error('[Auth] ‚ùå Erro ao recarregar dados do usu√°rio:', reloadError);
        
        // ‚úÖ ESTRAT√âGIA OFICIAL: Token expirado durante verifica√ß√£o
        if (reloadError.code === 'auth/user-token-expired') {
          console.log('[Auth] üîÑ TOKEN EXPIRADO - Aplicando solu√ß√£o robusta');
          
          // ‚úÖ SOLU√á√ÉO ROBUSTA: Verificar no Firestore se email foi atualizado
          if (expectedEmail) {
            try {
              console.log('[Auth] üîç Verificando Firestore para email:', expectedEmail);
              
              // Buscar no Firestore se algum usu√°rio tem esse email verificado
              const userDoc = await getDoc(doc(db, 'users', user.uid));
              if (userDoc.exists()) {
                const userData = userDoc.data();
                console.log('[Auth] üìÑ Dados do Firestore:', userData);
                
                // Se o email no Firestore j√° √© o novo email, significa que foi verificado
                if (userData.email === expectedEmail && userData.emailVerified) {
                  console.log('[Auth] ‚úÖ SUCESSO! Email j√° foi verificado e sincronizado no Firestore');
                  console.log('[Auth] üîÑ Fazendo logout para for√ßar re-login com token v√°lido');
                  
                  // Fazer logout e instruir re-login
                  await signOut(auth);
                  
                  throw new Error(`‚úÖ Email verificado com sucesso!\n\nüîÑ Fa√ßa login novamente para continuar\n\nSeu novo email ${expectedEmail} j√° est√° ativo!`);
                }
              }
              
              console.log('[Auth] ‚è≥ Email ainda n√£o foi verificado - aguardando...');
              console.log('[Auth] üí° INSTRU√á√ïES PARA O USU√ÅRIO:');
              console.log('[Auth] üìß 1. Verifique sua caixa de entrada:', expectedEmail);
              console.log('[Auth] üîó 2. Clique no link de verifica√ß√£o');
              console.log('[Auth] üîÑ 3. Volte aqui e clique em "Verificar Agora" novamente');
              
              // ‚úÖ LOCALHOST: Simular atualiza√ß√£o do email no Firestore
              const isLocalhost = window.location.hostname === 'localhost';
              if (isLocalhost) {
                console.log('[Auth] üè† LOCALHOST DETECTADO - Simulando atualiza√ß√£o do email...');
                
                // Simular que o usu√°rio clicou no link atualizando o Firestore
                try {
                  await updateDoc(doc(db, 'users', user.uid), {
                    email: expectedEmail,
                    emailVerified: true,
                    lastSync: new Date().toISOString(),
                    lastEmailVerification: new Date().toISOString(),
                  });
                  
                  console.log('[Auth] ‚úÖ LOCALHOST: Email simulado como verificado no Firestore');
                  
                  // Recarregar perfil
                  await loadUserProfile(user.uid);
                  
                  // ‚úÖ CRITICAL: Retornar true em vez de lan√ßar erro
                  console.log('[Auth] ‚úÖ LOCALHOST: Simula√ß√£o completa - retornando sucesso');
                  return true;
                  
                } catch (updateError) {
                  console.error('[Auth] ‚ùå Erro ao simular verifica√ß√£o:', updateError);
                }
              }
              
              throw new Error(`üìß Verifique sua caixa de entrada: ${expectedEmail}\n\nüîó Clique no link de verifica√ß√£o\n\nüîÑ Depois clique em "Verificar Agora" novamente`);
              
            } catch (firestoreError) {
              console.error('[Auth] ‚ùå Erro ao verificar Firestore:', firestoreError);
              
              // Se √© o erro que acabamos de lan√ßar, propagar
              if (firestoreError instanceof Error && firestoreError.message.includes('üìß')) {
                throw firestoreError;
              }
              
              // Fallback padr√£o
              throw new Error(`üîó Clique no link enviado para ${expectedEmail}\n\nüîÑ Depois fa√ßa login novamente\n\nSeu novo email ser√° sincronizado automaticamente!`);
            }
          }
          
          throw new Error('Sess√£o expirada. Fa√ßa login novamente.');
        }
        throw reloadError;
      }
      
      // ‚úÖ VERIFICA√á√ÉO DUPLA: Email deve estar verificado E ser o email esperado
      if (!user.emailVerified) {
        console.log('[Auth] ‚ùå Email ainda N√ÉO foi verificado pelo usu√°rio');
        return false;
      }
      
      if (expectedEmail && user.email !== expectedEmail) {
        console.log('[Auth] ‚ùå Email verificado, mas ainda √© o antigo:', user.email, '‚â†', expectedEmail);
        console.log('[Auth] ‚ùå Aguardando mudan√ßa para o novo email...');
        return false;
      }
      
      console.log('[Auth] ‚úÖ NOVO email foi VERIFICADO pelo usu√°rio!', user.email);
      
      // ‚úÖ SEMPRE SINCRONIZAR: Garantir que Firestore est√° atualizado
      const userDocRef = doc(db, 'users', user.uid);
      
      console.log('[Auth] üîÑ FOR√áANDO sincroniza√ß√£o com Firestore...');
      
      try {
        await updateDoc(userDocRef, {
          email: user.email,
          emailVerified: user.emailVerified,
          lastEmailVerification: new Date().toISOString(),
          lastSync: new Date().toISOString(),
          lastLogin: new Date().toISOString()
        });
        
        console.log('[Auth] ‚úÖ Firestore FOR√áADAMENTE sincronizado!');
        console.log('[Auth] Email no Firestore agora:', user.email);

        // Recarregar perfil
        await loadUserProfile(user.uid);
        
        console.log('[Auth] ‚úÖ Perfil recarregado - sincroniza√ß√£o completa!');
        return true;
        
      } catch (updateError) {
        console.error('[Auth] ‚ùå Erro ao sincronizar Firestore:', updateError);
        throw updateError;
      }
      
    } catch (error) {
      console.error('[Auth] ‚ùå Erro ao verificar NOVO email:', error);
      return false;
    }
  };

  // Fun√ß√£o legacy para compatibilidade (agora chama a nova fun√ß√£o)
  const checkEmailUpdateAndSync = async () => {
    return await checkEmailVerificationAndSync();
  };

  const updateUserPassword = async (currentPassword: string, newPassword: string) => {
    if (!user) throw new Error('Usu√°rio n√£o autenticado');

    try {
      // Reautenticar antes de atualizar senha
      const credential = EmailAuthProvider.credential(user.email!, currentPassword);
      await reauthenticateWithCredential(user, credential);

      // Atualizar senha
      await updatePassword(user, newPassword);
    } catch (error) {
      throw error;
    }
  };

  const updateUserProfile = async (updates: Partial<UserProfile>) => {
    if (!user) throw new Error('Usu√°rio n√£o autenticado');

    try {
      // Atualizar no Firestore
      await updateDoc(doc(db, 'users', user.uid), updates);

      // Se estiver atualizando displayName, tamb√©m atualizar no Firebase Auth
      if (updates.displayName) {
        await updateProfile(user, {
          displayName: updates.displayName
        });
      }

      // Recarregar perfil
      await loadUserProfile(user.uid);
    } catch (error) {
      throw error;
    }
  };

  const refreshUserProfile = async () => {
    if (user) {
      await loadUserProfile(user.uid);
    }
  };

  const value: AuthContextType = {
    user,
    userProfile,
    loading,
    signIn,
    signUp,
    logout,
    resetPassword,
    resendEmailVerification,
    updateUserEmail,
    updateUserPassword,
    updateUserProfile,
    refreshUserProfile,
          checkEmailUpdateAndSync,
          checkEmailVerificationAndSync,
    forceUpdateEmailInFirestore,
    syncFirestoreWithAuth,
    forceCompleteSync,
    manualSync: syncFirestoreWithAuth,
    checkOfficialEmailVerification,
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
}
