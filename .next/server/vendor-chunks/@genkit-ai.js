"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@genkit-ai";
exports.ids = ["vendor-chunks/@genkit-ai"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX: () => (/* reexport safe */ _max_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   NIL: () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   v1: () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   v1ToV6: () => (/* reexport safe */ _v1ToV6_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n/* harmony export */   v3: () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   v4: () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   v5: () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   v6: () => (/* reexport safe */ _v6_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   v6ToV1: () => (/* reexport safe */ _v6ToV1_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   v7: () => (/* reexport safe */ _v7_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"]),\n/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _max_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./max.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/max.js\");\n/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nil.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/nil.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./v1.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v1.js\");\n/* harmony import */ var _v1ToV6_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./v1ToV6.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v1ToV6.js\");\n/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./v3.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v3.js\");\n/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./v4.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./v5.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v5.js\");\n/* harmony import */ var _v6_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./v6.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v6.js\");\n/* harmony import */ var _v6ToV1_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./v6ToV1.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v6ToV1.js\");\n/* harmony import */ var _v7_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./v7.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v7.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./validate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./version.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/version.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEwQztBQUNBO0FBQ0k7QUFDUTtBQUNkO0FBQ1E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNRO0FBQ1I7QUFDWSIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvaW5kZXguanM/MTI5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IGFzIE1BWCB9IGZyb20gJy4vbWF4LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTklMIH0gZnJvbSAnLi9uaWwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJzZSB9IGZyb20gJy4vcGFyc2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHYxIH0gZnJvbSAnLi92MS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHYxVG9WNiB9IGZyb20gJy4vdjFUb1Y2LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjMgfSBmcm9tICcuL3YzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjQgfSBmcm9tICcuL3Y0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjUgfSBmcm9tICcuL3Y1LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjYgfSBmcm9tICcuL3Y2LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjZUb1YxIH0gZnJvbSAnLi92NlRvVjEuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2NyB9IGZyb20gJy4vdjcuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2YWxpZGF0ZSB9IGZyb20gJy4vdmFsaWRhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2ZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uLmpzJzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/max.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/max.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('ffffffff-ffff-ffff-ffff-ffffffffffff');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWF4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL21heC5qcz8xNjg2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0ICdmZmZmZmZmZi1mZmZmLWZmZmYtZmZmZi1mZmZmZmZmZmZmZmYnOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/max.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/md5.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/md5.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n  return node_crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('md5').update(bytes).digest();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLFNBQVMsNkRBQWlCO0FBQzFCO0FBQ0EsaUVBQWUsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzPzgzOGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdub2RlOmNyeXB0byc7XG5mdW5jdGlvbiBtZDUoYnl0ZXMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgYnl0ZXMgPSBCdWZmZXIuZnJvbShieXRlcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMsICd1dGY4Jyk7XG4gIH1cbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoYnl0ZXMpLmRpZ2VzdCgpO1xufVxuZXhwb3J0IGRlZmF1bHQgbWQ1OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/md5.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/native.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/native.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  randomUUID: (node_crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID)\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmF0aXZlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNqQyxpRUFBZTtBQUNmLGNBQWMsK0RBQWlCO0FBQy9CLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25hdGl2ZS5qcz8wZGEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnbm9kZTpjcnlwdG8nO1xuZXhwb3J0IGRlZmF1bHQge1xuICByYW5kb21VVUlEOiBjcnlwdG8ucmFuZG9tVVVJRFxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/native.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/nil.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/nil.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25pbC5qcz84Y2Q0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0ICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/nil.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/parse.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/parse.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/validate.js\");\n\nfunction parse(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n  let v;\n  const arr = new Uint8Array(16);\n\n  // Parse ########-....-....-....-............\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff;\n\n  // Parse ........-####-....-....-............\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff;\n\n  // Parse ........-....-####-....-............\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff;\n\n  // Parse ........-....-....-####-............\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff;\n\n  // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcGFyc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7QUFDckM7QUFDQSxPQUFPLHdEQUFRO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3BhcnNlLmpzPzJlZGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuZnVuY3Rpb24gcGFyc2UodXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuICBsZXQgdjtcbiAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuXG4gIC8vIFBhcnNlICMjIyMjIyMjLS4uLi4tLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuICBhcnJbMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMCwgOCksIDE2KSkgPj4+IDI0O1xuICBhcnJbMV0gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsyXSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbM10gPSB2ICYgMHhmZjtcblxuICAvLyBQYXJzZSAuLi4uLi4uLi0jIyMjLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cbiAgYXJyWzRdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDksIDEzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzVdID0gdiAmIDB4ZmY7XG5cbiAgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0jIyMjLS4uLi4tLi4uLi4uLi4uLi4uXG4gIGFycls2XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxNCwgMTgpLCAxNikpID4+PiA4O1xuICBhcnJbN10gPSB2ICYgMHhmZjtcblxuICAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tIyMjIy0uLi4uLi4uLi4uLi5cbiAgYXJyWzhdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE5LCAyMyksIDE2KSkgPj4+IDg7XG4gIGFycls5XSA9IHYgJiAweGZmO1xuXG4gIC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0uLi4uLSMjIyMjIyMjIyMjI1xuICAvLyAoVXNlIFwiL1wiIHRvIGF2b2lkIDMyLWJpdCB0cnVuY2F0aW9uIHdoZW4gYml0LXNoaWZ0aW5nIGhpZ2gtb3JkZXIgYnl0ZXMpXG4gIGFyclsxMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMjQsIDM2KSwgMTYpKSAvIDB4MTAwMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTFdID0gdiAvIDB4MTAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzEyXSA9IHYgPj4+IDI0ICYgMHhmZjtcbiAgYXJyWzEzXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzE0XSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbMTVdID0gdiAmIDB4ZmY7XG4gIHJldHVybiBhcnI7XG59XG5leHBvcnQgZGVmYXVsdCBwYXJzZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/parse.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/regex.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/regex.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcmVnZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsR0FBRyw4RUFBOEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JlZ2V4LmpzP2YzNGEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS04XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDB8ZmZmZmZmZmYtZmZmZi1mZmZmLWZmZmYtZmZmZmZmZmZmZmZmKSQvaTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/regex.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/rng.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/rng.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    node_crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNqQyx1Q0FBdUM7QUFDdkM7QUFDZTtBQUNmO0FBQ0EsSUFBSSxpRUFBcUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JuZy5qcz9jMjM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnbm9kZTpjcnlwdG8nO1xuY29uc3Qgcm5kczhQb29sID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTsgLy8gIyBvZiByYW5kb20gdmFsdWVzIHRvIHByZS1hbGxvY2F0ZVxubGV0IHBvb2xQdHIgPSBybmRzOFBvb2wubGVuZ3RoO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICBpZiAocG9vbFB0ciA+IHJuZHM4UG9vbC5sZW5ndGggLSAxNikge1xuICAgIGNyeXB0by5yYW5kb21GaWxsU3luYyhybmRzOFBvb2wpO1xuICAgIHBvb2xQdHIgPSAwO1xuICB9XG4gIHJldHVybiBybmRzOFBvb2wuc2xpY2UocG9vbFB0ciwgcG9vbFB0ciArPSAxNik7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/rng.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/sha1.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/sha1.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n  return node_crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha1').update(bytes).digest();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc2hhMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxTQUFTLDZEQUFpQjtBQUMxQjtBQUNBLGlFQUFlLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3NoYTEuanM/YmYwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ25vZGU6Y3J5cHRvJztcbmZ1bmN0aW9uIHNoYTEoYnl0ZXMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgYnl0ZXMgPSBCdWZmZXIuZnJvbShieXRlcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMsICd1dGY4Jyk7XG4gIH1cbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKGJ5dGVzKS5kaWdlc3QoKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHNoYTE7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/sha1.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/validate.js\");\n\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  //\n  // Note to future-self: No, you can't remove the `toLowerCase()` call.\n  // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset);\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n  return uuid;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxQzs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHdEQUFRO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zdHJpbmdpZnkuanM/Y2VhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5cbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuY29uc3QgYnl0ZVRvSGV4ID0gW107XG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgLy9cbiAgLy8gTm90ZSB0byBmdXR1cmUtc2VsZjogTm8sIHlvdSBjYW4ndCByZW1vdmUgdGhlIGB0b0xvd2VyQ2FzZSgpYCBjYWxsLlxuICAvLyBSRUY6IGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzY3NyNpc3N1ZWNvbW1lbnQtMTc1NzM1MTM1MVxuICByZXR1cm4gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICBjb25zdCB1dWlkID0gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0KTtcbiAgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuICByZXR1cm4gdXVpZDtcbn1cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v1.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v1.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\nlet _clockseq;\n\n// Previous uuid creation time\nlet _lastMSecs = 0;\nlet _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node;\n  let clockseq = options.clockseq;\n\n  // v1 only: Use cached `node` and `clockseq` values\n  if (!options._v6) {\n    if (!node) {\n      node = _nodeId;\n    }\n    if (clockseq == null) {\n      clockseq = _clockseq;\n    }\n  }\n\n  // Handle cases where we need entropy.  We do this lazily to minimize issues\n  // related to insufficient system entropy.  See #189\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n    // Randomize node\n    if (node == null) {\n      node = [seedBytes[0], seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n\n      // v1 only: cache node value for reuse\n      if (!_nodeId && !options._v6) {\n        // per RFC4122 4.5: Set MAC multicast bit (v1 only)\n        node[0] |= 0x01; // Set multicast bit\n\n        _nodeId = node;\n      }\n    }\n\n    // Randomize clockseq\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n      if (_clockseq === undefined && !options._v6) {\n        _clockseq = clockseq;\n      }\n    }\n  }\n\n  // v1 & v6 timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so time is\n  // handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(b);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ3NCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELCtDQUFHOztBQUUzRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQztBQUNwQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0EsZ0JBQWdCLDhEQUFlO0FBQy9CO0FBQ0EsaUVBQWUsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjEuanM/MTJlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuLy8gKipgdjEoKWAgLSBHZW5lcmF0ZSB0aW1lLWJhc2VkIFVVSUQqKlxuLy9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9MaW9zSy9VVUlELmpzXG4vLyBhbmQgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3V1aWQuaHRtbFxuXG5sZXQgX25vZGVJZDtcbmxldCBfY2xvY2tzZXE7XG5cbi8vIFByZXZpb3VzIHV1aWQgY3JlYXRpb24gdGltZVxubGV0IF9sYXN0TVNlY3MgPSAwO1xubGV0IF9sYXN0TlNlY3MgPSAwO1xuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkIGZvciBBUEkgZGV0YWlsc1xuZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgbGV0IGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG4gIGNvbnN0IGIgPSBidWYgfHwgbmV3IEFycmF5KDE2KTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxldCBub2RlID0gb3B0aW9ucy5ub2RlO1xuICBsZXQgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxO1xuXG4gIC8vIHYxIG9ubHk6IFVzZSBjYWNoZWQgYG5vZGVgIGFuZCBgY2xvY2tzZXFgIHZhbHVlc1xuICBpZiAoIW9wdGlvbnMuX3Y2KSB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICBub2RlID0gX25vZGVJZDtcbiAgICB9XG4gICAgaWYgKGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICAgIGNsb2Nrc2VxID0gX2Nsb2Nrc2VxO1xuICAgIH1cbiAgfVxuXG4gIC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB3ZSBuZWVkIGVudHJvcHkuICBXZSBkbyB0aGlzIGxhemlseSB0byBtaW5pbWl6ZSBpc3N1ZXNcbiAgLy8gcmVsYXRlZCB0byBpbnN1ZmZpY2llbnQgc3lzdGVtIGVudHJvcHkuICBTZWUgIzE4OVxuICBpZiAobm9kZSA9PSBudWxsIHx8IGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICBjb25zdCBzZWVkQnl0ZXMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gICAgLy8gUmFuZG9taXplIG5vZGVcbiAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICBub2RlID0gW3NlZWRCeXRlc1swXSwgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1dO1xuXG4gICAgICAvLyB2MSBvbmx5OiBjYWNoZSBub2RlIHZhbHVlIGZvciByZXVzZVxuICAgICAgaWYgKCFfbm9kZUlkICYmICFvcHRpb25zLl92Nikge1xuICAgICAgICAvLyBwZXIgUkZDNDEyMiA0LjU6IFNldCBNQUMgbXVsdGljYXN0IGJpdCAodjEgb25seSlcbiAgICAgICAgbm9kZVswXSB8PSAweDAxOyAvLyBTZXQgbXVsdGljYXN0IGJpdFxuXG4gICAgICAgIF9ub2RlSWQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJhbmRvbWl6ZSBjbG9ja3NlcVxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgICAgaWYgKF9jbG9ja3NlcSA9PT0gdW5kZWZpbmVkICYmICFvcHRpb25zLl92Nikge1xuICAgICAgICBfY2xvY2tzZXEgPSBjbG9ja3NlcTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyB2MSAmIHY2IHRpbWVzdGFtcHMgYXJlIDEwMCBuYW5vLXNlY29uZCB1bml0cyBzaW5jZSB0aGUgR3JlZ29yaWFuIGVwb2NoLFxuICAvLyAoMTU4Mi0xMC0xNSAwMDowMCkuICBKU051bWJlcnMgYXJlbid0IHByZWNpc2UgZW5vdWdoIGZvciB0aGlzLCBzbyB0aW1lIGlzXG4gIC8vIGhhbmRsZWQgaW50ZXJuYWxseSBhcyAnbXNlY3MnIChpbnRlZ2VyIG1pbGxpc2Vjb25kcykgYW5kICduc2VjcydcbiAgLy8gKDEwMC1uYW5vc2Vjb25kcyBvZmZzZXQgZnJvbSBtc2Vjcykgc2luY2UgdW5peCBlcG9jaCwgMTk3MC0wMS0wMSAwMDowMC5cbiAgbGV0IG1zZWNzID0gb3B0aW9ucy5tc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5tc2VjcyA6IERhdGUubm93KCk7XG5cbiAgLy8gUGVyIDQuMi4xLjIsIHVzZSBjb3VudCBvZiB1dWlkJ3MgZ2VuZXJhdGVkIGR1cmluZyB0aGUgY3VycmVudCBjbG9ja1xuICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9ja1xuICBsZXQgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7XG5cbiAgLy8gVGltZSBzaW5jZSBsYXN0IHV1aWQgY3JlYXRpb24gKGluIG1zZWNzKVxuICBjb25zdCBkdCA9IG1zZWNzIC0gX2xhc3RNU2VjcyArIChuc2VjcyAtIF9sYXN0TlNlY3MpIC8gMTAwMDA7XG5cbiAgLy8gUGVyIDQuMi4xLjIsIEJ1bXAgY2xvY2tzZXEgb24gY2xvY2sgcmVncmVzc2lvblxuICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsb2Nrc2VxID0gY2xvY2tzZXEgKyAxICYgMHgzZmZmO1xuICB9XG5cbiAgLy8gUmVzZXQgbnNlY3MgaWYgY2xvY2sgcmVncmVzc2VzIChuZXcgY2xvY2tzZXEpIG9yIHdlJ3ZlIG1vdmVkIG9udG8gYSBuZXdcbiAgLy8gdGltZSBpbnRlcnZhbFxuICBpZiAoKGR0IDwgMCB8fCBtc2VjcyA+IF9sYXN0TVNlY3MpICYmIG9wdGlvbnMubnNlY3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG5zZWNzID0gMDtcbiAgfVxuXG4gIC8vIFBlciA0LjIuMS4yIFRocm93IGVycm9yIGlmIHRvbyBtYW55IHV1aWRzIGFyZSByZXF1ZXN0ZWRcbiAgaWYgKG5zZWNzID49IDEwMDAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidXVpZC52MSgpOiBDYW4ndCBjcmVhdGUgbW9yZSB0aGFuIDEwTSB1dWlkcy9zZWNcIik7XG4gIH1cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxO1xuXG4gIC8vIFBlciA0LjEuNCAtIENvbnZlcnQgZnJvbSB1bml4IGVwb2NoIHRvIEdyZWdvcmlhbiBlcG9jaFxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDtcblxuICAvLyBgdGltZV9sb3dgXG4gIGNvbnN0IHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwO1xuICBiW2krK10gPSB0bCA+Pj4gMjQgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gMTYgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsICYgMHhmZjtcblxuICAvLyBgdGltZV9taWRgXG4gIGNvbnN0IHRtaCA9IG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCAmIDB4ZmZmZmZmZjtcbiAgYltpKytdID0gdG1oID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdG1oICYgMHhmZjtcblxuICAvLyBgdGltZV9oaWdoX2FuZF92ZXJzaW9uYFxuICBiW2krK10gPSB0bWggPj4+IDI0ICYgMHhmIHwgMHgxMDsgLy8gaW5jbHVkZSB2ZXJzaW9uXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMTYgJiAweGZmO1xuXG4gIC8vIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYCAoUGVyIDQuMi4yIC0gaW5jbHVkZSB2YXJpYW50KVxuICBiW2krK10gPSBjbG9ja3NlcSA+Pj4gOCB8IDB4ODA7XG5cbiAgLy8gYGNsb2NrX3NlcV9sb3dgXG4gIGJbaSsrXSA9IGNsb2Nrc2VxICYgMHhmZjtcblxuICAvLyBgbm9kZWBcbiAgZm9yIChsZXQgbiA9IDA7IG4gPCA2OyArK24pIHtcbiAgICBiW2kgKyBuXSA9IG5vZGVbbl07XG4gIH1cbiAgcmV0dXJuIGJ1ZiB8fCB1bnNhZmVTdHJpbmdpZnkoYik7XG59XG5leHBvcnQgZGVmYXVsdCB2MTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v1.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v1ToV6.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v1ToV6.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ v1ToV6)\n/* harmony export */ });\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n/**\n * Convert a v1 UUID to a v6 UUID\n *\n * @param {string|Uint8Array} uuid - The v1 UUID to convert to v6\n * @returns {string|Uint8Array} The v6 UUID as the same type as the `uuid` arg\n * (string or Uint8Array)\n */\nfunction v1ToV6(uuid) {\n  const v1Bytes = typeof uuid === 'string' ? (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid) : uuid;\n  const v6Bytes = _v1ToV6(v1Bytes);\n  return typeof uuid === 'string' ? (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(v6Bytes) : v6Bytes;\n}\n\n// Do the field transformation needed for v1 -> v6\nfunction _v1ToV6(v1Bytes, randomize = false) {\n  return Uint8Array.of((v1Bytes[6] & 0x0f) << 4 | v1Bytes[7] >> 4 & 0x0f, (v1Bytes[7] & 0x0f) << 4 | (v1Bytes[4] & 0xf0) >> 4, (v1Bytes[4] & 0x0f) << 4 | (v1Bytes[5] & 0xf0) >> 4, (v1Bytes[5] & 0x0f) << 4 | (v1Bytes[0] & 0xf0) >> 4, (v1Bytes[0] & 0x0f) << 4 | (v1Bytes[1] & 0xf0) >> 4, (v1Bytes[1] & 0x0f) << 4 | (v1Bytes[2] & 0xf0) >> 4, 0x60 | v1Bytes[2] & 0x0f, v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjFUb1Y2LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQjtBQUNrQjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNlO0FBQ2YsNkNBQTZDLHFEQUFLO0FBQ2xEO0FBQ0Esb0NBQW9DLDhEQUFlO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92MVRvVjYuanM/ZmM4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZS5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbi8qKlxuICogQ29udmVydCBhIHYxIFVVSUQgdG8gYSB2NiBVVUlEXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8VWludDhBcnJheX0gdXVpZCAtIFRoZSB2MSBVVUlEIHRvIGNvbnZlcnQgdG8gdjZcbiAqIEByZXR1cm5zIHtzdHJpbmd8VWludDhBcnJheX0gVGhlIHY2IFVVSUQgYXMgdGhlIHNhbWUgdHlwZSBhcyB0aGUgYHV1aWRgIGFyZ1xuICogKHN0cmluZyBvciBVaW50OEFycmF5KVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2MVRvVjYodXVpZCkge1xuICBjb25zdCB2MUJ5dGVzID0gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnID8gcGFyc2UodXVpZCkgOiB1dWlkO1xuICBjb25zdCB2NkJ5dGVzID0gX3YxVG9WNih2MUJ5dGVzKTtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyA/IHVuc2FmZVN0cmluZ2lmeSh2NkJ5dGVzKSA6IHY2Qnl0ZXM7XG59XG5cbi8vIERvIHRoZSBmaWVsZCB0cmFuc2Zvcm1hdGlvbiBuZWVkZWQgZm9yIHYxIC0+IHY2XG5mdW5jdGlvbiBfdjFUb1Y2KHYxQnl0ZXMsIHJhbmRvbWl6ZSA9IGZhbHNlKSB7XG4gIHJldHVybiBVaW50OEFycmF5Lm9mKCh2MUJ5dGVzWzZdICYgMHgwZikgPDwgNCB8IHYxQnl0ZXNbN10gPj4gNCAmIDB4MGYsICh2MUJ5dGVzWzddICYgMHgwZikgPDwgNCB8ICh2MUJ5dGVzWzRdICYgMHhmMCkgPj4gNCwgKHYxQnl0ZXNbNF0gJiAweDBmKSA8PCA0IHwgKHYxQnl0ZXNbNV0gJiAweGYwKSA+PiA0LCAodjFCeXRlc1s1XSAmIDB4MGYpIDw8IDQgfCAodjFCeXRlc1swXSAmIDB4ZjApID4+IDQsICh2MUJ5dGVzWzBdICYgMHgwZikgPDwgNCB8ICh2MUJ5dGVzWzFdICYgMHhmMCkgPj4gNCwgKHYxQnl0ZXNbMV0gJiAweDBmKSA8PCA0IHwgKHYxQnl0ZXNbMl0gJiAweGYwKSA+PiA0LCAweDYwIHwgdjFCeXRlc1syXSAmIDB4MGYsIHYxQnl0ZXNbM10sIHYxQnl0ZXNbOF0sIHYxQnl0ZXNbOV0sIHYxQnl0ZXNbMTBdLCB2MUJ5dGVzWzExXSwgdjFCeXRlc1sxMl0sIHYxQnl0ZXNbMTNdLCB2MUJ5dGVzWzE0XSwgdjFCeXRlc1sxNV0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v1ToV6.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v3.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v3.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/md5.js\");\n\n\nconst v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0E7QUFDM0IsV0FBVyxtREFBRyxhQUFhLCtDQUFHO0FBQzlCLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzLmpzP2FkNDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgbWQ1IGZyb20gJy4vbWQ1LmpzJztcbmNvbnN0IHYzID0gdjM1KCd2MycsIDB4MzAsIG1kNSk7XG5leHBvcnQgZGVmYXVsdCB2MzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v3.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v35.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v35.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNS: () => (/* binding */ DNS),\n/* harmony export */   URL: () => (/* binding */ URL),\n/* harmony export */   \"default\": () => (/* binding */ v35)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/parse.js\");\n\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n  return bytes;\n}\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nfunction v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n    if (typeof namespace === 'string') {\n      namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(namespace);\n    }\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n\n    // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n    if (buf) {\n      offset = offset || 0;\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n      return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(bytes);\n  }\n\n  // Function#name is not settable on some platforms (#270)\n  try {\n    generateUUID.name = name;\n  } catch (err) {}\n\n  // For CommonJS default export support\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjM1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWlEO0FBQ2xCO0FBQy9CO0FBQ0EsMkNBQTJDOztBQUUzQztBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ1E7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscURBQUs7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixRQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw4REFBZTtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzNS5qcz82NmUzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCBwYXJzZSBmcm9tICcuL3BhcnNlLmpzJztcbmZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXMoc3RyKSB7XG4gIHN0ciA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTsgLy8gVVRGOCBlc2NhcGVcblxuICBjb25zdCBieXRlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGJ5dGVzLnB1c2goc3RyLmNoYXJDb2RlQXQoaSkpO1xuICB9XG4gIHJldHVybiBieXRlcztcbn1cbmV4cG9ydCBjb25zdCBETlMgPSAnNmJhN2I4MTAtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydCBjb25zdCBVUkwgPSAnNmJhN2I4MTEtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHYzNShuYW1lLCB2ZXJzaW9uLCBoYXNoZnVuYykge1xuICBmdW5jdGlvbiBnZW5lcmF0ZVVVSUQodmFsdWUsIG5hbWVzcGFjZSwgYnVmLCBvZmZzZXQpIHtcbiAgICB2YXIgX25hbWVzcGFjZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBzdHJpbmdUb0J5dGVzKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lc3BhY2UgPSBwYXJzZShuYW1lc3BhY2UpO1xuICAgIH1cbiAgICBpZiAoKChfbmFtZXNwYWNlID0gbmFtZXNwYWNlKSA9PT0gbnVsbCB8fCBfbmFtZXNwYWNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbmFtZXNwYWNlLmxlbmd0aCkgIT09IDE2KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ05hbWVzcGFjZSBtdXN0IGJlIGFycmF5LWxpa2UgKDE2IGl0ZXJhYmxlIGludGVnZXIgdmFsdWVzLCAwLTI1NSknKTtcbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KDE2ICsgdmFsdWUubGVuZ3RoKTtcbiAgICBieXRlcy5zZXQobmFtZXNwYWNlKTtcbiAgICBieXRlcy5zZXQodmFsdWUsIG5hbWVzcGFjZS5sZW5ndGgpO1xuICAgIGJ5dGVzID0gaGFzaGZ1bmMoYnl0ZXMpO1xuICAgIGJ5dGVzWzZdID0gYnl0ZXNbNl0gJiAweDBmIHwgdmVyc2lvbjtcbiAgICBieXRlc1s4XSA9IGJ5dGVzWzhdICYgMHgzZiB8IDB4ODA7XG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgYnVmW29mZnNldCArIGldID0gYnl0ZXNbaV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KGJ5dGVzKTtcbiAgfVxuXG4gIC8vIEZ1bmN0aW9uI25hbWUgaXMgbm90IHNldHRhYmxlIG9uIHNvbWUgcGxhdGZvcm1zICgjMjcwKVxuICB0cnkge1xuICAgIGdlbmVyYXRlVVVJRC5uYW1lID0gbmFtZTtcbiAgfSBjYXRjaCAoZXJyKSB7fVxuXG4gIC8vIEZvciBDb21tb25KUyBkZWZhdWx0IGV4cG9ydCBzdXBwb3J0XG4gIGdlbmVyYXRlVVVJRC5ETlMgPSBETlM7XG4gIGdlbmVyYXRlVVVJRC5VUkwgPSBVUkw7XG4gIHJldHVybiBnZW5lcmF0ZVVVSUQ7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v35.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v4.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v4.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n  if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n    return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n  }\n  options = options || {};\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    offset = offset || 0;\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUNOO0FBQ3NCO0FBQ2pEO0FBQ0EsTUFBTSxrREFBTTtBQUNaLFdBQVcsa0RBQU07QUFDakI7QUFDQTtBQUNBLGlEQUFpRCwrQ0FBRzs7QUFFcEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw4REFBZTtBQUN4QjtBQUNBLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y0LmpzPzEyMDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIGlmIChuYXRpdmUucmFuZG9tVVVJRCAmJiAhYnVmICYmICFvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5hdGl2ZS5yYW5kb21VVUlEKCk7XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gIC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDtcblxuICAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcbiAgaWYgKGJ1Zikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KHJuZHMpO1xufVxuZXhwb3J0IGRlZmF1bHQgdjQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v4.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v5.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v5.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/sha1.js\");\n\n\nconst v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0U7QUFDN0IsV0FBVyxtREFBRyxhQUFhLGdEQUFJO0FBQy9CLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y1LmpzPzBiN2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgc2hhMSBmcm9tICcuL3NoYTEuanMnO1xuY29uc3QgdjUgPSB2MzUoJ3Y1JywgMHg1MCwgc2hhMSk7XG5leHBvcnQgZGVmYXVsdCB2NTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v5.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v6.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v6.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ v6)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v1.js\");\n/* harmony import */ var _v1ToV6_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v1ToV6.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v1ToV6.js\");\n\n\n\n\n/**\n *\n * @param {object} options\n * @param {Uint8Array=} buf\n * @param {number=} offset\n * @returns\n */\nfunction v6(options = {}, buf, offset = 0) {\n  // v6 is v1 with different field layout, so we start with a v1 UUID, albeit\n  // with slightly different behavior around how the clock_seq and node fields\n  // are randomized, which is why we call v1 with _v6: true.\n  let bytes = (0,_v1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n    ...options,\n    _v6: true\n  }, new Uint8Array(16));\n\n  // Reorder the fields to v6 layout.\n  bytes = (0,_v1ToV6_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(bytes);\n\n  // Return as a byte array if requested\n  if (buf) {\n    for (let i = 0; i < 16; i++) {\n      buf[offset + i] = bytes[i];\n    }\n    return buf;\n  }\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(bytes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpRDtBQUN4QjtBQUNROztBQUVqQztBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsYUFBYTtBQUN4QixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNlLHdCQUF3QjtBQUN2QztBQUNBO0FBQ0E7QUFDQSxjQUFjLGtEQUFFO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsVUFBVSxzREFBTTs7QUFFaEI7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw4REFBZTtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjYuanM/MmU4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5pbXBvcnQgdjEgZnJvbSAnLi92MS5qcyc7XG5pbXBvcnQgdjFUb1Y2IGZyb20gJy4vdjFUb1Y2LmpzJztcblxuLyoqXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7VWludDhBcnJheT19IGJ1ZlxuICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXRcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHY2KG9wdGlvbnMgPSB7fSwgYnVmLCBvZmZzZXQgPSAwKSB7XG4gIC8vIHY2IGlzIHYxIHdpdGggZGlmZmVyZW50IGZpZWxkIGxheW91dCwgc28gd2Ugc3RhcnQgd2l0aCBhIHYxIFVVSUQsIGFsYmVpdFxuICAvLyB3aXRoIHNsaWdodGx5IGRpZmZlcmVudCBiZWhhdmlvciBhcm91bmQgaG93IHRoZSBjbG9ja19zZXEgYW5kIG5vZGUgZmllbGRzXG4gIC8vIGFyZSByYW5kb21pemVkLCB3aGljaCBpcyB3aHkgd2UgY2FsbCB2MSB3aXRoIF92NjogdHJ1ZS5cbiAgbGV0IGJ5dGVzID0gdjEoe1xuICAgIC4uLm9wdGlvbnMsXG4gICAgX3Y2OiB0cnVlXG4gIH0sIG5ldyBVaW50OEFycmF5KDE2KSk7XG5cbiAgLy8gUmVvcmRlciB0aGUgZmllbGRzIHRvIHY2IGxheW91dC5cbiAgYnl0ZXMgPSB2MVRvVjYoYnl0ZXMpO1xuXG4gIC8vIFJldHVybiBhcyBhIGJ5dGUgYXJyYXkgaWYgcmVxdWVzdGVkXG4gIGlmIChidWYpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xuICB9XG4gIHJldHVybiB1bnNhZmVTdHJpbmdpZnkoYnl0ZXMpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v6.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v6ToV1.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v6ToV1.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ v6ToV1)\n/* harmony export */ });\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n/**\n * Convert a v6 UUID to a v1 UUID\n *\n * @param {string|Uint8Array} uuid - The v6 UUID to convert to v6\n * @returns {string|Uint8Array} The v1 UUID as the same type as the `uuid` arg\n * (string or Uint8Array)\n */\nfunction v6ToV1(uuid) {\n  const v6Bytes = typeof uuid === 'string' ? (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid) : uuid;\n  const v1Bytes = _v6ToV1(v6Bytes);\n  return typeof uuid === 'string' ? (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(v1Bytes) : v1Bytes;\n}\n\n// Do the field transformation needed for v6 -> v1\nfunction _v6ToV1(v6Bytes) {\n  return Uint8Array.of((v6Bytes[3] & 0x0f) << 4 | v6Bytes[4] >> 4 & 0x0f, (v6Bytes[4] & 0x0f) << 4 | (v6Bytes[5] & 0xf0) >> 4, (v6Bytes[5] & 0x0f) << 4 | v6Bytes[6] & 0x0f, v6Bytes[7], (v6Bytes[1] & 0x0f) << 4 | (v6Bytes[2] & 0xf0) >> 4, (v6Bytes[2] & 0x0f) << 4 | (v6Bytes[3] & 0xf0) >> 4, 0x10 | (v6Bytes[0] & 0xf0) >> 4, (v6Bytes[0] & 0x0f) << 4 | (v6Bytes[1] & 0xf0) >> 4, v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjZUb1YxLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQjtBQUNrQjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNlO0FBQ2YsNkNBQTZDLHFEQUFLO0FBQ2xEO0FBQ0Esb0NBQW9DLDhEQUFlO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92NlRvVjEuanM/M2I3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZS5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbi8qKlxuICogQ29udmVydCBhIHY2IFVVSUQgdG8gYSB2MSBVVUlEXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8VWludDhBcnJheX0gdXVpZCAtIFRoZSB2NiBVVUlEIHRvIGNvbnZlcnQgdG8gdjZcbiAqIEByZXR1cm5zIHtzdHJpbmd8VWludDhBcnJheX0gVGhlIHYxIFVVSUQgYXMgdGhlIHNhbWUgdHlwZSBhcyB0aGUgYHV1aWRgIGFyZ1xuICogKHN0cmluZyBvciBVaW50OEFycmF5KVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2NlRvVjEodXVpZCkge1xuICBjb25zdCB2NkJ5dGVzID0gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnID8gcGFyc2UodXVpZCkgOiB1dWlkO1xuICBjb25zdCB2MUJ5dGVzID0gX3Y2VG9WMSh2NkJ5dGVzKTtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyA/IHVuc2FmZVN0cmluZ2lmeSh2MUJ5dGVzKSA6IHYxQnl0ZXM7XG59XG5cbi8vIERvIHRoZSBmaWVsZCB0cmFuc2Zvcm1hdGlvbiBuZWVkZWQgZm9yIHY2IC0+IHYxXG5mdW5jdGlvbiBfdjZUb1YxKHY2Qnl0ZXMpIHtcbiAgcmV0dXJuIFVpbnQ4QXJyYXkub2YoKHY2Qnl0ZXNbM10gJiAweDBmKSA8PCA0IHwgdjZCeXRlc1s0XSA+PiA0ICYgMHgwZiwgKHY2Qnl0ZXNbNF0gJiAweDBmKSA8PCA0IHwgKHY2Qnl0ZXNbNV0gJiAweGYwKSA+PiA0LCAodjZCeXRlc1s1XSAmIDB4MGYpIDw8IDQgfCB2NkJ5dGVzWzZdICYgMHgwZiwgdjZCeXRlc1s3XSwgKHY2Qnl0ZXNbMV0gJiAweDBmKSA8PCA0IHwgKHY2Qnl0ZXNbMl0gJiAweGYwKSA+PiA0LCAodjZCeXRlc1syXSAmIDB4MGYpIDw8IDQgfCAodjZCeXRlc1szXSAmIDB4ZjApID4+IDQsIDB4MTAgfCAodjZCeXRlc1swXSAmIDB4ZjApID4+IDQsICh2NkJ5dGVzWzBdICYgMHgwZikgPDwgNCB8ICh2NkJ5dGVzWzFdICYgMHhmMCkgPj4gNCwgdjZCeXRlc1s4XSwgdjZCeXRlc1s5XSwgdjZCeXRlc1sxMF0sIHY2Qnl0ZXNbMTFdLCB2NkJ5dGVzWzEyXSwgdjZCeXRlc1sxM10sIHY2Qnl0ZXNbMTRdLCB2NkJ5dGVzWzE1XSk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v6ToV1.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v7.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v7.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n/**\n * UUID V7 - Unix Epoch time-based UUID\n *\n * The IETF has published RFC9562, introducing 3 new UUID versions (6,7,8). This\n * implementation of V7 is based on the accepted, though not yet approved,\n * revisions.\n *\n * RFC 9562:https://www.rfc-editor.org/rfc/rfc9562.html Universally Unique\n * IDentifiers (UUIDs)\n\n *\n * Sample V7 value:\n * https://www.rfc-editor.org/rfc/rfc9562.html#name-example-of-a-uuidv7-value\n *\n * Monotonic Bit Layout: RFC rfc9562.6.2 Method 1, Dedicated Counter Bits ref:\n *     https://www.rfc-editor.org/rfc/rfc9562.html#section-6.2-5.1\n *\n *   0                   1                   2                   3 0 1 2 3 4 5 6\n *   7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                          unix_ts_ms                           |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |          unix_ts_ms           |  ver  |        seq_hi         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |var|               seq_low               |        rand         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                             rand                              |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *\n * seq is a 31 bit serialized counter; comprised of 12 bit seq_hi and 19 bit\n * seq_low, and randomly initialized upon timestamp change. 31 bit counter size\n * was selected as any bitwise operations in node are done as _signed_ 32 bit\n * ints. we exclude the sign bit.\n */\n\nlet _seqLow = null;\nlet _seqHigh = null;\nlet _msecs = 0;\nfunction v7(options, buf, offset) {\n  options = options || {};\n\n  // initialize buffer and pointer\n  let i = buf && offset || 0;\n  const b = buf || new Uint8Array(16);\n\n  // rnds is Uint8Array(16) filled with random bytes\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n  // milliseconds since unix epoch, 1970-01-01 00:00\n  const msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // seq is user provided 31 bit counter\n  let seq = options.seq !== undefined ? options.seq : null;\n\n  // initialize local seq high/low parts\n  let seqHigh = _seqHigh;\n  let seqLow = _seqLow;\n\n  // check if clock has advanced and user has not provided msecs\n  if (msecs > _msecs && options.msecs === undefined) {\n    _msecs = msecs;\n\n    // unless user provided seq, reset seq parts\n    if (seq !== null) {\n      seqHigh = null;\n      seqLow = null;\n    }\n  }\n\n  // if we have a user provided seq\n  if (seq !== null) {\n    // trim provided seq to 31 bits of value, avoiding overflow\n    if (seq > 0x7fffffff) {\n      seq = 0x7fffffff;\n    }\n\n    // split provided seq into high/low parts\n    seqHigh = seq >>> 19 & 0xfff;\n    seqLow = seq & 0x7ffff;\n  }\n\n  // randomly initialize seq\n  if (seqHigh === null || seqLow === null) {\n    seqHigh = rnds[6] & 0x7f;\n    seqHigh = seqHigh << 8 | rnds[7];\n    seqLow = rnds[8] & 0x3f; // pad for var\n    seqLow = seqLow << 8 | rnds[9];\n    seqLow = seqLow << 5 | rnds[10] >>> 3;\n  }\n\n  // increment seq if within msecs window\n  if (msecs + 10000 > _msecs && seq === null) {\n    if (++seqLow > 0x7ffff) {\n      seqLow = 0;\n      if (++seqHigh > 0xfff) {\n        seqHigh = 0;\n\n        // increment internal _msecs. this allows us to continue incrementing\n        // while staying monotonic. Note, once we hit 10k milliseconds beyond system\n        // clock, we will reset breaking monotonicity (after (2^31)*10000 generations)\n        _msecs++;\n      }\n    }\n  } else {\n    // resetting; we have advanced more than\n    // 10k milliseconds beyond system clock\n    _msecs = msecs;\n  }\n  _seqHigh = seqHigh;\n  _seqLow = seqLow;\n\n  // [bytes 0-5] 48 bits of local timestamp\n  b[i++] = _msecs / 0x10000000000 & 0xff;\n  b[i++] = _msecs / 0x100000000 & 0xff;\n  b[i++] = _msecs / 0x1000000 & 0xff;\n  b[i++] = _msecs / 0x10000 & 0xff;\n  b[i++] = _msecs / 0x100 & 0xff;\n  b[i++] = _msecs & 0xff;\n\n  // [byte 6] - set 4 bits of version (7) with first 4 bits seq_hi\n  b[i++] = seqHigh >>> 4 & 0x0f | 0x70;\n\n  // [byte 7] remaining 8 bits of seq_hi\n  b[i++] = seqHigh & 0xff;\n\n  // [byte 8] - variant (2 bits), first 6 bits seq_low\n  b[i++] = seqLow >>> 13 & 0x3f | 0x80;\n\n  // [byte 9] 8 bits seq_low\n  b[i++] = seqLow >>> 5 & 0xff;\n\n  // [byte 10] remaining 5 bits seq_low, 3 bits random\n  b[i++] = seqLow << 3 & 0xff | rnds[10] & 0x07;\n\n  // [bytes 11-15] always random\n  b[i++] = rnds[11];\n  b[i++] = rnds[12];\n  b[i++] = rnds[13];\n  b[i++] = rnds[14];\n  b[i++] = rnds[15];\n  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(b);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v7);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ3NCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQsK0NBQUc7O0FBRXBEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4REFBZTtBQUMvQjtBQUNBLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y3LmpzPzJmNmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbi8qKlxuICogVVVJRCBWNyAtIFVuaXggRXBvY2ggdGltZS1iYXNlZCBVVUlEXG4gKlxuICogVGhlIElFVEYgaGFzIHB1Ymxpc2hlZCBSRkM5NTYyLCBpbnRyb2R1Y2luZyAzIG5ldyBVVUlEIHZlcnNpb25zICg2LDcsOCkuIFRoaXNcbiAqIGltcGxlbWVudGF0aW9uIG9mIFY3IGlzIGJhc2VkIG9uIHRoZSBhY2NlcHRlZCwgdGhvdWdoIG5vdCB5ZXQgYXBwcm92ZWQsXG4gKiByZXZpc2lvbnMuXG4gKlxuICogUkZDIDk1NjI6aHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzk1NjIuaHRtbCBVbml2ZXJzYWxseSBVbmlxdWVcbiAqIElEZW50aWZpZXJzIChVVUlEcylcblxuICpcbiAqIFNhbXBsZSBWNyB2YWx1ZTpcbiAqIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5NTYyLmh0bWwjbmFtZS1leGFtcGxlLW9mLWEtdXVpZHY3LXZhbHVlXG4gKlxuICogTW9ub3RvbmljIEJpdCBMYXlvdXQ6IFJGQyByZmM5NTYyLjYuMiBNZXRob2QgMSwgRGVkaWNhdGVkIENvdW50ZXIgQml0cyByZWY6XG4gKiAgICAgaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzk1NjIuaHRtbCNzZWN0aW9uLTYuMi01LjFcbiAqXG4gKiAgIDAgICAgICAgICAgICAgICAgICAgMSAgICAgICAgICAgICAgICAgICAyICAgICAgICAgICAgICAgICAgIDMgMCAxIDIgMyA0IDUgNlxuICogICA3IDggOSAwIDEgMiAzIDQgNSA2IDcgOCA5IDAgMSAyIDMgNCA1IDYgNyA4IDkgMCAxXG4gKiAgKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLStcbiAqICB8ICAgICAgICAgICAgICAgICAgICAgICAgICB1bml4X3RzX21zICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rXG4gKiAgfCAgICAgICAgICB1bml4X3RzX21zICAgICAgICAgICB8ICB2ZXIgIHwgICAgICAgIHNlcV9oaSAgICAgICAgIHxcbiAqICArLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstK1xuICogIHx2YXJ8ICAgICAgICAgICAgICAgc2VxX2xvdyAgICAgICAgICAgICAgIHwgICAgICAgIHJhbmQgICAgICAgICB8XG4gKiAgKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLStcbiAqICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5kICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rXG4gKlxuICogc2VxIGlzIGEgMzEgYml0IHNlcmlhbGl6ZWQgY291bnRlcjsgY29tcHJpc2VkIG9mIDEyIGJpdCBzZXFfaGkgYW5kIDE5IGJpdFxuICogc2VxX2xvdywgYW5kIHJhbmRvbWx5IGluaXRpYWxpemVkIHVwb24gdGltZXN0YW1wIGNoYW5nZS4gMzEgYml0IGNvdW50ZXIgc2l6ZVxuICogd2FzIHNlbGVjdGVkIGFzIGFueSBiaXR3aXNlIG9wZXJhdGlvbnMgaW4gbm9kZSBhcmUgZG9uZSBhcyBfc2lnbmVkXyAzMiBiaXRcbiAqIGludHMuIHdlIGV4Y2x1ZGUgdGhlIHNpZ24gYml0LlxuICovXG5cbmxldCBfc2VxTG93ID0gbnVsbDtcbmxldCBfc2VxSGlnaCA9IG51bGw7XG5sZXQgX21zZWNzID0gMDtcbmZ1bmN0aW9uIHY3KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIGluaXRpYWxpemUgYnVmZmVyIGFuZCBwb2ludGVyXG4gIGxldCBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICBjb25zdCBiID0gYnVmIHx8IG5ldyBVaW50OEFycmF5KDE2KTtcblxuICAvLyBybmRzIGlzIFVpbnQ4QXJyYXkoMTYpIGZpbGxlZCB3aXRoIHJhbmRvbSBieXRlc1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBtaWxsaXNlY29uZHMgc2luY2UgdW5peCBlcG9jaCwgMTk3MC0wMS0wMSAwMDowMFxuICBjb25zdCBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBEYXRlLm5vdygpO1xuXG4gIC8vIHNlcSBpcyB1c2VyIHByb3ZpZGVkIDMxIGJpdCBjb3VudGVyXG4gIGxldCBzZXEgPSBvcHRpb25zLnNlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5zZXEgOiBudWxsO1xuXG4gIC8vIGluaXRpYWxpemUgbG9jYWwgc2VxIGhpZ2gvbG93IHBhcnRzXG4gIGxldCBzZXFIaWdoID0gX3NlcUhpZ2g7XG4gIGxldCBzZXFMb3cgPSBfc2VxTG93O1xuXG4gIC8vIGNoZWNrIGlmIGNsb2NrIGhhcyBhZHZhbmNlZCBhbmQgdXNlciBoYXMgbm90IHByb3ZpZGVkIG1zZWNzXG4gIGlmIChtc2VjcyA+IF9tc2VjcyAmJiBvcHRpb25zLm1zZWNzID09PSB1bmRlZmluZWQpIHtcbiAgICBfbXNlY3MgPSBtc2VjcztcblxuICAgIC8vIHVubGVzcyB1c2VyIHByb3ZpZGVkIHNlcSwgcmVzZXQgc2VxIHBhcnRzXG4gICAgaWYgKHNlcSAhPT0gbnVsbCkge1xuICAgICAgc2VxSGlnaCA9IG51bGw7XG4gICAgICBzZXFMb3cgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHdlIGhhdmUgYSB1c2VyIHByb3ZpZGVkIHNlcVxuICBpZiAoc2VxICE9PSBudWxsKSB7XG4gICAgLy8gdHJpbSBwcm92aWRlZCBzZXEgdG8gMzEgYml0cyBvZiB2YWx1ZSwgYXZvaWRpbmcgb3ZlcmZsb3dcbiAgICBpZiAoc2VxID4gMHg3ZmZmZmZmZikge1xuICAgICAgc2VxID0gMHg3ZmZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBzcGxpdCBwcm92aWRlZCBzZXEgaW50byBoaWdoL2xvdyBwYXJ0c1xuICAgIHNlcUhpZ2ggPSBzZXEgPj4+IDE5ICYgMHhmZmY7XG4gICAgc2VxTG93ID0gc2VxICYgMHg3ZmZmZjtcbiAgfVxuXG4gIC8vIHJhbmRvbWx5IGluaXRpYWxpemUgc2VxXG4gIGlmIChzZXFIaWdoID09PSBudWxsIHx8IHNlcUxvdyA9PT0gbnVsbCkge1xuICAgIHNlcUhpZ2ggPSBybmRzWzZdICYgMHg3ZjtcbiAgICBzZXFIaWdoID0gc2VxSGlnaCA8PCA4IHwgcm5kc1s3XTtcbiAgICBzZXFMb3cgPSBybmRzWzhdICYgMHgzZjsgLy8gcGFkIGZvciB2YXJcbiAgICBzZXFMb3cgPSBzZXFMb3cgPDwgOCB8IHJuZHNbOV07XG4gICAgc2VxTG93ID0gc2VxTG93IDw8IDUgfCBybmRzWzEwXSA+Pj4gMztcbiAgfVxuXG4gIC8vIGluY3JlbWVudCBzZXEgaWYgd2l0aGluIG1zZWNzIHdpbmRvd1xuICBpZiAobXNlY3MgKyAxMDAwMCA+IF9tc2VjcyAmJiBzZXEgPT09IG51bGwpIHtcbiAgICBpZiAoKytzZXFMb3cgPiAweDdmZmZmKSB7XG4gICAgICBzZXFMb3cgPSAwO1xuICAgICAgaWYgKCsrc2VxSGlnaCA+IDB4ZmZmKSB7XG4gICAgICAgIHNlcUhpZ2ggPSAwO1xuXG4gICAgICAgIC8vIGluY3JlbWVudCBpbnRlcm5hbCBfbXNlY3MuIHRoaXMgYWxsb3dzIHVzIHRvIGNvbnRpbnVlIGluY3JlbWVudGluZ1xuICAgICAgICAvLyB3aGlsZSBzdGF5aW5nIG1vbm90b25pYy4gTm90ZSwgb25jZSB3ZSBoaXQgMTBrIG1pbGxpc2Vjb25kcyBiZXlvbmQgc3lzdGVtXG4gICAgICAgIC8vIGNsb2NrLCB3ZSB3aWxsIHJlc2V0IGJyZWFraW5nIG1vbm90b25pY2l0eSAoYWZ0ZXIgKDJeMzEpKjEwMDAwIGdlbmVyYXRpb25zKVxuICAgICAgICBfbXNlY3MrKztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzZXR0aW5nOyB3ZSBoYXZlIGFkdmFuY2VkIG1vcmUgdGhhblxuICAgIC8vIDEwayBtaWxsaXNlY29uZHMgYmV5b25kIHN5c3RlbSBjbG9ja1xuICAgIF9tc2VjcyA9IG1zZWNzO1xuICB9XG4gIF9zZXFIaWdoID0gc2VxSGlnaDtcbiAgX3NlcUxvdyA9IHNlcUxvdztcblxuICAvLyBbYnl0ZXMgMC01XSA0OCBiaXRzIG9mIGxvY2FsIHRpbWVzdGFtcFxuICBiW2krK10gPSBfbXNlY3MgLyAweDEwMDAwMDAwMDAwICYgMHhmZjtcbiAgYltpKytdID0gX21zZWNzIC8gMHgxMDAwMDAwMDAgJiAweGZmO1xuICBiW2krK10gPSBfbXNlY3MgLyAweDEwMDAwMDAgJiAweGZmO1xuICBiW2krK10gPSBfbXNlY3MgLyAweDEwMDAwICYgMHhmZjtcbiAgYltpKytdID0gX21zZWNzIC8gMHgxMDAgJiAweGZmO1xuICBiW2krK10gPSBfbXNlY3MgJiAweGZmO1xuXG4gIC8vIFtieXRlIDZdIC0gc2V0IDQgYml0cyBvZiB2ZXJzaW9uICg3KSB3aXRoIGZpcnN0IDQgYml0cyBzZXFfaGlcbiAgYltpKytdID0gc2VxSGlnaCA+Pj4gNCAmIDB4MGYgfCAweDcwO1xuXG4gIC8vIFtieXRlIDddIHJlbWFpbmluZyA4IGJpdHMgb2Ygc2VxX2hpXG4gIGJbaSsrXSA9IHNlcUhpZ2ggJiAweGZmO1xuXG4gIC8vIFtieXRlIDhdIC0gdmFyaWFudCAoMiBiaXRzKSwgZmlyc3QgNiBiaXRzIHNlcV9sb3dcbiAgYltpKytdID0gc2VxTG93ID4+PiAxMyAmIDB4M2YgfCAweDgwO1xuXG4gIC8vIFtieXRlIDldIDggYml0cyBzZXFfbG93XG4gIGJbaSsrXSA9IHNlcUxvdyA+Pj4gNSAmIDB4ZmY7XG5cbiAgLy8gW2J5dGUgMTBdIHJlbWFpbmluZyA1IGJpdHMgc2VxX2xvdywgMyBiaXRzIHJhbmRvbVxuICBiW2krK10gPSBzZXFMb3cgPDwgMyAmIDB4ZmYgfCBybmRzWzEwXSAmIDB4MDc7XG5cbiAgLy8gW2J5dGVzIDExLTE1XSBhbHdheXMgcmFuZG9tXG4gIGJbaSsrXSA9IHJuZHNbMTFdO1xuICBiW2krK10gPSBybmRzWzEyXTtcbiAgYltpKytdID0gcm5kc1sxM107XG4gIGJbaSsrXSA9IHJuZHNbMTRdO1xuICBiW2krK10gPSBybmRzWzE1XTtcbiAgcmV0dXJuIGJ1ZiB8fCB1bnNhZmVTdHJpbmdpZnkoYik7XG59XG5leHBvcnQgZGVmYXVsdCB2NzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/v7.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/validate.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/validate.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/regex.js\");\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7QUFDL0I7QUFDQSxxQ0FBcUMsaURBQUs7QUFDMUM7QUFDQSxpRUFBZSxRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92YWxpZGF0ZS5qcz8yNDJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/validate.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/version.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/version.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/validate.js\");\n\nfunction version(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n  return parseInt(uuid.slice(14, 15), 16);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxQztBQUNyQztBQUNBLE9BQU8sd0RBQVE7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZlcnNpb24uanM/MThiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5mdW5jdGlvbiB2ZXJzaW9uKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cbiAgcmV0dXJuIHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE1KSwgMTYpO1xufVxuZXhwb3J0IGRlZmF1bHQgdmVyc2lvbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/version.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/ajv.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/ajv.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = exports.Ajv = void 0;\nconst core_1 = __webpack_require__(/*! ./core */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/core.js\");\nconst draft7_1 = __webpack_require__(/*! ./vocabularies/draft7 */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/draft7.js\");\nconst discriminator_1 = __webpack_require__(/*! ./vocabularies/discriminator */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/discriminator/index.js\");\nconst draft7MetaSchema = __webpack_require__(/*! ./refs/json-schema-draft-07.json */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/refs/json-schema-draft-07.json\");\nconst META_SUPPORT_DATA = [\"/properties\"];\nconst META_SCHEMA_ID = \"http://json-schema.org/draft-07/schema\";\nclass Ajv extends core_1.default {\n    _addVocabularies() {\n        super._addVocabularies();\n        draft7_1.default.forEach((v) => this.addVocabulary(v));\n        if (this.opts.discriminator)\n            this.addKeyword(discriminator_1.default);\n    }\n    _addDefaultMetaSchema() {\n        super._addDefaultMetaSchema();\n        if (!this.opts.meta)\n            return;\n        const metaSchema = this.opts.$data\n            ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)\n            : draft7MetaSchema;\n        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);\n        this.refs[\"http://json-schema.org/schema\"] = META_SCHEMA_ID;\n    }\n    defaultMeta() {\n        return (this.opts.defaultMeta =\n            super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));\n    }\n}\nexports.Ajv = Ajv;\nmodule.exports = exports = Ajv;\nmodule.exports.Ajv = Ajv;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = Ajv;\nvar validate_1 = __webpack_require__(/*! ./compile/validate */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/index.js\");\nObject.defineProperty(exports, \"KeywordCxt\", ({ enumerable: true, get: function () { return validate_1.KeywordCxt; } }));\nvar codegen_1 = __webpack_require__(/*! ./compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nObject.defineProperty(exports, \"_\", ({ enumerable: true, get: function () { return codegen_1._; } }));\nObject.defineProperty(exports, \"str\", ({ enumerable: true, get: function () { return codegen_1.str; } }));\nObject.defineProperty(exports, \"stringify\", ({ enumerable: true, get: function () { return codegen_1.stringify; } }));\nObject.defineProperty(exports, \"nil\", ({ enumerable: true, get: function () { return codegen_1.nil; } }));\nObject.defineProperty(exports, \"Name\", ({ enumerable: true, get: function () { return codegen_1.Name; } }));\nObject.defineProperty(exports, \"CodeGen\", ({ enumerable: true, get: function () { return codegen_1.CodeGen; } }));\nvar validation_error_1 = __webpack_require__(/*! ./runtime/validation_error */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/validation_error.js\");\nObject.defineProperty(exports, \"ValidationError\", ({ enumerable: true, get: function () { return validation_error_1.default; } }));\nvar ref_error_1 = __webpack_require__(/*! ./compile/ref_error */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/ref_error.js\");\nObject.defineProperty(exports, \"MissingRefError\", ({ enumerable: true, get: function () { return ref_error_1.default; } }));\n//# sourceMappingURL=ajv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2Fqdi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyx1QkFBdUIsR0FBRyxlQUFlLEdBQUcsWUFBWSxHQUFHLFdBQVcsR0FBRyxpQkFBaUIsR0FBRyxXQUFXLEdBQUcsU0FBUyxHQUFHLGtCQUFrQixHQUFHLFdBQVc7QUFDakwsZUFBZSxtQkFBTyxDQUFDLDZGQUFRO0FBQy9CLGlCQUFpQixtQkFBTyxDQUFDLDJIQUF1QjtBQUNoRCx3QkFBd0IsbUJBQU8sQ0FBQywrSUFBOEI7QUFDOUQseUJBQXlCLG1CQUFPLENBQUMsOElBQWtDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLGtCQUFrQjtBQUNsQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWU7QUFDZixpQkFBaUIsbUJBQU8sQ0FBQywySEFBb0I7QUFDN0MsOENBQTZDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ3RILGdCQUFnQixtQkFBTyxDQUFDLHlIQUFtQjtBQUMzQyxxQ0FBb0MsRUFBRSxxQ0FBcUMsdUJBQXVCLEVBQUM7QUFDbkcsdUNBQXNDLEVBQUUscUNBQXFDLHlCQUF5QixFQUFDO0FBQ3ZHLDZDQUE0QyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNuSCx1Q0FBc0MsRUFBRSxxQ0FBcUMseUJBQXlCLEVBQUM7QUFDdkcsd0NBQXVDLEVBQUUscUNBQXFDLDBCQUEwQixFQUFDO0FBQ3pHLDJDQUEwQyxFQUFFLHFDQUFxQyw2QkFBNkIsRUFBQztBQUMvRyx5QkFBeUIsbUJBQU8sQ0FBQyxxSUFBNEI7QUFDN0QsbURBQWtELEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQ2hJLGtCQUFrQixtQkFBTyxDQUFDLHVIQUFxQjtBQUMvQyxtREFBa0QsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDekgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC9hanYuanM/NDAxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWlzc2luZ1JlZkVycm9yID0gZXhwb3J0cy5WYWxpZGF0aW9uRXJyb3IgPSBleHBvcnRzLkNvZGVHZW4gPSBleHBvcnRzLk5hbWUgPSBleHBvcnRzLm5pbCA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gZXhwb3J0cy5zdHIgPSBleHBvcnRzLl8gPSBleHBvcnRzLktleXdvcmRDeHQgPSBleHBvcnRzLkFqdiA9IHZvaWQgMDtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCIuL2NvcmVcIik7XG5jb25zdCBkcmFmdDdfMSA9IHJlcXVpcmUoXCIuL3ZvY2FidWxhcmllcy9kcmFmdDdcIik7XG5jb25zdCBkaXNjcmltaW5hdG9yXzEgPSByZXF1aXJlKFwiLi92b2NhYnVsYXJpZXMvZGlzY3JpbWluYXRvclwiKTtcbmNvbnN0IGRyYWZ0N01ldGFTY2hlbWEgPSByZXF1aXJlKFwiLi9yZWZzL2pzb24tc2NoZW1hLWRyYWZ0LTA3Lmpzb25cIik7XG5jb25zdCBNRVRBX1NVUFBPUlRfREFUQSA9IFtcIi9wcm9wZXJ0aWVzXCJdO1xuY29uc3QgTUVUQV9TQ0hFTUFfSUQgPSBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hXCI7XG5jbGFzcyBBanYgZXh0ZW5kcyBjb3JlXzEuZGVmYXVsdCB7XG4gICAgX2FkZFZvY2FidWxhcmllcygpIHtcbiAgICAgICAgc3VwZXIuX2FkZFZvY2FidWxhcmllcygpO1xuICAgICAgICBkcmFmdDdfMS5kZWZhdWx0LmZvckVhY2goKHYpID0+IHRoaXMuYWRkVm9jYWJ1bGFyeSh2KSk7XG4gICAgICAgIGlmICh0aGlzLm9wdHMuZGlzY3JpbWluYXRvcilcbiAgICAgICAgICAgIHRoaXMuYWRkS2V5d29yZChkaXNjcmltaW5hdG9yXzEuZGVmYXVsdCk7XG4gICAgfVxuICAgIF9hZGREZWZhdWx0TWV0YVNjaGVtYSgpIHtcbiAgICAgICAgc3VwZXIuX2FkZERlZmF1bHRNZXRhU2NoZW1hKCk7XG4gICAgICAgIGlmICghdGhpcy5vcHRzLm1ldGEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IG1ldGFTY2hlbWEgPSB0aGlzLm9wdHMuJGRhdGFcbiAgICAgICAgICAgID8gdGhpcy4kZGF0YU1ldGFTY2hlbWEoZHJhZnQ3TWV0YVNjaGVtYSwgTUVUQV9TVVBQT1JUX0RBVEEpXG4gICAgICAgICAgICA6IGRyYWZ0N01ldGFTY2hlbWE7XG4gICAgICAgIHRoaXMuYWRkTWV0YVNjaGVtYShtZXRhU2NoZW1hLCBNRVRBX1NDSEVNQV9JRCwgZmFsc2UpO1xuICAgICAgICB0aGlzLnJlZnNbXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL3NjaGVtYVwiXSA9IE1FVEFfU0NIRU1BX0lEO1xuICAgIH1cbiAgICBkZWZhdWx0TWV0YSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm9wdHMuZGVmYXVsdE1ldGEgPVxuICAgICAgICAgICAgc3VwZXIuZGVmYXVsdE1ldGEoKSB8fCAodGhpcy5nZXRTY2hlbWEoTUVUQV9TQ0hFTUFfSUQpID8gTUVUQV9TQ0hFTUFfSUQgOiB1bmRlZmluZWQpKTtcbiAgICB9XG59XG5leHBvcnRzLkFqdiA9IEFqdjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IEFqdjtcbm1vZHVsZS5leHBvcnRzLkFqdiA9IEFqdjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEFqdjtcbnZhciB2YWxpZGF0ZV8xID0gcmVxdWlyZShcIi4vY29tcGlsZS92YWxpZGF0ZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIktleXdvcmRDeHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbGlkYXRlXzEuS2V5d29yZEN4dDsgfSB9KTtcbnZhciBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi9jb21waWxlL2NvZGVnZW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlZ2VuXzEuXzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0clwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLnN0cjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0cmluZ2lmeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLnN0cmluZ2lmeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5pbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLm5pbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5hbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5OYW1lOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29kZUdlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLkNvZGVHZW47IH0gfSk7XG52YXIgdmFsaWRhdGlvbl9lcnJvcl8xID0gcmVxdWlyZShcIi4vcnVudGltZS92YWxpZGF0aW9uX2Vycm9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmFsaWRhdGlvbkVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWxpZGF0aW9uX2Vycm9yXzEuZGVmYXVsdDsgfSB9KTtcbnZhciByZWZfZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUvcmVmX2Vycm9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWlzc2luZ1JlZkVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZWZfZXJyb3JfMS5kZWZhdWx0OyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWp2LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/ajv.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/code.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/code.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass _CodeOrName {\n}\nexports._CodeOrName = _CodeOrName;\nexports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\nclass Name extends _CodeOrName {\n    constructor(s) {\n        super();\n        if (!exports.IDENTIFIER.test(s))\n            throw new Error(\"CodeGen: name must be a valid identifier\");\n        this.str = s;\n    }\n    toString() {\n        return this.str;\n    }\n    emptyStr() {\n        return false;\n    }\n    get names() {\n        return { [this.str]: 1 };\n    }\n}\nexports.Name = Name;\nclass _Code extends _CodeOrName {\n    constructor(code) {\n        super();\n        this._items = typeof code === \"string\" ? [code] : code;\n    }\n    toString() {\n        return this.str;\n    }\n    emptyStr() {\n        if (this._items.length > 1)\n            return false;\n        const item = this._items[0];\n        return item === \"\" || item === '\"\"';\n    }\n    get str() {\n        var _a;\n        return ((_a = this._str) !== null && _a !== void 0 ? _a : (this._str = this._items.reduce((s, c) => `${s}${c}`, \"\")));\n    }\n    get names() {\n        var _a;\n        return ((_a = this._names) !== null && _a !== void 0 ? _a : (this._names = this._items.reduce((names, c) => {\n            if (c instanceof Name)\n                names[c.str] = (names[c.str] || 0) + 1;\n            return names;\n        }, {})));\n    }\n}\nexports._Code = _Code;\nexports.nil = new _Code(\"\");\nfunction _(strs, ...args) {\n    const code = [strs[0]];\n    let i = 0;\n    while (i < args.length) {\n        addCodeArg(code, args[i]);\n        code.push(strs[++i]);\n    }\n    return new _Code(code);\n}\nexports._ = _;\nconst plus = new _Code(\"+\");\nfunction str(strs, ...args) {\n    const expr = [safeStringify(strs[0])];\n    let i = 0;\n    while (i < args.length) {\n        expr.push(plus);\n        addCodeArg(expr, args[i]);\n        expr.push(plus, safeStringify(strs[++i]));\n    }\n    optimize(expr);\n    return new _Code(expr);\n}\nexports.str = str;\nfunction addCodeArg(code, arg) {\n    if (arg instanceof _Code)\n        code.push(...arg._items);\n    else if (arg instanceof Name)\n        code.push(arg);\n    else\n        code.push(interpolate(arg));\n}\nexports.addCodeArg = addCodeArg;\nfunction optimize(expr) {\n    let i = 1;\n    while (i < expr.length - 1) {\n        if (expr[i] === plus) {\n            const res = mergeExprItems(expr[i - 1], expr[i + 1]);\n            if (res !== undefined) {\n                expr.splice(i - 1, 3, res);\n                continue;\n            }\n            expr[i++] = \"+\";\n        }\n        i++;\n    }\n}\nfunction mergeExprItems(a, b) {\n    if (b === '\"\"')\n        return a;\n    if (a === '\"\"')\n        return b;\n    if (typeof a == \"string\") {\n        if (b instanceof Name || a[a.length - 1] !== '\"')\n            return;\n        if (typeof b != \"string\")\n            return `${a.slice(0, -1)}${b}\"`;\n        if (b[0] === '\"')\n            return a.slice(0, -1) + b.slice(1);\n        return;\n    }\n    if (typeof b == \"string\" && b[0] === '\"' && !(a instanceof Name))\n        return `\"${a}${b.slice(1)}`;\n    return;\n}\nfunction strConcat(c1, c2) {\n    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str `${c1}${c2}`;\n}\nexports.strConcat = strConcat;\n// TODO do not allow arrays here\nfunction interpolate(x) {\n    return typeof x == \"number\" || typeof x == \"boolean\" || x === null\n        ? x\n        : safeStringify(Array.isArray(x) ? x.join(\",\") : x);\n}\nfunction stringify(x) {\n    return new _Code(safeStringify(x));\n}\nexports.stringify = stringify;\nfunction safeStringify(x) {\n    return JSON.stringify(x)\n        .replace(/\\u2028/g, \"\\\\u2028\")\n        .replace(/\\u2029/g, \"\\\\u2029\");\n}\nexports.safeStringify = safeStringify;\nfunction getProperty(key) {\n    return typeof key == \"string\" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _ `[${key}]`;\n}\nexports.getProperty = getProperty;\n//Does best effort to format the name properly\nfunction getEsmExportName(key) {\n    if (typeof key == \"string\" && exports.IDENTIFIER.test(key)) {\n        return new _Code(`${key}`);\n    }\n    throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);\n}\nexports.getEsmExportName = getEsmExportName;\nfunction regexpCode(rx) {\n    return new _Code(rx.toString());\n}\nexports.regexpCode = regexpCode;\n//# sourceMappingURL=code.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvY29kZWdlbi9jb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLHdCQUF3QixHQUFHLG1CQUFtQixHQUFHLHFCQUFxQixHQUFHLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLGtCQUFrQixHQUFHLFdBQVcsR0FBRyxTQUFTLEdBQUcsV0FBVyxHQUFHLGFBQWEsR0FBRyxZQUFZLEdBQUcsa0JBQWtCLEdBQUcsbUJBQW1CO0FBQzFRO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0dBQStHLEVBQUUsRUFBRSxFQUFFO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZUFBZSxFQUFFLEVBQUU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixFQUFFLEVBQUUsV0FBVztBQUNsQztBQUNBO0FBQ0E7QUFDQSw0REFBNEQsR0FBRyxFQUFFLEdBQUc7QUFDcEU7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxrRkFBa0YsSUFBSSxXQUFXLElBQUk7QUFDckc7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLElBQUk7QUFDaEM7QUFDQSxxREFBcUQsSUFBSTtBQUN6RDtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL2NvZGVnZW4vY29kZS5qcz84NTZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWdleHBDb2RlID0gZXhwb3J0cy5nZXRFc21FeHBvcnROYW1lID0gZXhwb3J0cy5nZXRQcm9wZXJ0eSA9IGV4cG9ydHMuc2FmZVN0cmluZ2lmeSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gZXhwb3J0cy5zdHJDb25jYXQgPSBleHBvcnRzLmFkZENvZGVBcmcgPSBleHBvcnRzLnN0ciA9IGV4cG9ydHMuXyA9IGV4cG9ydHMubmlsID0gZXhwb3J0cy5fQ29kZSA9IGV4cG9ydHMuTmFtZSA9IGV4cG9ydHMuSURFTlRJRklFUiA9IGV4cG9ydHMuX0NvZGVPck5hbWUgPSB2b2lkIDA7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhbmVvdXMtY2xhc3NcbmNsYXNzIF9Db2RlT3JOYW1lIHtcbn1cbmV4cG9ydHMuX0NvZGVPck5hbWUgPSBfQ29kZU9yTmFtZTtcbmV4cG9ydHMuSURFTlRJRklFUiA9IC9eW2EteiRfXVthLXokXzAtOV0qJC9pO1xuY2xhc3MgTmFtZSBleHRlbmRzIF9Db2RlT3JOYW1lIHtcbiAgICBjb25zdHJ1Y3RvcihzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICghZXhwb3J0cy5JREVOVElGSUVSLnRlc3QocykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb2RlR2VuOiBuYW1lIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXCIpO1xuICAgICAgICB0aGlzLnN0ciA9IHM7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHI7XG4gICAgfVxuICAgIGVtcHR5U3RyKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGdldCBuYW1lcygpIHtcbiAgICAgICAgcmV0dXJuIHsgW3RoaXMuc3RyXTogMSB9O1xuICAgIH1cbn1cbmV4cG9ydHMuTmFtZSA9IE5hbWU7XG5jbGFzcyBfQ29kZSBleHRlbmRzIF9Db2RlT3JOYW1lIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2RlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gdHlwZW9mIGNvZGUgPT09IFwic3RyaW5nXCIgPyBbY29kZV0gOiBjb2RlO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyO1xuICAgIH1cbiAgICBlbXB0eVN0cigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2l0ZW1zLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9pdGVtc1swXTtcbiAgICAgICAgcmV0dXJuIGl0ZW0gPT09IFwiXCIgfHwgaXRlbSA9PT0gJ1wiXCInO1xuICAgIH1cbiAgICBnZXQgc3RyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5fc3RyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAodGhpcy5fc3RyID0gdGhpcy5faXRlbXMucmVkdWNlKChzLCBjKSA9PiBgJHtzfSR7Y31gLCBcIlwiKSkpO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLl9uYW1lcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKHRoaXMuX25hbWVzID0gdGhpcy5faXRlbXMucmVkdWNlKChuYW1lcywgYykgPT4ge1xuICAgICAgICAgICAgaWYgKGMgaW5zdGFuY2VvZiBOYW1lKVxuICAgICAgICAgICAgICAgIG5hbWVzW2Muc3RyXSA9IChuYW1lc1tjLnN0cl0gfHwgMCkgKyAxO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWVzO1xuICAgICAgICB9LCB7fSkpKTtcbiAgICB9XG59XG5leHBvcnRzLl9Db2RlID0gX0NvZGU7XG5leHBvcnRzLm5pbCA9IG5ldyBfQ29kZShcIlwiKTtcbmZ1bmN0aW9uIF8oc3RycywgLi4uYXJncykge1xuICAgIGNvbnN0IGNvZGUgPSBbc3Ryc1swXV07XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgICAgYWRkQ29kZUFyZyhjb2RlLCBhcmdzW2ldKTtcbiAgICAgICAgY29kZS5wdXNoKHN0cnNbKytpXSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX0NvZGUoY29kZSk7XG59XG5leHBvcnRzLl8gPSBfO1xuY29uc3QgcGx1cyA9IG5ldyBfQ29kZShcIitcIik7XG5mdW5jdGlvbiBzdHIoc3RycywgLi4uYXJncykge1xuICAgIGNvbnN0IGV4cHIgPSBbc2FmZVN0cmluZ2lmeShzdHJzWzBdKV07XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgICAgZXhwci5wdXNoKHBsdXMpO1xuICAgICAgICBhZGRDb2RlQXJnKGV4cHIsIGFyZ3NbaV0pO1xuICAgICAgICBleHByLnB1c2gocGx1cywgc2FmZVN0cmluZ2lmeShzdHJzWysraV0pKTtcbiAgICB9XG4gICAgb3B0aW1pemUoZXhwcik7XG4gICAgcmV0dXJuIG5ldyBfQ29kZShleHByKTtcbn1cbmV4cG9ydHMuc3RyID0gc3RyO1xuZnVuY3Rpb24gYWRkQ29kZUFyZyhjb2RlLCBhcmcpIHtcbiAgICBpZiAoYXJnIGluc3RhbmNlb2YgX0NvZGUpXG4gICAgICAgIGNvZGUucHVzaCguLi5hcmcuX2l0ZW1zKTtcbiAgICBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBOYW1lKVxuICAgICAgICBjb2RlLnB1c2goYXJnKTtcbiAgICBlbHNlXG4gICAgICAgIGNvZGUucHVzaChpbnRlcnBvbGF0ZShhcmcpKTtcbn1cbmV4cG9ydHMuYWRkQ29kZUFyZyA9IGFkZENvZGVBcmc7XG5mdW5jdGlvbiBvcHRpbWl6ZShleHByKSB7XG4gICAgbGV0IGkgPSAxO1xuICAgIHdoaWxlIChpIDwgZXhwci5sZW5ndGggLSAxKSB7XG4gICAgICAgIGlmIChleHByW2ldID09PSBwbHVzKSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBtZXJnZUV4cHJJdGVtcyhleHByW2kgLSAxXSwgZXhwcltpICsgMV0pO1xuICAgICAgICAgICAgaWYgKHJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZXhwci5zcGxpY2UoaSAtIDEsIDMsIHJlcyk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHByW2krK10gPSBcIitcIjtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxufVxuZnVuY3Rpb24gbWVyZ2VFeHBySXRlbXMoYSwgYikge1xuICAgIGlmIChiID09PSAnXCJcIicpXG4gICAgICAgIHJldHVybiBhO1xuICAgIGlmIChhID09PSAnXCJcIicpXG4gICAgICAgIHJldHVybiBiO1xuICAgIGlmICh0eXBlb2YgYSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChiIGluc3RhbmNlb2YgTmFtZSB8fCBhW2EubGVuZ3RoIC0gMV0gIT09ICdcIicpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgcmV0dXJuIGAke2Euc2xpY2UoMCwgLTEpfSR7Yn1cImA7XG4gICAgICAgIGlmIChiWzBdID09PSAnXCInKVxuICAgICAgICAgICAgcmV0dXJuIGEuc2xpY2UoMCwgLTEpICsgYi5zbGljZSgxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGIgPT0gXCJzdHJpbmdcIiAmJiBiWzBdID09PSAnXCInICYmICEoYSBpbnN0YW5jZW9mIE5hbWUpKVxuICAgICAgICByZXR1cm4gYFwiJHthfSR7Yi5zbGljZSgxKX1gO1xuICAgIHJldHVybjtcbn1cbmZ1bmN0aW9uIHN0ckNvbmNhdChjMSwgYzIpIHtcbiAgICByZXR1cm4gYzIuZW1wdHlTdHIoKSA/IGMxIDogYzEuZW1wdHlTdHIoKSA/IGMyIDogc3RyIGAke2MxfSR7YzJ9YDtcbn1cbmV4cG9ydHMuc3RyQ29uY2F0ID0gc3RyQ29uY2F0O1xuLy8gVE9ETyBkbyBub3QgYWxsb3cgYXJyYXlzIGhlcmVcbmZ1bmN0aW9uIGludGVycG9sYXRlKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgeCA9PSBcImJvb2xlYW5cIiB8fCB4ID09PSBudWxsXG4gICAgICAgID8geFxuICAgICAgICA6IHNhZmVTdHJpbmdpZnkoQXJyYXkuaXNBcnJheSh4KSA/IHguam9pbihcIixcIikgOiB4KTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeSh4KSB7XG4gICAgcmV0dXJuIG5ldyBfQ29kZShzYWZlU3RyaW5naWZ5KHgpKTtcbn1cbmV4cG9ydHMuc3RyaW5naWZ5ID0gc3RyaW5naWZ5O1xuZnVuY3Rpb24gc2FmZVN0cmluZ2lmeSh4KSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHgpXG4gICAgICAgIC5yZXBsYWNlKC9cXHUyMDI4L2csIFwiXFxcXHUyMDI4XCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXHUyMDI5L2csIFwiXFxcXHUyMDI5XCIpO1xufVxuZXhwb3J0cy5zYWZlU3RyaW5naWZ5ID0gc2FmZVN0cmluZ2lmeTtcbmZ1bmN0aW9uIGdldFByb3BlcnR5KGtleSkge1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09IFwic3RyaW5nXCIgJiYgZXhwb3J0cy5JREVOVElGSUVSLnRlc3Qoa2V5KSA/IG5ldyBfQ29kZShgLiR7a2V5fWApIDogXyBgWyR7a2V5fV1gO1xufVxuZXhwb3J0cy5nZXRQcm9wZXJ0eSA9IGdldFByb3BlcnR5O1xuLy9Eb2VzIGJlc3QgZWZmb3J0IHRvIGZvcm1hdCB0aGUgbmFtZSBwcm9wZXJseVxuZnVuY3Rpb24gZ2V0RXNtRXhwb3J0TmFtZShrZXkpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSBcInN0cmluZ1wiICYmIGV4cG9ydHMuSURFTlRJRklFUi50ZXN0KGtleSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfQ29kZShgJHtrZXl9YCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgQ29kZUdlbjogaW52YWxpZCBleHBvcnQgbmFtZTogJHtrZXl9LCB1c2UgZXhwbGljaXQgJGlkIG5hbWUgbWFwcGluZ2ApO1xufVxuZXhwb3J0cy5nZXRFc21FeHBvcnROYW1lID0gZ2V0RXNtRXhwb3J0TmFtZTtcbmZ1bmN0aW9uIHJlZ2V4cENvZGUocngpIHtcbiAgICByZXR1cm4gbmV3IF9Db2RlKHJ4LnRvU3RyaW5nKCkpO1xufVxuZXhwb3J0cy5yZWdleHBDb2RlID0gcmVnZXhwQ29kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/code.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\nconst code_1 = __webpack_require__(/*! ./code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/code.js\");\nconst scope_1 = __webpack_require__(/*! ./scope */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/scope.js\");\nvar code_2 = __webpack_require__(/*! ./code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/code.js\");\nObject.defineProperty(exports, \"_\", ({ enumerable: true, get: function () { return code_2._; } }));\nObject.defineProperty(exports, \"str\", ({ enumerable: true, get: function () { return code_2.str; } }));\nObject.defineProperty(exports, \"strConcat\", ({ enumerable: true, get: function () { return code_2.strConcat; } }));\nObject.defineProperty(exports, \"nil\", ({ enumerable: true, get: function () { return code_2.nil; } }));\nObject.defineProperty(exports, \"getProperty\", ({ enumerable: true, get: function () { return code_2.getProperty; } }));\nObject.defineProperty(exports, \"stringify\", ({ enumerable: true, get: function () { return code_2.stringify; } }));\nObject.defineProperty(exports, \"regexpCode\", ({ enumerable: true, get: function () { return code_2.regexpCode; } }));\nObject.defineProperty(exports, \"Name\", ({ enumerable: true, get: function () { return code_2.Name; } }));\nvar scope_2 = __webpack_require__(/*! ./scope */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/scope.js\");\nObject.defineProperty(exports, \"Scope\", ({ enumerable: true, get: function () { return scope_2.Scope; } }));\nObject.defineProperty(exports, \"ValueScope\", ({ enumerable: true, get: function () { return scope_2.ValueScope; } }));\nObject.defineProperty(exports, \"ValueScopeName\", ({ enumerable: true, get: function () { return scope_2.ValueScopeName; } }));\nObject.defineProperty(exports, \"varKinds\", ({ enumerable: true, get: function () { return scope_2.varKinds; } }));\nexports.operators = {\n    GT: new code_1._Code(\">\"),\n    GTE: new code_1._Code(\">=\"),\n    LT: new code_1._Code(\"<\"),\n    LTE: new code_1._Code(\"<=\"),\n    EQ: new code_1._Code(\"===\"),\n    NEQ: new code_1._Code(\"!==\"),\n    NOT: new code_1._Code(\"!\"),\n    OR: new code_1._Code(\"||\"),\n    AND: new code_1._Code(\"&&\"),\n    ADD: new code_1._Code(\"+\"),\n};\nclass Node {\n    optimizeNodes() {\n        return this;\n    }\n    optimizeNames(_names, _constants) {\n        return this;\n    }\n}\nclass Def extends Node {\n    constructor(varKind, name, rhs) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.rhs = rhs;\n    }\n    render({ es5, _n }) {\n        const varKind = es5 ? scope_1.varKinds.var : this.varKind;\n        const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`;\n        return `${varKind} ${this.name}${rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (!names[this.name.str])\n            return;\n        if (this.rhs)\n            this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n    }\n}\nclass Assign extends Node {\n    constructor(lhs, rhs, sideEffects) {\n        super();\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.sideEffects = sideEffects;\n    }\n    render({ _n }) {\n        return `${this.lhs} = ${this.rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)\n            return;\n        this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };\n        return addExprNames(names, this.rhs);\n    }\n}\nclass AssignOp extends Assign {\n    constructor(lhs, op, rhs, sideEffects) {\n        super(lhs, rhs, sideEffects);\n        this.op = op;\n    }\n    render({ _n }) {\n        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;\n    }\n}\nclass Label extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        return `${this.label}:` + _n;\n    }\n}\nclass Break extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        const label = this.label ? ` ${this.label}` : \"\";\n        return `break${label};` + _n;\n    }\n}\nclass Throw extends Node {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render({ _n }) {\n        return `throw ${this.error};` + _n;\n    }\n    get names() {\n        return this.error.names;\n    }\n}\nclass AnyCode extends Node {\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    render({ _n }) {\n        return `${this.code};` + _n;\n    }\n    optimizeNodes() {\n        return `${this.code}` ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        this.code = optimizeExpr(this.code, names, constants);\n        return this;\n    }\n    get names() {\n        return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n    }\n}\nclass ParentNode extends Node {\n    constructor(nodes = []) {\n        super();\n        this.nodes = nodes;\n    }\n    render(opts) {\n        return this.nodes.reduce((code, n) => code + n.render(opts), \"\");\n    }\n    optimizeNodes() {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            const n = nodes[i].optimizeNodes();\n            if (Array.isArray(n))\n                nodes.splice(i, 1, ...n);\n            else if (n)\n                nodes[i] = n;\n            else\n                nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            // iterating backwards improves 1-pass optimization\n            const n = nodes[i];\n            if (n.optimizeNames(names, constants))\n                continue;\n            subtractNames(names, n.names);\n            nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    get names() {\n        return this.nodes.reduce((names, n) => addNames(names, n.names), {});\n    }\n}\nclass BlockNode extends ParentNode {\n    render(opts) {\n        return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n;\n    }\n}\nclass Root extends ParentNode {\n}\nclass Else extends BlockNode {\n}\nElse.kind = \"else\";\nclass If extends BlockNode {\n    constructor(condition, nodes) {\n        super(nodes);\n        this.condition = condition;\n    }\n    render(opts) {\n        let code = `if(${this.condition})` + super.render(opts);\n        if (this.else)\n            code += \"else \" + this.else.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        super.optimizeNodes();\n        const cond = this.condition;\n        if (cond === true)\n            return this.nodes; // else is ignored here\n        let e = this.else;\n        if (e) {\n            const ns = e.optimizeNodes();\n            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n        }\n        if (e) {\n            if (cond === false)\n                return e instanceof If ? e : e.nodes;\n            if (this.nodes.length)\n                return this;\n            return new If(not(cond), e instanceof If ? [e] : e.nodes);\n        }\n        if (cond === false || !this.nodes.length)\n            return undefined;\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a;\n        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        if (!(super.optimizeNames(names, constants) || this.else))\n            return;\n        this.condition = optimizeExpr(this.condition, names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        addExprNames(names, this.condition);\n        if (this.else)\n            addNames(names, this.else.names);\n        return names;\n    }\n}\nIf.kind = \"if\";\nclass For extends BlockNode {\n}\nFor.kind = \"for\";\nclass ForLoop extends For {\n    constructor(iteration) {\n        super();\n        this.iteration = iteration;\n    }\n    render(opts) {\n        return `for(${this.iteration})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iteration = optimizeExpr(this.iteration, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iteration.names);\n    }\n}\nclass ForRange extends For {\n    constructor(varKind, name, from, to) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.from = from;\n        this.to = to;\n    }\n    render(opts) {\n        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n        const { name, from, to } = this;\n        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);\n    }\n    get names() {\n        const names = addExprNames(super.names, this.from);\n        return addExprNames(names, this.to);\n    }\n}\nclass ForIter extends For {\n    constructor(loop, varKind, name, iterable) {\n        super();\n        this.loop = loop;\n        this.varKind = varKind;\n        this.name = name;\n        this.iterable = iterable;\n    }\n    render(opts) {\n        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iterable = optimizeExpr(this.iterable, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iterable.names);\n    }\n}\nclass Func extends BlockNode {\n    constructor(name, args, async) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.async = async;\n    }\n    render(opts) {\n        const _async = this.async ? \"async \" : \"\";\n        return `${_async}function ${this.name}(${this.args})` + super.render(opts);\n    }\n}\nFunc.kind = \"func\";\nclass Return extends ParentNode {\n    render(opts) {\n        return \"return \" + super.render(opts);\n    }\n}\nReturn.kind = \"return\";\nclass Try extends BlockNode {\n    render(opts) {\n        let code = \"try\" + super.render(opts);\n        if (this.catch)\n            code += this.catch.render(opts);\n        if (this.finally)\n            code += this.finally.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        var _a, _b;\n        super.optimizeNodes();\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a, _b;\n        super.optimizeNames(names, constants);\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        if (this.catch)\n            addNames(names, this.catch.names);\n        if (this.finally)\n            addNames(names, this.finally.names);\n        return names;\n    }\n}\nclass Catch extends BlockNode {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render(opts) {\n        return `catch(${this.error})` + super.render(opts);\n    }\n}\nCatch.kind = \"catch\";\nclass Finally extends BlockNode {\n    render(opts) {\n        return \"finally\" + super.render(opts);\n    }\n}\nFinally.kind = \"finally\";\nclass CodeGen {\n    constructor(extScope, opts = {}) {\n        this._values = {};\n        this._blockStarts = [];\n        this._constants = {};\n        this.opts = { ...opts, _n: opts.lines ? \"\\n\" : \"\" };\n        this._extScope = extScope;\n        this._scope = new scope_1.Scope({ parent: extScope });\n        this._nodes = [new Root()];\n    }\n    toString() {\n        return this._root.render(this.opts);\n    }\n    // returns unique name in the internal scope\n    name(prefix) {\n        return this._scope.name(prefix);\n    }\n    // reserves unique name in the external scope\n    scopeName(prefix) {\n        return this._extScope.name(prefix);\n    }\n    // reserves unique name in the external scope and assigns value to it\n    scopeValue(prefixOrName, value) {\n        const name = this._extScope.value(prefixOrName, value);\n        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n        vs.add(name);\n        return name;\n    }\n    getScopeValue(prefix, keyOrRef) {\n        return this._extScope.getValue(prefix, keyOrRef);\n    }\n    // return code that assigns values in the external scope to the names that are used internally\n    // (same names that were returned by gen.scopeName or gen.scopeValue)\n    scopeRefs(scopeName) {\n        return this._extScope.scopeRefs(scopeName, this._values);\n    }\n    scopeCode() {\n        return this._extScope.scopeCode(this._values);\n    }\n    _def(varKind, nameOrPrefix, rhs, constant) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (rhs !== undefined && constant)\n            this._constants[name.str] = rhs;\n        this._leafNode(new Def(varKind, name, rhs));\n        return name;\n    }\n    // `const` declaration (`var` in es5 mode)\n    const(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n    }\n    // `let` declaration with optional assignment (`var` in es5 mode)\n    let(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n    }\n    // `var` declaration with optional assignment\n    var(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n    }\n    // assignment code\n    assign(lhs, rhs, sideEffects) {\n        return this._leafNode(new Assign(lhs, rhs, sideEffects));\n    }\n    // `+=` code\n    add(lhs, rhs) {\n        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n    }\n    // appends passed SafeExpr to code or executes Block\n    code(c) {\n        if (typeof c == \"function\")\n            c();\n        else if (c !== code_1.nil)\n            this._leafNode(new AnyCode(c));\n        return this;\n    }\n    // returns code for object literal for the passed argument list of key-value pairs\n    object(...keyValues) {\n        const code = [\"{\"];\n        for (const [key, value] of keyValues) {\n            if (code.length > 1)\n                code.push(\",\");\n            code.push(key);\n            if (key !== value || this.opts.es5) {\n                code.push(\":\");\n                (0, code_1.addCodeArg)(code, value);\n            }\n        }\n        code.push(\"}\");\n        return new code_1._Code(code);\n    }\n    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n    if(condition, thenBody, elseBody) {\n        this._blockNode(new If(condition));\n        if (thenBody && elseBody) {\n            this.code(thenBody).else().code(elseBody).endIf();\n        }\n        else if (thenBody) {\n            this.code(thenBody).endIf();\n        }\n        else if (elseBody) {\n            throw new Error('CodeGen: \"else\" body without \"then\" body');\n        }\n        return this;\n    }\n    // `else if` clause - invalid without `if` or after `else` clauses\n    elseIf(condition) {\n        return this._elseNode(new If(condition));\n    }\n    // `else` clause - only valid after `if` or `else if` clauses\n    else() {\n        return this._elseNode(new Else());\n    }\n    // end `if` statement (needed if gen.if was used only with condition)\n    endIf() {\n        return this._endBlockNode(If, Else);\n    }\n    _for(node, forBody) {\n        this._blockNode(node);\n        if (forBody)\n            this.code(forBody).endFor();\n        return this;\n    }\n    // a generic `for` clause (or statement if `forBody` is passed)\n    for(iteration, forBody) {\n        return this._for(new ForLoop(iteration), forBody);\n    }\n    // `for` statement for a range of values\n    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));\n    }\n    // `for-of` statement (in es5 mode replace with a normal for loop)\n    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (this.opts.es5) {\n            const arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n            return this.forRange(\"_i\", 0, (0, code_1._) `${arr}.length`, (i) => {\n                this.var(name, (0, code_1._) `${arr}[${i}]`);\n                forBody(name);\n            });\n        }\n        return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name));\n    }\n    // `for-in` statement.\n    // With option `ownProperties` replaced with a `for-of` loop for object keys\n    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {\n        if (this.opts.ownProperties) {\n            return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);\n        }\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name));\n    }\n    // end `for` loop\n    endFor() {\n        return this._endBlockNode(For);\n    }\n    // `label` statement\n    label(label) {\n        return this._leafNode(new Label(label));\n    }\n    // `break` statement\n    break(label) {\n        return this._leafNode(new Break(label));\n    }\n    // `return` statement\n    return(value) {\n        const node = new Return();\n        this._blockNode(node);\n        this.code(value);\n        if (node.nodes.length !== 1)\n            throw new Error('CodeGen: \"return\" should have one node');\n        return this._endBlockNode(Return);\n    }\n    // `try` statement\n    try(tryBody, catchCode, finallyCode) {\n        if (!catchCode && !finallyCode)\n            throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n        const node = new Try();\n        this._blockNode(node);\n        this.code(tryBody);\n        if (catchCode) {\n            const error = this.name(\"e\");\n            this._currNode = node.catch = new Catch(error);\n            catchCode(error);\n        }\n        if (finallyCode) {\n            this._currNode = node.finally = new Finally();\n            this.code(finallyCode);\n        }\n        return this._endBlockNode(Catch, Finally);\n    }\n    // `throw` statement\n    throw(error) {\n        return this._leafNode(new Throw(error));\n    }\n    // start self-balancing block\n    block(body, nodeCount) {\n        this._blockStarts.push(this._nodes.length);\n        if (body)\n            this.code(body).endBlock(nodeCount);\n        return this;\n    }\n    // end the current self-balancing block\n    endBlock(nodeCount) {\n        const len = this._blockStarts.pop();\n        if (len === undefined)\n            throw new Error(\"CodeGen: not in self-balancing block\");\n        const toClose = this._nodes.length - len;\n        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {\n            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);\n        }\n        this._nodes.length = len;\n        return this;\n    }\n    // `function` heading (or definition if funcBody is passed)\n    func(name, args = code_1.nil, async, funcBody) {\n        this._blockNode(new Func(name, args, async));\n        if (funcBody)\n            this.code(funcBody).endFunc();\n        return this;\n    }\n    // end function definition\n    endFunc() {\n        return this._endBlockNode(Func);\n    }\n    optimize(n = 1) {\n        while (n-- > 0) {\n            this._root.optimizeNodes();\n            this._root.optimizeNames(this._root.names, this._constants);\n        }\n    }\n    _leafNode(node) {\n        this._currNode.nodes.push(node);\n        return this;\n    }\n    _blockNode(node) {\n        this._currNode.nodes.push(node);\n        this._nodes.push(node);\n    }\n    _endBlockNode(N1, N2) {\n        const n = this._currNode;\n        if (n instanceof N1 || (N2 && n instanceof N2)) {\n            this._nodes.pop();\n            return this;\n        }\n        throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`);\n    }\n    _elseNode(node) {\n        const n = this._currNode;\n        if (!(n instanceof If)) {\n            throw new Error('CodeGen: \"else\" without \"if\"');\n        }\n        this._currNode = n.else = node;\n        return this;\n    }\n    get _root() {\n        return this._nodes[0];\n    }\n    get _currNode() {\n        const ns = this._nodes;\n        return ns[ns.length - 1];\n    }\n    set _currNode(node) {\n        const ns = this._nodes;\n        ns[ns.length - 1] = node;\n    }\n}\nexports.CodeGen = CodeGen;\nfunction addNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) + (from[n] || 0);\n    return names;\n}\nfunction addExprNames(names, from) {\n    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\nfunction optimizeExpr(expr, names, constants) {\n    if (expr instanceof code_1.Name)\n        return replaceName(expr);\n    if (!canOptimize(expr))\n        return expr;\n    return new code_1._Code(expr._items.reduce((items, c) => {\n        if (c instanceof code_1.Name)\n            c = replaceName(c);\n        if (c instanceof code_1._Code)\n            items.push(...c._items);\n        else\n            items.push(c);\n        return items;\n    }, []));\n    function replaceName(n) {\n        const c = constants[n.str];\n        if (c === undefined || names[n.str] !== 1)\n            return n;\n        delete names[n.str];\n        return c;\n    }\n    function canOptimize(e) {\n        return (e instanceof code_1._Code &&\n            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));\n    }\n}\nfunction subtractNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) - (from[n] || 0);\n}\nfunction not(x) {\n    return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : (0, code_1._) `!${par(x)}`;\n}\nexports.not = not;\nconst andCode = mappend(exports.operators.AND);\n// boolean AND (&&) expression with the passed arguments\nfunction and(...args) {\n    return args.reduce(andCode);\n}\nexports.and = and;\nconst orCode = mappend(exports.operators.OR);\n// boolean OR (||) expression with the passed arguments\nfunction or(...args) {\n    return args.reduce(orCode);\n}\nexports.or = or;\nfunction mappend(op) {\n    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);\n}\nfunction par(x) {\n    return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/scope.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/scope.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;\nconst code_1 = __webpack_require__(/*! ./code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/code.js\");\nclass ValueError extends Error {\n    constructor(name) {\n        super(`CodeGen: \"code\" for ${name} not defined`);\n        this.value = name.value;\n    }\n}\nvar UsedValueState;\n(function (UsedValueState) {\n    UsedValueState[UsedValueState[\"Started\"] = 0] = \"Started\";\n    UsedValueState[UsedValueState[\"Completed\"] = 1] = \"Completed\";\n})(UsedValueState || (exports.UsedValueState = UsedValueState = {}));\nexports.varKinds = {\n    const: new code_1.Name(\"const\"),\n    let: new code_1.Name(\"let\"),\n    var: new code_1.Name(\"var\"),\n};\nclass Scope {\n    constructor({ prefixes, parent } = {}) {\n        this._names = {};\n        this._prefixes = prefixes;\n        this._parent = parent;\n    }\n    toName(nameOrPrefix) {\n        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);\n    }\n    name(prefix) {\n        return new code_1.Name(this._newName(prefix));\n    }\n    _newName(prefix) {\n        const ng = this._names[prefix] || this._nameGroup(prefix);\n        return `${prefix}${ng.index++}`;\n    }\n    _nameGroup(prefix) {\n        var _a, _b;\n        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || (this._prefixes && !this._prefixes.has(prefix))) {\n            throw new Error(`CodeGen: prefix \"${prefix}\" is not allowed in this scope`);\n        }\n        return (this._names[prefix] = { prefix, index: 0 });\n    }\n}\nexports.Scope = Scope;\nclass ValueScopeName extends code_1.Name {\n    constructor(prefix, nameStr) {\n        super(nameStr);\n        this.prefix = prefix;\n    }\n    setValue(value, { property, itemIndex }) {\n        this.value = value;\n        this.scopePath = (0, code_1._) `.${new code_1.Name(property)}[${itemIndex}]`;\n    }\n}\nexports.ValueScopeName = ValueScopeName;\nconst line = (0, code_1._) `\\n`;\nclass ValueScope extends Scope {\n    constructor(opts) {\n        super(opts);\n        this._values = {};\n        this._scope = opts.scope;\n        this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };\n    }\n    get() {\n        return this._scope;\n    }\n    name(prefix) {\n        return new ValueScopeName(prefix, this._newName(prefix));\n    }\n    value(nameOrPrefix, value) {\n        var _a;\n        if (value.ref === undefined)\n            throw new Error(\"CodeGen: ref must be passed in value\");\n        const name = this.toName(nameOrPrefix);\n        const { prefix } = name;\n        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;\n        let vs = this._values[prefix];\n        if (vs) {\n            const _name = vs.get(valueKey);\n            if (_name)\n                return _name;\n        }\n        else {\n            vs = this._values[prefix] = new Map();\n        }\n        vs.set(valueKey, name);\n        const s = this._scope[prefix] || (this._scope[prefix] = []);\n        const itemIndex = s.length;\n        s[itemIndex] = value.ref;\n        name.setValue(value, { property: prefix, itemIndex });\n        return name;\n    }\n    getValue(prefix, keyOrRef) {\n        const vs = this._values[prefix];\n        if (!vs)\n            return;\n        return vs.get(keyOrRef);\n    }\n    scopeRefs(scopeName, values = this._values) {\n        return this._reduceValues(values, (name) => {\n            if (name.scopePath === undefined)\n                throw new Error(`CodeGen: name \"${name}\" has no value`);\n            return (0, code_1._) `${scopeName}${name.scopePath}`;\n        });\n    }\n    scopeCode(values = this._values, usedValues, getCode) {\n        return this._reduceValues(values, (name) => {\n            if (name.value === undefined)\n                throw new Error(`CodeGen: name \"${name}\" has no value`);\n            return name.value.code;\n        }, usedValues, getCode);\n    }\n    _reduceValues(values, valueCode, usedValues = {}, getCode) {\n        let code = code_1.nil;\n        for (const prefix in values) {\n            const vs = values[prefix];\n            if (!vs)\n                continue;\n            const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map());\n            vs.forEach((name) => {\n                if (nameSet.has(name))\n                    return;\n                nameSet.set(name, UsedValueState.Started);\n                let c = valueCode(name);\n                if (c) {\n                    const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;\n                    code = (0, code_1._) `${code}${def} ${name} = ${c};${this.opts._n}`;\n                }\n                else if ((c = getCode === null || getCode === void 0 ? void 0 : getCode(name))) {\n                    code = (0, code_1._) `${code}${c}${this.opts._n}`;\n                }\n                else {\n                    throw new ValueError(name);\n                }\n                nameSet.set(name, UsedValueState.Completed);\n            });\n        }\n        return code;\n    }\n}\nexports.ValueScope = ValueScope;\n//# sourceMappingURL=scope.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/scope.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/errors.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/errors.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;\nconst codegen_1 = __webpack_require__(/*! ./codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst names_1 = __webpack_require__(/*! ./names */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/names.js\");\nexports.keywordError = {\n    message: ({ keyword }) => (0, codegen_1.str) `must pass \"${keyword}\" keyword validation`,\n};\nexports.keyword$DataError = {\n    message: ({ keyword, schemaType }) => schemaType\n        ? (0, codegen_1.str) `\"${keyword}\" keyword must be ${schemaType} ($data)`\n        : (0, codegen_1.str) `\"${keyword}\" keyword is invalid ($data)`,\n};\nfunction reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {\n    const { it } = cxt;\n    const { gen, compositeRule, allErrors } = it;\n    const errObj = errorObjectCode(cxt, error, errorPaths);\n    if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : (compositeRule || allErrors)) {\n        addError(gen, errObj);\n    }\n    else {\n        returnErrors(it, (0, codegen_1._) `[${errObj}]`);\n    }\n}\nexports.reportError = reportError;\nfunction reportExtraError(cxt, error = exports.keywordError, errorPaths) {\n    const { it } = cxt;\n    const { gen, compositeRule, allErrors } = it;\n    const errObj = errorObjectCode(cxt, error, errorPaths);\n    addError(gen, errObj);\n    if (!(compositeRule || allErrors)) {\n        returnErrors(it, names_1.default.vErrors);\n    }\n}\nexports.reportExtraError = reportExtraError;\nfunction resetErrorsCount(gen, errsCount) {\n    gen.assign(names_1.default.errors, errsCount);\n    gen.if((0, codegen_1._) `${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._) `${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));\n}\nexports.resetErrorsCount = resetErrorsCount;\nfunction extendErrors({ gen, keyword, schemaValue, data, errsCount, it, }) {\n    /* istanbul ignore if */\n    if (errsCount === undefined)\n        throw new Error(\"ajv implementation error\");\n    const err = gen.name(\"err\");\n    gen.forRange(\"i\", errsCount, names_1.default.errors, (i) => {\n        gen.const(err, (0, codegen_1._) `${names_1.default.vErrors}[${i}]`);\n        gen.if((0, codegen_1._) `${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._) `${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));\n        gen.assign((0, codegen_1._) `${err}.schemaPath`, (0, codegen_1.str) `${it.errSchemaPath}/${keyword}`);\n        if (it.opts.verbose) {\n            gen.assign((0, codegen_1._) `${err}.schema`, schemaValue);\n            gen.assign((0, codegen_1._) `${err}.data`, data);\n        }\n    });\n}\nexports.extendErrors = extendErrors;\nfunction addError(gen, errObj) {\n    const err = gen.const(\"err\", errObj);\n    gen.if((0, codegen_1._) `${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._) `[${err}]`), (0, codegen_1._) `${names_1.default.vErrors}.push(${err})`);\n    gen.code((0, codegen_1._) `${names_1.default.errors}++`);\n}\nfunction returnErrors(it, errs) {\n    const { gen, validateName, schemaEnv } = it;\n    if (schemaEnv.$async) {\n        gen.throw((0, codegen_1._) `new ${it.ValidationError}(${errs})`);\n    }\n    else {\n        gen.assign((0, codegen_1._) `${validateName}.errors`, errs);\n        gen.return(false);\n    }\n}\nconst E = {\n    keyword: new codegen_1.Name(\"keyword\"),\n    schemaPath: new codegen_1.Name(\"schemaPath\"), // also used in JTD errors\n    params: new codegen_1.Name(\"params\"),\n    propertyName: new codegen_1.Name(\"propertyName\"),\n    message: new codegen_1.Name(\"message\"),\n    schema: new codegen_1.Name(\"schema\"),\n    parentSchema: new codegen_1.Name(\"parentSchema\"),\n};\nfunction errorObjectCode(cxt, error, errorPaths) {\n    const { createErrors } = cxt.it;\n    if (createErrors === false)\n        return (0, codegen_1._) `{}`;\n    return errorObject(cxt, error, errorPaths);\n}\nfunction errorObject(cxt, error, errorPaths = {}) {\n    const { gen, it } = cxt;\n    const keyValues = [\n        errorInstancePath(it, errorPaths),\n        errorSchemaPath(cxt, errorPaths),\n    ];\n    extraErrorProps(cxt, error, keyValues);\n    return gen.object(...keyValues);\n}\nfunction errorInstancePath({ errorPath }, { instancePath }) {\n    const instPath = instancePath\n        ? (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}`\n        : errorPath;\n    return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];\n}\nfunction errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {\n    let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str) `${errSchemaPath}/${keyword}`;\n    if (schemaPath) {\n        schPath = (0, codegen_1.str) `${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;\n    }\n    return [E.schemaPath, schPath];\n}\nfunction extraErrorProps(cxt, { params, message }, keyValues) {\n    const { keyword, data, schemaValue, it } = cxt;\n    const { opts, propertyName, topSchemaRef, schemaPath } = it;\n    keyValues.push([E.keyword, keyword], [E.params, typeof params == \"function\" ? params(cxt) : params || (0, codegen_1._) `{}`]);\n    if (opts.messages) {\n        keyValues.push([E.message, typeof message == \"function\" ? message(cxt) : message]);\n    }\n    if (opts.verbose) {\n        keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._) `${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);\n    }\n    if (propertyName)\n        keyValues.push([E.propertyName, propertyName]);\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/errors.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;\nconst codegen_1 = __webpack_require__(/*! ./codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst validation_error_1 = __webpack_require__(/*! ../runtime/validation_error */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/validation_error.js\");\nconst names_1 = __webpack_require__(/*! ./names */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/names.js\");\nconst resolve_1 = __webpack_require__(/*! ./resolve */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/resolve.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/index.js\");\nclass SchemaEnv {\n    constructor(env) {\n        var _a;\n        this.refs = {};\n        this.dynamicAnchors = {};\n        let schema;\n        if (typeof env.schema == \"object\")\n            schema = env.schema;\n        this.schema = env.schema;\n        this.schemaId = env.schemaId;\n        this.root = env.root || this;\n        this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || \"$id\"]);\n        this.schemaPath = env.schemaPath;\n        this.localRefs = env.localRefs;\n        this.meta = env.meta;\n        this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;\n        this.refs = {};\n    }\n}\nexports.SchemaEnv = SchemaEnv;\n// let codeSize = 0\n// let nodeCount = 0\n// Compiles schema in SchemaEnv\nfunction compileSchema(sch) {\n    // TODO refactor - remove compilations\n    const _sch = getCompilingSchema.call(this, sch);\n    if (_sch)\n        return _sch;\n    const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails\n    const { es5, lines } = this.opts.code;\n    const { ownProperties } = this.opts;\n    const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });\n    let _ValidationError;\n    if (sch.$async) {\n        _ValidationError = gen.scopeValue(\"Error\", {\n            ref: validation_error_1.default,\n            code: (0, codegen_1._) `require(\"ajv/dist/runtime/validation_error\").default`,\n        });\n    }\n    const validateName = gen.scopeName(\"validate\");\n    sch.validateName = validateName;\n    const schemaCxt = {\n        gen,\n        allErrors: this.opts.allErrors,\n        data: names_1.default.data,\n        parentData: names_1.default.parentData,\n        parentDataProperty: names_1.default.parentDataProperty,\n        dataNames: [names_1.default.data],\n        dataPathArr: [codegen_1.nil], // TODO can its length be used as dataLevel if nil is removed?\n        dataLevel: 0,\n        dataTypes: [],\n        definedProperties: new Set(),\n        topSchemaRef: gen.scopeValue(\"schema\", this.opts.code.source === true\n            ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) }\n            : { ref: sch.schema }),\n        validateName,\n        ValidationError: _ValidationError,\n        schema: sch.schema,\n        schemaEnv: sch,\n        rootId,\n        baseId: sch.baseId || rootId,\n        schemaPath: codegen_1.nil,\n        errSchemaPath: sch.schemaPath || (this.opts.jtd ? \"\" : \"#\"),\n        errorPath: (0, codegen_1._) `\"\"`,\n        opts: this.opts,\n        self: this,\n    };\n    let sourceCode;\n    try {\n        this._compilations.add(sch);\n        (0, validate_1.validateFunctionCode)(schemaCxt);\n        gen.optimize(this.opts.code.optimize);\n        // gen.optimize(1)\n        const validateCode = gen.toString();\n        sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;\n        // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))\n        if (this.opts.code.process)\n            sourceCode = this.opts.code.process(sourceCode, sch);\n        // console.log(\"\\n\\n\\n *** \\n\", sourceCode)\n        const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);\n        const validate = makeValidate(this, this.scope.get());\n        this.scope.value(validateName, { ref: validate });\n        validate.errors = null;\n        validate.schema = sch.schema;\n        validate.schemaEnv = sch;\n        if (sch.$async)\n            validate.$async = true;\n        if (this.opts.code.source === true) {\n            validate.source = { validateName, validateCode, scopeValues: gen._values };\n        }\n        if (this.opts.unevaluated) {\n            const { props, items } = schemaCxt;\n            validate.evaluated = {\n                props: props instanceof codegen_1.Name ? undefined : props,\n                items: items instanceof codegen_1.Name ? undefined : items,\n                dynamicProps: props instanceof codegen_1.Name,\n                dynamicItems: items instanceof codegen_1.Name,\n            };\n            if (validate.source)\n                validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);\n        }\n        sch.validate = validate;\n        return sch;\n    }\n    catch (e) {\n        delete sch.validate;\n        delete sch.validateName;\n        if (sourceCode)\n            this.logger.error(\"Error compiling schema, function code:\", sourceCode);\n        // console.log(\"\\n\\n\\n *** \\n\", sourceCode, this.opts)\n        throw e;\n    }\n    finally {\n        this._compilations.delete(sch);\n    }\n}\nexports.compileSchema = compileSchema;\nfunction resolveRef(root, baseId, ref) {\n    var _a;\n    ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);\n    const schOrFunc = root.refs[ref];\n    if (schOrFunc)\n        return schOrFunc;\n    let _sch = resolve.call(this, root, ref);\n    if (_sch === undefined) {\n        const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv\n        const { schemaId } = this.opts;\n        if (schema)\n            _sch = new SchemaEnv({ schema, schemaId, root, baseId });\n    }\n    if (_sch === undefined)\n        return;\n    return (root.refs[ref] = inlineOrCompile.call(this, _sch));\n}\nexports.resolveRef = resolveRef;\nfunction inlineOrCompile(sch) {\n    if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))\n        return sch.schema;\n    return sch.validate ? sch : compileSchema.call(this, sch);\n}\n// Index of schema compilation in the currently compiled list\nfunction getCompilingSchema(schEnv) {\n    for (const sch of this._compilations) {\n        if (sameSchemaEnv(sch, schEnv))\n            return sch;\n    }\n}\nexports.getCompilingSchema = getCompilingSchema;\nfunction sameSchemaEnv(s1, s2) {\n    return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;\n}\n// resolve and compile the references ($ref)\n// TODO returns AnySchemaObject (if the schema can be inlined) or validation function\nfunction resolve(root, // information about the root schema for the current schema\nref // reference to resolve\n) {\n    let sch;\n    while (typeof (sch = this.refs[ref]) == \"string\")\n        ref = sch;\n    return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);\n}\n// Resolve schema, its root and baseId\nfunction resolveSchema(root, // root object with properties schema, refs TODO below SchemaEnv is assigned to it\nref // reference to resolve\n) {\n    const p = this.opts.uriResolver.parse(ref);\n    const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);\n    let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, undefined);\n    // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests\n    if (Object.keys(root.schema).length > 0 && refPath === baseId) {\n        return getJsonPointer.call(this, p, root);\n    }\n    const id = (0, resolve_1.normalizeId)(refPath);\n    const schOrRef = this.refs[id] || this.schemas[id];\n    if (typeof schOrRef == \"string\") {\n        const sch = resolveSchema.call(this, root, schOrRef);\n        if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== \"object\")\n            return;\n        return getJsonPointer.call(this, p, sch);\n    }\n    if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== \"object\")\n        return;\n    if (!schOrRef.validate)\n        compileSchema.call(this, schOrRef);\n    if (id === (0, resolve_1.normalizeId)(ref)) {\n        const { schema } = schOrRef;\n        const { schemaId } = this.opts;\n        const schId = schema[schemaId];\n        if (schId)\n            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);\n        return new SchemaEnv({ schema, schemaId, root, baseId });\n    }\n    return getJsonPointer.call(this, p, schOrRef);\n}\nexports.resolveSchema = resolveSchema;\nconst PREVENT_SCOPE_CHANGE = new Set([\n    \"properties\",\n    \"patternProperties\",\n    \"enum\",\n    \"dependencies\",\n    \"definitions\",\n]);\nfunction getJsonPointer(parsedRef, { baseId, schema, root }) {\n    var _a;\n    if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== \"/\")\n        return;\n    for (const part of parsedRef.fragment.slice(1).split(\"/\")) {\n        if (typeof schema === \"boolean\")\n            return;\n        const partSchema = schema[(0, util_1.unescapeFragment)(part)];\n        if (partSchema === undefined)\n            return;\n        schema = partSchema;\n        // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?\n        const schId = typeof schema === \"object\" && schema[this.opts.schemaId];\n        if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {\n            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);\n        }\n    }\n    let env;\n    if (typeof schema != \"boolean\" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {\n        const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);\n        env = resolveSchema.call(this, root, $ref);\n    }\n    // even though resolution failed we need to return SchemaEnv to throw exception\n    // so that compileAsync loads missing schema.\n    const { schemaId } = this.opts;\n    env = env || new SchemaEnv({ schema, schemaId, root, baseId });\n    if (env.schema !== env.root.schema)\n        return env;\n    return undefined;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/names.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/names.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ./codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names = {\n    // validation function arguments\n    data: new codegen_1.Name(\"data\"), // data passed to validation function\n    // args passed from referencing schema\n    valCxt: new codegen_1.Name(\"valCxt\"), // validation/data context - should not be used directly, it is destructured to the names below\n    instancePath: new codegen_1.Name(\"instancePath\"),\n    parentData: new codegen_1.Name(\"parentData\"),\n    parentDataProperty: new codegen_1.Name(\"parentDataProperty\"),\n    rootData: new codegen_1.Name(\"rootData\"), // root data - same as the data passed to the first/top validation function\n    dynamicAnchors: new codegen_1.Name(\"dynamicAnchors\"), // used to support recursiveRef and dynamicRef\n    // function scoped variables\n    vErrors: new codegen_1.Name(\"vErrors\"), // null or array of validation errors\n    errors: new codegen_1.Name(\"errors\"), // counter of validation errors\n    this: new codegen_1.Name(\"this\"),\n    // \"globals\"\n    self: new codegen_1.Name(\"self\"),\n    scope: new codegen_1.Name(\"scope\"),\n    // JTD serialize/parse name for JSON string and position\n    json: new codegen_1.Name(\"json\"),\n    jsonPos: new codegen_1.Name(\"jsonPos\"),\n    jsonLen: new codegen_1.Name(\"jsonLen\"),\n    jsonPart: new codegen_1.Name(\"jsonPart\"),\n};\nexports[\"default\"] = names;\n//# sourceMappingURL=names.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvbmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLG1CQUFPLENBQUMsaUhBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL25hbWVzLmpzPzMwYTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi9jb2RlZ2VuXCIpO1xuY29uc3QgbmFtZXMgPSB7XG4gICAgLy8gdmFsaWRhdGlvbiBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICBkYXRhOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJkYXRhXCIpLCAvLyBkYXRhIHBhc3NlZCB0byB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gICAgLy8gYXJncyBwYXNzZWQgZnJvbSByZWZlcmVuY2luZyBzY2hlbWFcbiAgICB2YWxDeHQ6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInZhbEN4dFwiKSwgLy8gdmFsaWRhdGlvbi9kYXRhIGNvbnRleHQgLSBzaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHksIGl0IGlzIGRlc3RydWN0dXJlZCB0byB0aGUgbmFtZXMgYmVsb3dcbiAgICBpbnN0YW5jZVBhdGg6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImluc3RhbmNlUGF0aFwiKSxcbiAgICBwYXJlbnREYXRhOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJwYXJlbnREYXRhXCIpLFxuICAgIHBhcmVudERhdGFQcm9wZXJ0eTogbmV3IGNvZGVnZW5fMS5OYW1lKFwicGFyZW50RGF0YVByb3BlcnR5XCIpLFxuICAgIHJvb3REYXRhOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJyb290RGF0YVwiKSwgLy8gcm9vdCBkYXRhIC0gc2FtZSBhcyB0aGUgZGF0YSBwYXNzZWQgdG8gdGhlIGZpcnN0L3RvcCB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gICAgZHluYW1pY0FuY2hvcnM6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImR5bmFtaWNBbmNob3JzXCIpLCAvLyB1c2VkIHRvIHN1cHBvcnQgcmVjdXJzaXZlUmVmIGFuZCBkeW5hbWljUmVmXG4gICAgLy8gZnVuY3Rpb24gc2NvcGVkIHZhcmlhYmxlc1xuICAgIHZFcnJvcnM6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInZFcnJvcnNcIiksIC8vIG51bGwgb3IgYXJyYXkgb2YgdmFsaWRhdGlvbiBlcnJvcnNcbiAgICBlcnJvcnM6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImVycm9yc1wiKSwgLy8gY291bnRlciBvZiB2YWxpZGF0aW9uIGVycm9yc1xuICAgIHRoaXM6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInRoaXNcIiksXG4gICAgLy8gXCJnbG9iYWxzXCJcbiAgICBzZWxmOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJzZWxmXCIpLFxuICAgIHNjb3BlOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJzY29wZVwiKSxcbiAgICAvLyBKVEQgc2VyaWFsaXplL3BhcnNlIG5hbWUgZm9yIEpTT04gc3RyaW5nIGFuZCBwb3NpdGlvblxuICAgIGpzb246IG5ldyBjb2RlZ2VuXzEuTmFtZShcImpzb25cIiksXG4gICAganNvblBvczogbmV3IGNvZGVnZW5fMS5OYW1lKFwianNvblBvc1wiKSxcbiAgICBqc29uTGVuOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJqc29uTGVuXCIpLFxuICAgIGpzb25QYXJ0OiBuZXcgY29kZWdlbl8xLk5hbWUoXCJqc29uUGFydFwiKSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBuYW1lcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5hbWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/names.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/ref_error.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/ref_error.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst resolve_1 = __webpack_require__(/*! ./resolve */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/resolve.js\");\nclass MissingRefError extends Error {\n    constructor(resolver, baseId, ref, msg) {\n        super(msg || `can't resolve reference ${ref} from id ${baseId}`);\n        this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);\n        this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));\n    }\n}\nexports[\"default\"] = MissingRefError;\n//# sourceMappingURL=ref_error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvcmVmX2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixtQkFBTyxDQUFDLDJHQUFXO0FBQ3JDO0FBQ0E7QUFDQSxnREFBZ0QsS0FBSyxVQUFVLE9BQU87QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS9yZWZfZXJyb3IuanM/MzhkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHJlc29sdmVfMSA9IHJlcXVpcmUoXCIuL3Jlc29sdmVcIik7XG5jbGFzcyBNaXNzaW5nUmVmRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVzb2x2ZXIsIGJhc2VJZCwgcmVmLCBtc2cpIHtcbiAgICAgICAgc3VwZXIobXNnIHx8IGBjYW4ndCByZXNvbHZlIHJlZmVyZW5jZSAke3JlZn0gZnJvbSBpZCAke2Jhc2VJZH1gKTtcbiAgICAgICAgdGhpcy5taXNzaW5nUmVmID0gKDAsIHJlc29sdmVfMS5yZXNvbHZlVXJsKShyZXNvbHZlciwgYmFzZUlkLCByZWYpO1xuICAgICAgICB0aGlzLm1pc3NpbmdTY2hlbWEgPSAoMCwgcmVzb2x2ZV8xLm5vcm1hbGl6ZUlkKSgoMCwgcmVzb2x2ZV8xLmdldEZ1bGxQYXRoKShyZXNvbHZlciwgdGhpcy5taXNzaW5nUmVmKSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTWlzc2luZ1JlZkVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVmX2Vycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/ref_error.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/resolve.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/resolve.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;\nconst util_1 = __webpack_require__(/*! ./util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst equal = __webpack_require__(/*! fast-deep-equal */ \"(action-browser)/./node_modules/fast-deep-equal/index.js\");\nconst traverse = __webpack_require__(/*! json-schema-traverse */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/json-schema-traverse/index.js\");\n// TODO refactor to use keyword definitions\nconst SIMPLE_INLINED = new Set([\n    \"type\",\n    \"format\",\n    \"pattern\",\n    \"maxLength\",\n    \"minLength\",\n    \"maxProperties\",\n    \"minProperties\",\n    \"maxItems\",\n    \"minItems\",\n    \"maximum\",\n    \"minimum\",\n    \"uniqueItems\",\n    \"multipleOf\",\n    \"required\",\n    \"enum\",\n    \"const\",\n]);\nfunction inlineRef(schema, limit = true) {\n    if (typeof schema == \"boolean\")\n        return true;\n    if (limit === true)\n        return !hasRef(schema);\n    if (!limit)\n        return false;\n    return countKeys(schema) <= limit;\n}\nexports.inlineRef = inlineRef;\nconst REF_KEYWORDS = new Set([\n    \"$ref\",\n    \"$recursiveRef\",\n    \"$recursiveAnchor\",\n    \"$dynamicRef\",\n    \"$dynamicAnchor\",\n]);\nfunction hasRef(schema) {\n    for (const key in schema) {\n        if (REF_KEYWORDS.has(key))\n            return true;\n        const sch = schema[key];\n        if (Array.isArray(sch) && sch.some(hasRef))\n            return true;\n        if (typeof sch == \"object\" && hasRef(sch))\n            return true;\n    }\n    return false;\n}\nfunction countKeys(schema) {\n    let count = 0;\n    for (const key in schema) {\n        if (key === \"$ref\")\n            return Infinity;\n        count++;\n        if (SIMPLE_INLINED.has(key))\n            continue;\n        if (typeof schema[key] == \"object\") {\n            (0, util_1.eachItem)(schema[key], (sch) => (count += countKeys(sch)));\n        }\n        if (count === Infinity)\n            return Infinity;\n    }\n    return count;\n}\nfunction getFullPath(resolver, id = \"\", normalize) {\n    if (normalize !== false)\n        id = normalizeId(id);\n    const p = resolver.parse(id);\n    return _getFullPath(resolver, p);\n}\nexports.getFullPath = getFullPath;\nfunction _getFullPath(resolver, p) {\n    const serialized = resolver.serialize(p);\n    return serialized.split(\"#\")[0] + \"#\";\n}\nexports._getFullPath = _getFullPath;\nconst TRAILING_SLASH_HASH = /#\\/?$/;\nfunction normalizeId(id) {\n    return id ? id.replace(TRAILING_SLASH_HASH, \"\") : \"\";\n}\nexports.normalizeId = normalizeId;\nfunction resolveUrl(resolver, baseId, id) {\n    id = normalizeId(id);\n    return resolver.resolve(baseId, id);\n}\nexports.resolveUrl = resolveUrl;\nconst ANCHOR = /^[a-z_][-a-z0-9._]*$/i;\nfunction getSchemaRefs(schema, baseId) {\n    if (typeof schema == \"boolean\")\n        return {};\n    const { schemaId, uriResolver } = this.opts;\n    const schId = normalizeId(schema[schemaId] || baseId);\n    const baseIds = { \"\": schId };\n    const pathPrefix = getFullPath(uriResolver, schId, false);\n    const localRefs = {};\n    const schemaRefs = new Set();\n    traverse(schema, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {\n        if (parentJsonPtr === undefined)\n            return;\n        const fullPath = pathPrefix + jsonPtr;\n        let innerBaseId = baseIds[parentJsonPtr];\n        if (typeof sch[schemaId] == \"string\")\n            innerBaseId = addRef.call(this, sch[schemaId]);\n        addAnchor.call(this, sch.$anchor);\n        addAnchor.call(this, sch.$dynamicAnchor);\n        baseIds[jsonPtr] = innerBaseId;\n        function addRef(ref) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            const _resolve = this.opts.uriResolver.resolve;\n            ref = normalizeId(innerBaseId ? _resolve(innerBaseId, ref) : ref);\n            if (schemaRefs.has(ref))\n                throw ambiguos(ref);\n            schemaRefs.add(ref);\n            let schOrRef = this.refs[ref];\n            if (typeof schOrRef == \"string\")\n                schOrRef = this.refs[schOrRef];\n            if (typeof schOrRef == \"object\") {\n                checkAmbiguosRef(sch, schOrRef.schema, ref);\n            }\n            else if (ref !== normalizeId(fullPath)) {\n                if (ref[0] === \"#\") {\n                    checkAmbiguosRef(sch, localRefs[ref], ref);\n                    localRefs[ref] = sch;\n                }\n                else {\n                    this.refs[ref] = fullPath;\n                }\n            }\n            return ref;\n        }\n        function addAnchor(anchor) {\n            if (typeof anchor == \"string\") {\n                if (!ANCHOR.test(anchor))\n                    throw new Error(`invalid anchor \"${anchor}\"`);\n                addRef.call(this, `#${anchor}`);\n            }\n        }\n    });\n    return localRefs;\n    function checkAmbiguosRef(sch1, sch2, ref) {\n        if (sch2 !== undefined && !equal(sch1, sch2))\n            throw ambiguos(ref);\n    }\n    function ambiguos(ref) {\n        return new Error(`reference \"${ref}\" resolves to more than one schema`);\n    }\n}\nexports.getSchemaRefs = getSchemaRefs;\n//# sourceMappingURL=resolve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/resolve.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/rules.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/rules.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getRules = exports.isJSONType = void 0;\nconst _jsonTypes = [\"string\", \"number\", \"integer\", \"boolean\", \"null\", \"object\", \"array\"];\nconst jsonTypes = new Set(_jsonTypes);\nfunction isJSONType(x) {\n    return typeof x == \"string\" && jsonTypes.has(x);\n}\nexports.isJSONType = isJSONType;\nfunction getRules() {\n    const groups = {\n        number: { type: \"number\", rules: [] },\n        string: { type: \"string\", rules: [] },\n        array: { type: \"array\", rules: [] },\n        object: { type: \"object\", rules: [] },\n    };\n    return {\n        types: { ...groups, integer: true, boolean: true, null: true },\n        rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],\n        post: { rules: [] },\n        all: {},\n        keywords: {},\n    };\n}\nexports.getRules = getRules;\n//# sourceMappingURL=rules.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvcnVsZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLEdBQUcsa0JBQWtCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGtCQUFrQiwyQkFBMkI7QUFDN0Msa0JBQWtCLDJCQUEyQjtBQUM3QyxpQkFBaUIsMEJBQTBCO0FBQzNDLGtCQUFrQiwyQkFBMkI7QUFDN0M7QUFDQTtBQUNBLGlCQUFpQixxREFBcUQ7QUFDdEUsa0JBQWtCLFdBQVc7QUFDN0IsZ0JBQWdCLFdBQVc7QUFDM0IsZUFBZTtBQUNmLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS9ydWxlcy5qcz9lNjViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRSdWxlcyA9IGV4cG9ydHMuaXNKU09OVHlwZSA9IHZvaWQgMDtcbmNvbnN0IF9qc29uVHlwZXMgPSBbXCJzdHJpbmdcIiwgXCJudW1iZXJcIiwgXCJpbnRlZ2VyXCIsIFwiYm9vbGVhblwiLCBcIm51bGxcIiwgXCJvYmplY3RcIiwgXCJhcnJheVwiXTtcbmNvbnN0IGpzb25UeXBlcyA9IG5ldyBTZXQoX2pzb25UeXBlcyk7XG5mdW5jdGlvbiBpc0pTT05UeXBlKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT0gXCJzdHJpbmdcIiAmJiBqc29uVHlwZXMuaGFzKHgpO1xufVxuZXhwb3J0cy5pc0pTT05UeXBlID0gaXNKU09OVHlwZTtcbmZ1bmN0aW9uIGdldFJ1bGVzKCkge1xuICAgIGNvbnN0IGdyb3VwcyA9IHtcbiAgICAgICAgbnVtYmVyOiB7IHR5cGU6IFwibnVtYmVyXCIsIHJ1bGVzOiBbXSB9LFxuICAgICAgICBzdHJpbmc6IHsgdHlwZTogXCJzdHJpbmdcIiwgcnVsZXM6IFtdIH0sXG4gICAgICAgIGFycmF5OiB7IHR5cGU6IFwiYXJyYXlcIiwgcnVsZXM6IFtdIH0sXG4gICAgICAgIG9iamVjdDogeyB0eXBlOiBcIm9iamVjdFwiLCBydWxlczogW10gfSxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGVzOiB7IC4uLmdyb3VwcywgaW50ZWdlcjogdHJ1ZSwgYm9vbGVhbjogdHJ1ZSwgbnVsbDogdHJ1ZSB9LFxuICAgICAgICBydWxlczogW3sgcnVsZXM6IFtdIH0sIGdyb3Vwcy5udW1iZXIsIGdyb3Vwcy5zdHJpbmcsIGdyb3Vwcy5hcnJheSwgZ3JvdXBzLm9iamVjdF0sXG4gICAgICAgIHBvc3Q6IHsgcnVsZXM6IFtdIH0sXG4gICAgICAgIGFsbDoge30sXG4gICAgICAgIGtleXdvcmRzOiB7fSxcbiAgICB9O1xufVxuZXhwb3J0cy5nZXRSdWxlcyA9IGdldFJ1bGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVsZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/rules.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;\nconst codegen_1 = __webpack_require__(/*! ./codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst code_1 = __webpack_require__(/*! ./codegen/code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/code.js\");\n// TODO refactor to use Set\nfunction toHash(arr) {\n    const hash = {};\n    for (const item of arr)\n        hash[item] = true;\n    return hash;\n}\nexports.toHash = toHash;\nfunction alwaysValidSchema(it, schema) {\n    if (typeof schema == \"boolean\")\n        return schema;\n    if (Object.keys(schema).length === 0)\n        return true;\n    checkUnknownRules(it, schema);\n    return !schemaHasRules(schema, it.self.RULES.all);\n}\nexports.alwaysValidSchema = alwaysValidSchema;\nfunction checkUnknownRules(it, schema = it.schema) {\n    const { opts, self } = it;\n    if (!opts.strictSchema)\n        return;\n    if (typeof schema === \"boolean\")\n        return;\n    const rules = self.RULES.keywords;\n    for (const key in schema) {\n        if (!rules[key])\n            checkStrictMode(it, `unknown keyword: \"${key}\"`);\n    }\n}\nexports.checkUnknownRules = checkUnknownRules;\nfunction schemaHasRules(schema, rules) {\n    if (typeof schema == \"boolean\")\n        return !schema;\n    for (const key in schema)\n        if (rules[key])\n            return true;\n    return false;\n}\nexports.schemaHasRules = schemaHasRules;\nfunction schemaHasRulesButRef(schema, RULES) {\n    if (typeof schema == \"boolean\")\n        return !schema;\n    for (const key in schema)\n        if (key !== \"$ref\" && RULES.all[key])\n            return true;\n    return false;\n}\nexports.schemaHasRulesButRef = schemaHasRulesButRef;\nfunction schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {\n    if (!$data) {\n        if (typeof schema == \"number\" || typeof schema == \"boolean\")\n            return schema;\n        if (typeof schema == \"string\")\n            return (0, codegen_1._) `${schema}`;\n    }\n    return (0, codegen_1._) `${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;\n}\nexports.schemaRefOrVal = schemaRefOrVal;\nfunction unescapeFragment(str) {\n    return unescapeJsonPointer(decodeURIComponent(str));\n}\nexports.unescapeFragment = unescapeFragment;\nfunction escapeFragment(str) {\n    return encodeURIComponent(escapeJsonPointer(str));\n}\nexports.escapeFragment = escapeFragment;\nfunction escapeJsonPointer(str) {\n    if (typeof str == \"number\")\n        return `${str}`;\n    return str.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\nexports.escapeJsonPointer = escapeJsonPointer;\nfunction unescapeJsonPointer(str) {\n    return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nexports.unescapeJsonPointer = unescapeJsonPointer;\nfunction eachItem(xs, f) {\n    if (Array.isArray(xs)) {\n        for (const x of xs)\n            f(x);\n    }\n    else {\n        f(xs);\n    }\n}\nexports.eachItem = eachItem;\nfunction makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName, }) {\n    return (gen, from, to, toName) => {\n        const res = to === undefined\n            ? from\n            : to instanceof codegen_1.Name\n                ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)\n                : from instanceof codegen_1.Name\n                    ? (mergeToName(gen, to, from), from)\n                    : mergeValues(from, to);\n        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;\n    };\n}\nexports.mergeEvaluated = {\n    props: makeMergeEvaluated({\n        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => {\n            gen.if((0, codegen_1._) `${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._) `${to} || {}`).code((0, codegen_1._) `Object.assign(${to}, ${from})`));\n        }),\n        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => {\n            if (from === true) {\n                gen.assign(to, true);\n            }\n            else {\n                gen.assign(to, (0, codegen_1._) `${to} || {}`);\n                setEvaluated(gen, to, from);\n            }\n        }),\n        mergeValues: (from, to) => (from === true ? true : { ...from, ...to }),\n        resultToName: evaluatedPropsToName,\n    }),\n    items: makeMergeEvaluated({\n        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._) `${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),\n        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._) `${to} > ${from} ? ${to} : ${from}`)),\n        mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),\n        resultToName: (gen, items) => gen.var(\"items\", items),\n    }),\n};\nfunction evaluatedPropsToName(gen, ps) {\n    if (ps === true)\n        return gen.var(\"props\", true);\n    const props = gen.var(\"props\", (0, codegen_1._) `{}`);\n    if (ps !== undefined)\n        setEvaluated(gen, props, ps);\n    return props;\n}\nexports.evaluatedPropsToName = evaluatedPropsToName;\nfunction setEvaluated(gen, props, ps) {\n    Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._) `${props}${(0, codegen_1.getProperty)(p)}`, true));\n}\nexports.setEvaluated = setEvaluated;\nconst snippets = {};\nfunction useFunc(gen, f) {\n    return gen.scopeValue(\"func\", {\n        ref: f,\n        code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code)),\n    });\n}\nexports.useFunc = useFunc;\nvar Type;\n(function (Type) {\n    Type[Type[\"Num\"] = 0] = \"Num\";\n    Type[Type[\"Str\"] = 1] = \"Str\";\n})(Type || (exports.Type = Type = {}));\nfunction getErrorPath(dataProp, dataPropType, jsPropertySyntax) {\n    // let path\n    if (dataProp instanceof codegen_1.Name) {\n        const isNumber = dataPropType === Type.Num;\n        return jsPropertySyntax\n            ? isNumber\n                ? (0, codegen_1._) `\"[\" + ${dataProp} + \"]\"`\n                : (0, codegen_1._) `\"['\" + ${dataProp} + \"']\"`\n            : isNumber\n                ? (0, codegen_1._) `\"/\" + ${dataProp}`\n                : (0, codegen_1._) `\"/\" + ${dataProp}.replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")`; // TODO maybe use global escapePointer\n    }\n    return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : \"/\" + escapeJsonPointer(dataProp);\n}\nexports.getErrorPath = getErrorPath;\nfunction checkStrictMode(it, msg, mode = it.opts.strictSchema) {\n    if (!mode)\n        return;\n    msg = `strict mode: ${msg}`;\n    if (mode === true)\n        throw new Error(msg);\n    it.self.logger.warn(msg);\n}\nexports.checkStrictMode = checkStrictMode;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/applicability.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/applicability.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;\nfunction schemaHasRulesForType({ schema, self }, type) {\n    const group = self.RULES.types[type];\n    return group && group !== true && shouldUseGroup(schema, group);\n}\nexports.schemaHasRulesForType = schemaHasRulesForType;\nfunction shouldUseGroup(schema, group) {\n    return group.rules.some((rule) => shouldUseRule(schema, rule));\n}\nexports.shouldUseGroup = shouldUseGroup;\nfunction shouldUseRule(schema, rule) {\n    var _a;\n    return (schema[rule.keyword] !== undefined ||\n        ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== undefined)));\n}\nexports.shouldUseRule = shouldUseRule;\n//# sourceMappingURL=applicability.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvYXBwbGljYWJpbGl0eS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxzQkFBc0IsR0FBRyw2QkFBNkI7QUFDOUUsaUNBQWlDLGNBQWM7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS92YWxpZGF0ZS9hcHBsaWNhYmlsaXR5LmpzP2Y3NTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNob3VsZFVzZVJ1bGUgPSBleHBvcnRzLnNob3VsZFVzZUdyb3VwID0gZXhwb3J0cy5zY2hlbWFIYXNSdWxlc0ZvclR5cGUgPSB2b2lkIDA7XG5mdW5jdGlvbiBzY2hlbWFIYXNSdWxlc0ZvclR5cGUoeyBzY2hlbWEsIHNlbGYgfSwgdHlwZSkge1xuICAgIGNvbnN0IGdyb3VwID0gc2VsZi5SVUxFUy50eXBlc1t0eXBlXTtcbiAgICByZXR1cm4gZ3JvdXAgJiYgZ3JvdXAgIT09IHRydWUgJiYgc2hvdWxkVXNlR3JvdXAoc2NoZW1hLCBncm91cCk7XG59XG5leHBvcnRzLnNjaGVtYUhhc1J1bGVzRm9yVHlwZSA9IHNjaGVtYUhhc1J1bGVzRm9yVHlwZTtcbmZ1bmN0aW9uIHNob3VsZFVzZUdyb3VwKHNjaGVtYSwgZ3JvdXApIHtcbiAgICByZXR1cm4gZ3JvdXAucnVsZXMuc29tZSgocnVsZSkgPT4gc2hvdWxkVXNlUnVsZShzY2hlbWEsIHJ1bGUpKTtcbn1cbmV4cG9ydHMuc2hvdWxkVXNlR3JvdXAgPSBzaG91bGRVc2VHcm91cDtcbmZ1bmN0aW9uIHNob3VsZFVzZVJ1bGUoc2NoZW1hLCBydWxlKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoc2NoZW1hW3J1bGUua2V5d29yZF0gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAoKF9hID0gcnVsZS5kZWZpbml0aW9uLmltcGxlbWVudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zb21lKChrd2QpID0+IHNjaGVtYVtrd2RdICE9PSB1bmRlZmluZWQpKSk7XG59XG5leHBvcnRzLnNob3VsZFVzZVJ1bGUgPSBzaG91bGRVc2VSdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbGljYWJpbGl0eS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/applicability.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/boolSchema.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/boolSchema.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/errors.js\");\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names_1 = __webpack_require__(/*! ../names */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/names.js\");\nconst boolError = {\n    message: \"boolean schema is false\",\n};\nfunction topBoolOrEmptySchema(it) {\n    const { gen, schema, validateName } = it;\n    if (schema === false) {\n        falseSchemaError(it, false);\n    }\n    else if (typeof schema == \"object\" && schema.$async === true) {\n        gen.return(names_1.default.data);\n    }\n    else {\n        gen.assign((0, codegen_1._) `${validateName}.errors`, null);\n        gen.return(true);\n    }\n}\nexports.topBoolOrEmptySchema = topBoolOrEmptySchema;\nfunction boolOrEmptySchema(it, valid) {\n    const { gen, schema } = it;\n    if (schema === false) {\n        gen.var(valid, false); // TODO var\n        falseSchemaError(it);\n    }\n    else {\n        gen.var(valid, true); // TODO var\n    }\n}\nexports.boolOrEmptySchema = boolOrEmptySchema;\nfunction falseSchemaError(it, overrideAllErrors) {\n    const { gen, data } = it;\n    // TODO maybe some other interface should be used for non-keyword validation errors...\n    const cxt = {\n        gen,\n        keyword: \"false schema\",\n        data,\n        schema: false,\n        schemaCode: false,\n        schemaValue: false,\n        params: {},\n        it,\n    };\n    (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);\n}\n//# sourceMappingURL=boolSchema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvYm9vbFNjaGVtYS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRyw0QkFBNEI7QUFDeEQsaUJBQWlCLG1CQUFPLENBQUMsMEdBQVc7QUFDcEMsa0JBQWtCLG1CQUFPLENBQUMsa0hBQVk7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsd0dBQVU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDRCQUE0QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxhQUFhO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLFlBQVksWUFBWTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3ZhbGlkYXRlL2Jvb2xTY2hlbWEuanM/ODU4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYm9vbE9yRW1wdHlTY2hlbWEgPSBleHBvcnRzLnRvcEJvb2xPckVtcHR5U2NoZW1hID0gdm9pZCAwO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzXCIpO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uL2NvZGVnZW5cIik7XG5jb25zdCBuYW1lc18xID0gcmVxdWlyZShcIi4uL25hbWVzXCIpO1xuY29uc3QgYm9vbEVycm9yID0ge1xuICAgIG1lc3NhZ2U6IFwiYm9vbGVhbiBzY2hlbWEgaXMgZmFsc2VcIixcbn07XG5mdW5jdGlvbiB0b3BCb29sT3JFbXB0eVNjaGVtYShpdCkge1xuICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIHZhbGlkYXRlTmFtZSB9ID0gaXQ7XG4gICAgaWYgKHNjaGVtYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZmFsc2VTY2hlbWFFcnJvcihpdCwgZmFsc2UpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygc2NoZW1hID09IFwib2JqZWN0XCIgJiYgc2NoZW1hLiRhc3luYyA9PT0gdHJ1ZSkge1xuICAgICAgICBnZW4ucmV0dXJuKG5hbWVzXzEuZGVmYXVsdC5kYXRhKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHt2YWxpZGF0ZU5hbWV9LmVycm9yc2AsIG51bGwpO1xuICAgICAgICBnZW4ucmV0dXJuKHRydWUpO1xuICAgIH1cbn1cbmV4cG9ydHMudG9wQm9vbE9yRW1wdHlTY2hlbWEgPSB0b3BCb29sT3JFbXB0eVNjaGVtYTtcbmZ1bmN0aW9uIGJvb2xPckVtcHR5U2NoZW1hKGl0LCB2YWxpZCkge1xuICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEgfSA9IGl0O1xuICAgIGlmIChzY2hlbWEgPT09IGZhbHNlKSB7XG4gICAgICAgIGdlbi52YXIodmFsaWQsIGZhbHNlKTsgLy8gVE9ETyB2YXJcbiAgICAgICAgZmFsc2VTY2hlbWFFcnJvcihpdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnZW4udmFyKHZhbGlkLCB0cnVlKTsgLy8gVE9ETyB2YXJcbiAgICB9XG59XG5leHBvcnRzLmJvb2xPckVtcHR5U2NoZW1hID0gYm9vbE9yRW1wdHlTY2hlbWE7XG5mdW5jdGlvbiBmYWxzZVNjaGVtYUVycm9yKGl0LCBvdmVycmlkZUFsbEVycm9ycykge1xuICAgIGNvbnN0IHsgZ2VuLCBkYXRhIH0gPSBpdDtcbiAgICAvLyBUT0RPIG1heWJlIHNvbWUgb3RoZXIgaW50ZXJmYWNlIHNob3VsZCBiZSB1c2VkIGZvciBub24ta2V5d29yZCB2YWxpZGF0aW9uIGVycm9ycy4uLlxuICAgIGNvbnN0IGN4dCA9IHtcbiAgICAgICAgZ2VuLFxuICAgICAgICBrZXl3b3JkOiBcImZhbHNlIHNjaGVtYVwiLFxuICAgICAgICBkYXRhLFxuICAgICAgICBzY2hlbWE6IGZhbHNlLFxuICAgICAgICBzY2hlbWFDb2RlOiBmYWxzZSxcbiAgICAgICAgc2NoZW1hVmFsdWU6IGZhbHNlLFxuICAgICAgICBwYXJhbXM6IHt9LFxuICAgICAgICBpdCxcbiAgICB9O1xuICAgICgwLCBlcnJvcnNfMS5yZXBvcnRFcnJvcikoY3h0LCBib29sRXJyb3IsIHVuZGVmaW5lZCwgb3ZlcnJpZGVBbGxFcnJvcnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vbFNjaGVtYS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/boolSchema.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/dataType.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/dataType.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;\nconst rules_1 = __webpack_require__(/*! ../rules */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/rules.js\");\nconst applicability_1 = __webpack_require__(/*! ./applicability */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/applicability.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/errors.js\");\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nvar DataType;\n(function (DataType) {\n    DataType[DataType[\"Correct\"] = 0] = \"Correct\";\n    DataType[DataType[\"Wrong\"] = 1] = \"Wrong\";\n})(DataType || (exports.DataType = DataType = {}));\nfunction getSchemaTypes(schema) {\n    const types = getJSONTypes(schema.type);\n    const hasNull = types.includes(\"null\");\n    if (hasNull) {\n        if (schema.nullable === false)\n            throw new Error(\"type: null contradicts nullable: false\");\n    }\n    else {\n        if (!types.length && schema.nullable !== undefined) {\n            throw new Error('\"nullable\" cannot be used without \"type\"');\n        }\n        if (schema.nullable === true)\n            types.push(\"null\");\n    }\n    return types;\n}\nexports.getSchemaTypes = getSchemaTypes;\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nfunction getJSONTypes(ts) {\n    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];\n    if (types.every(rules_1.isJSONType))\n        return types;\n    throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"));\n}\nexports.getJSONTypes = getJSONTypes;\nfunction coerceAndCheckDataType(it, types) {\n    const { gen, data, opts } = it;\n    const coerceTo = coerceToTypes(types, opts.coerceTypes);\n    const checkTypes = types.length > 0 &&\n        !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));\n    if (checkTypes) {\n        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);\n        gen.if(wrongType, () => {\n            if (coerceTo.length)\n                coerceData(it, types, coerceTo);\n            else\n                reportTypeError(it);\n        });\n    }\n    return checkTypes;\n}\nexports.coerceAndCheckDataType = coerceAndCheckDataType;\nconst COERCIBLE = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"]);\nfunction coerceToTypes(types, coerceTypes) {\n    return coerceTypes\n        ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === \"array\" && t === \"array\"))\n        : [];\n}\nfunction coerceData(it, types, coerceTo) {\n    const { gen, data, opts } = it;\n    const dataType = gen.let(\"dataType\", (0, codegen_1._) `typeof ${data}`);\n    const coerced = gen.let(\"coerced\", (0, codegen_1._) `undefined`);\n    if (opts.coerceTypes === \"array\") {\n        gen.if((0, codegen_1._) `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen\n            .assign(data, (0, codegen_1._) `${data}[0]`)\n            .assign(dataType, (0, codegen_1._) `typeof ${data}`)\n            .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));\n    }\n    gen.if((0, codegen_1._) `${coerced} !== undefined`);\n    for (const t of coerceTo) {\n        if (COERCIBLE.has(t) || (t === \"array\" && opts.coerceTypes === \"array\")) {\n            coerceSpecificType(t);\n        }\n    }\n    gen.else();\n    reportTypeError(it);\n    gen.endIf();\n    gen.if((0, codegen_1._) `${coerced} !== undefined`, () => {\n        gen.assign(data, coerced);\n        assignParentData(it, coerced);\n    });\n    function coerceSpecificType(t) {\n        switch (t) {\n            case \"string\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} == \"number\" || ${dataType} == \"boolean\"`)\n                    .assign(coerced, (0, codegen_1._) `\"\" + ${data}`)\n                    .elseIf((0, codegen_1._) `${data} === null`)\n                    .assign(coerced, (0, codegen_1._) `\"\"`);\n                return;\n            case \"number\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`)\n                    .assign(coerced, (0, codegen_1._) `+${data}`);\n                return;\n            case \"integer\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`)\n                    .assign(coerced, (0, codegen_1._) `+${data}`);\n                return;\n            case \"boolean\":\n                gen\n                    .elseIf((0, codegen_1._) `${data} === \"false\" || ${data} === 0 || ${data} === null`)\n                    .assign(coerced, false)\n                    .elseIf((0, codegen_1._) `${data} === \"true\" || ${data} === 1`)\n                    .assign(coerced, true);\n                return;\n            case \"null\":\n                gen.elseIf((0, codegen_1._) `${data} === \"\" || ${data} === 0 || ${data} === false`);\n                gen.assign(coerced, null);\n                return;\n            case \"array\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`)\n                    .assign(coerced, (0, codegen_1._) `[${data}]`);\n        }\n    }\n}\nfunction assignParentData({ gen, parentData, parentDataProperty }, expr) {\n    // TODO use gen.property\n    gen.if((0, codegen_1._) `${parentData} !== undefined`, () => gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, expr));\n}\nfunction checkDataType(dataType, data, strictNums, correct = DataType.Correct) {\n    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;\n    let cond;\n    switch (dataType) {\n        case \"null\":\n            return (0, codegen_1._) `${data} ${EQ} null`;\n        case \"array\":\n            cond = (0, codegen_1._) `Array.isArray(${data})`;\n            break;\n        case \"object\":\n            cond = (0, codegen_1._) `${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`;\n            break;\n        case \"integer\":\n            cond = numCond((0, codegen_1._) `!(${data} % 1) && !isNaN(${data})`);\n            break;\n        case \"number\":\n            cond = numCond();\n            break;\n        default:\n            return (0, codegen_1._) `typeof ${data} ${EQ} ${dataType}`;\n    }\n    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);\n    function numCond(_cond = codegen_1.nil) {\n        return (0, codegen_1.and)((0, codegen_1._) `typeof ${data} == \"number\"`, _cond, strictNums ? (0, codegen_1._) `isFinite(${data})` : codegen_1.nil);\n    }\n}\nexports.checkDataType = checkDataType;\nfunction checkDataTypes(dataTypes, data, strictNums, correct) {\n    if (dataTypes.length === 1) {\n        return checkDataType(dataTypes[0], data, strictNums, correct);\n    }\n    let cond;\n    const types = (0, util_1.toHash)(dataTypes);\n    if (types.array && types.object) {\n        const notObj = (0, codegen_1._) `typeof ${data} != \"object\"`;\n        cond = types.null ? notObj : (0, codegen_1._) `!${data} || ${notObj}`;\n        delete types.null;\n        delete types.array;\n        delete types.object;\n    }\n    else {\n        cond = codegen_1.nil;\n    }\n    if (types.number)\n        delete types.integer;\n    for (const t in types)\n        cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));\n    return cond;\n}\nexports.checkDataTypes = checkDataTypes;\nconst typeError = {\n    message: ({ schema }) => `must be ${schema}`,\n    params: ({ schema, schemaValue }) => typeof schema == \"string\" ? (0, codegen_1._) `{type: ${schema}}` : (0, codegen_1._) `{type: ${schemaValue}}`,\n};\nfunction reportTypeError(it) {\n    const cxt = getTypeErrorContext(it);\n    (0, errors_1.reportError)(cxt, typeError);\n}\nexports.reportTypeError = reportTypeError;\nfunction getTypeErrorContext(it) {\n    const { gen, data, schema } = it;\n    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, \"type\");\n    return {\n        gen,\n        keyword: \"type\",\n        data,\n        schema: schema.type,\n        schemaCode,\n        schemaValue: schemaCode,\n        parentSchema: schema,\n        params: {},\n        it,\n    };\n}\n//# sourceMappingURL=dataType.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/dataType.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/defaults.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/defaults.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assignDefaults = void 0;\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nfunction assignDefaults(it, ty) {\n    const { properties, items } = it.schema;\n    if (ty === \"object\" && properties) {\n        for (const key in properties) {\n            assignDefault(it, key, properties[key].default);\n        }\n    }\n    else if (ty === \"array\" && Array.isArray(items)) {\n        items.forEach((sch, i) => assignDefault(it, i, sch.default));\n    }\n}\nexports.assignDefaults = assignDefaults;\nfunction assignDefault(it, prop, defaultValue) {\n    const { gen, compositeRule, data, opts } = it;\n    if (defaultValue === undefined)\n        return;\n    const childData = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(prop)}`;\n    if (compositeRule) {\n        (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);\n        return;\n    }\n    let condition = (0, codegen_1._) `${childData} === undefined`;\n    if (opts.useDefaults === \"empty\") {\n        condition = (0, codegen_1._) `${condition} || ${childData} === null || ${childData} === \"\"`;\n    }\n    // `${childData} === undefined` +\n    // (opts.useDefaults === \"empty\" ? ` || ${childData} === null || ${childData} === \"\"` : \"\")\n    gen.if(condition, (0, codegen_1._) `${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);\n}\n//# sourceMappingURL=defaults.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvZGVmYXVsdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCLGtCQUFrQixtQkFBTyxDQUFDLGtIQUFZO0FBQ3RDLGVBQWUsbUJBQU8sQ0FBQyxzR0FBUztBQUNoQztBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLFlBQVksaUNBQWlDO0FBQzdDO0FBQ0E7QUFDQSwwQ0FBMEMsS0FBSyxFQUFFLGlDQUFpQztBQUNsRjtBQUNBLG1FQUFtRSxVQUFVO0FBQzdFO0FBQ0E7QUFDQSx3Q0FBd0MsV0FBVztBQUNuRDtBQUNBLHdDQUF3QyxXQUFXLEtBQUssV0FBVyxjQUFjLFdBQVc7QUFDNUY7QUFDQSxVQUFVLFdBQVc7QUFDckIsOENBQThDLFdBQVcsY0FBYyxXQUFXO0FBQ2xGLDBDQUEwQyxXQUFXLElBQUksdUNBQXVDO0FBQ2hHO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3ZhbGlkYXRlL2RlZmF1bHRzLmpzPzAzM2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzc2lnbkRlZmF1bHRzID0gdm9pZCAwO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbmZ1bmN0aW9uIGFzc2lnbkRlZmF1bHRzKGl0LCB0eSkge1xuICAgIGNvbnN0IHsgcHJvcGVydGllcywgaXRlbXMgfSA9IGl0LnNjaGVtYTtcbiAgICBpZiAodHkgPT09IFwib2JqZWN0XCIgJiYgcHJvcGVydGllcykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBhc3NpZ25EZWZhdWx0KGl0LCBrZXksIHByb3BlcnRpZXNba2V5XS5kZWZhdWx0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eSA9PT0gXCJhcnJheVwiICYmIEFycmF5LmlzQXJyYXkoaXRlbXMpKSB7XG4gICAgICAgIGl0ZW1zLmZvckVhY2goKHNjaCwgaSkgPT4gYXNzaWduRGVmYXVsdChpdCwgaSwgc2NoLmRlZmF1bHQpKTtcbiAgICB9XG59XG5leHBvcnRzLmFzc2lnbkRlZmF1bHRzID0gYXNzaWduRGVmYXVsdHM7XG5mdW5jdGlvbiBhc3NpZ25EZWZhdWx0KGl0LCBwcm9wLCBkZWZhdWx0VmFsdWUpIHtcbiAgICBjb25zdCB7IGdlbiwgY29tcG9zaXRlUnVsZSwgZGF0YSwgb3B0cyB9ID0gaXQ7XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgY2hpbGREYXRhID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSR7KDAsIGNvZGVnZW5fMS5nZXRQcm9wZXJ0eSkocHJvcCl9YDtcbiAgICBpZiAoY29tcG9zaXRlUnVsZSkge1xuICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIGBkZWZhdWx0IGlzIGlnbm9yZWQgZm9yOiAke2NoaWxkRGF0YX1gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgY29uZGl0aW9uID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtjaGlsZERhdGF9ID09PSB1bmRlZmluZWRgO1xuICAgIGlmIChvcHRzLnVzZURlZmF1bHRzID09PSBcImVtcHR5XCIpIHtcbiAgICAgICAgY29uZGl0aW9uID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtjb25kaXRpb259IHx8ICR7Y2hpbGREYXRhfSA9PT0gbnVsbCB8fCAke2NoaWxkRGF0YX0gPT09IFwiXCJgO1xuICAgIH1cbiAgICAvLyBgJHtjaGlsZERhdGF9ID09PSB1bmRlZmluZWRgICtcbiAgICAvLyAob3B0cy51c2VEZWZhdWx0cyA9PT0gXCJlbXB0eVwiID8gYCB8fCAke2NoaWxkRGF0YX0gPT09IG51bGwgfHwgJHtjaGlsZERhdGF9ID09PSBcIlwiYCA6IFwiXCIpXG4gICAgZ2VuLmlmKGNvbmRpdGlvbiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtjaGlsZERhdGF9ID0gJHsoMCwgY29kZWdlbl8xLnN0cmluZ2lmeSkoZGVmYXVsdFZhbHVlKX1gKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/defaults.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;\nconst boolSchema_1 = __webpack_require__(/*! ./boolSchema */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/boolSchema.js\");\nconst dataType_1 = __webpack_require__(/*! ./dataType */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/dataType.js\");\nconst applicability_1 = __webpack_require__(/*! ./applicability */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/applicability.js\");\nconst dataType_2 = __webpack_require__(/*! ./dataType */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/dataType.js\");\nconst defaults_1 = __webpack_require__(/*! ./defaults */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/defaults.js\");\nconst keyword_1 = __webpack_require__(/*! ./keyword */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/keyword.js\");\nconst subschema_1 = __webpack_require__(/*! ./subschema */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/subschema.js\");\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names_1 = __webpack_require__(/*! ../names */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/names.js\");\nconst resolve_1 = __webpack_require__(/*! ../resolve */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/resolve.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/errors.js\");\n// schema compilation - generates validation function, subschemaCode (below) is used for subschemas\nfunction validateFunctionCode(it) {\n    if (isSchemaObj(it)) {\n        checkKeywords(it);\n        if (schemaCxtHasRules(it)) {\n            topSchemaObjCode(it);\n            return;\n        }\n    }\n    validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));\n}\nexports.validateFunctionCode = validateFunctionCode;\nfunction validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {\n    if (opts.code.es5) {\n        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {\n            gen.code((0, codegen_1._) `\"use strict\"; ${funcSourceUrl(schema, opts)}`);\n            destructureValCxtES5(gen, opts);\n            gen.code(body);\n        });\n    }\n    else {\n        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));\n    }\n}\nfunction destructureValCxt(opts) {\n    return (0, codegen_1._) `{${names_1.default.instancePath}=\"\", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._) `, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;\n}\nfunction destructureValCxtES5(gen, opts) {\n    gen.if(names_1.default.valCxt, () => {\n        gen.var(names_1.default.instancePath, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.instancePath}`);\n        gen.var(names_1.default.parentData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentData}`);\n        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);\n        gen.var(names_1.default.rootData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.rootData}`);\n        if (opts.dynamicRef)\n            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);\n    }, () => {\n        gen.var(names_1.default.instancePath, (0, codegen_1._) `\"\"`);\n        gen.var(names_1.default.parentData, (0, codegen_1._) `undefined`);\n        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `undefined`);\n        gen.var(names_1.default.rootData, names_1.default.data);\n        if (opts.dynamicRef)\n            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `{}`);\n    });\n}\nfunction topSchemaObjCode(it) {\n    const { schema, opts, gen } = it;\n    validateFunction(it, () => {\n        if (opts.$comment && schema.$comment)\n            commentKeyword(it);\n        checkNoDefault(it);\n        gen.let(names_1.default.vErrors, null);\n        gen.let(names_1.default.errors, 0);\n        if (opts.unevaluated)\n            resetEvaluated(it);\n        typeAndKeywords(it);\n        returnResults(it);\n    });\n    return;\n}\nfunction resetEvaluated(it) {\n    // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated\n    const { gen, validateName } = it;\n    it.evaluated = gen.const(\"evaluated\", (0, codegen_1._) `${validateName}.evaluated`);\n    gen.if((0, codegen_1._) `${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._) `${it.evaluated}.props`, (0, codegen_1._) `undefined`));\n    gen.if((0, codegen_1._) `${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._) `${it.evaluated}.items`, (0, codegen_1._) `undefined`));\n}\nfunction funcSourceUrl(schema, opts) {\n    const schId = typeof schema == \"object\" && schema[opts.schemaId];\n    return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._) `/*# sourceURL=${schId} */` : codegen_1.nil;\n}\n// schema compilation - this function is used recursively to generate code for sub-schemas\nfunction subschemaCode(it, valid) {\n    if (isSchemaObj(it)) {\n        checkKeywords(it);\n        if (schemaCxtHasRules(it)) {\n            subSchemaObjCode(it, valid);\n            return;\n        }\n    }\n    (0, boolSchema_1.boolOrEmptySchema)(it, valid);\n}\nfunction schemaCxtHasRules({ schema, self }) {\n    if (typeof schema == \"boolean\")\n        return !schema;\n    for (const key in schema)\n        if (self.RULES.all[key])\n            return true;\n    return false;\n}\nfunction isSchemaObj(it) {\n    return typeof it.schema != \"boolean\";\n}\nfunction subSchemaObjCode(it, valid) {\n    const { schema, gen, opts } = it;\n    if (opts.$comment && schema.$comment)\n        commentKeyword(it);\n    updateContext(it);\n    checkAsyncSchema(it);\n    const errsCount = gen.const(\"_errs\", names_1.default.errors);\n    typeAndKeywords(it, errsCount);\n    // TODO var\n    gen.var(valid, (0, codegen_1._) `${errsCount} === ${names_1.default.errors}`);\n}\nfunction checkKeywords(it) {\n    (0, util_1.checkUnknownRules)(it);\n    checkRefsAndKeywords(it);\n}\nfunction typeAndKeywords(it, errsCount) {\n    if (it.opts.jtd)\n        return schemaKeywords(it, [], false, errsCount);\n    const types = (0, dataType_1.getSchemaTypes)(it.schema);\n    const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);\n    schemaKeywords(it, types, !checkedTypes, errsCount);\n}\nfunction checkRefsAndKeywords(it) {\n    const { schema, errSchemaPath, opts, self } = it;\n    if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) {\n        self.logger.warn(`$ref: keywords ignored in schema at path \"${errSchemaPath}\"`);\n    }\n}\nfunction checkNoDefault(it) {\n    const { schema, opts } = it;\n    if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {\n        (0, util_1.checkStrictMode)(it, \"default is ignored in the schema root\");\n    }\n}\nfunction updateContext(it) {\n    const schId = it.schema[it.opts.schemaId];\n    if (schId)\n        it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);\n}\nfunction checkAsyncSchema(it) {\n    if (it.schema.$async && !it.schemaEnv.$async)\n        throw new Error(\"async schema in sync schema\");\n}\nfunction commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {\n    const msg = schema.$comment;\n    if (opts.$comment === true) {\n        gen.code((0, codegen_1._) `${names_1.default.self}.logger.log(${msg})`);\n    }\n    else if (typeof opts.$comment == \"function\") {\n        const schemaPath = (0, codegen_1.str) `${errSchemaPath}/$comment`;\n        const rootName = gen.scopeValue(\"root\", { ref: schemaEnv.root });\n        gen.code((0, codegen_1._) `${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);\n    }\n}\nfunction returnResults(it) {\n    const { gen, schemaEnv, validateName, ValidationError, opts } = it;\n    if (schemaEnv.$async) {\n        // TODO assign unevaluated\n        gen.if((0, codegen_1._) `${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._) `new ${ValidationError}(${names_1.default.vErrors})`));\n    }\n    else {\n        gen.assign((0, codegen_1._) `${validateName}.errors`, names_1.default.vErrors);\n        if (opts.unevaluated)\n            assignEvaluated(it);\n        gen.return((0, codegen_1._) `${names_1.default.errors} === 0`);\n    }\n}\nfunction assignEvaluated({ gen, evaluated, props, items }) {\n    if (props instanceof codegen_1.Name)\n        gen.assign((0, codegen_1._) `${evaluated}.props`, props);\n    if (items instanceof codegen_1.Name)\n        gen.assign((0, codegen_1._) `${evaluated}.items`, items);\n}\nfunction schemaKeywords(it, types, typeErrors, errsCount) {\n    const { gen, schema, data, allErrors, opts, self } = it;\n    const { RULES } = self;\n    if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {\n        gen.block(() => keywordCode(it, \"$ref\", RULES.all.$ref.definition)); // TODO typecast\n        return;\n    }\n    if (!opts.jtd)\n        checkStrictTypes(it, types);\n    gen.block(() => {\n        for (const group of RULES.rules)\n            groupKeywords(group);\n        groupKeywords(RULES.post);\n    });\n    function groupKeywords(group) {\n        if (!(0, applicability_1.shouldUseGroup)(schema, group))\n            return;\n        if (group.type) {\n            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));\n            iterateKeywords(it, group);\n            if (types.length === 1 && types[0] === group.type && typeErrors) {\n                gen.else();\n                (0, dataType_2.reportTypeError)(it);\n            }\n            gen.endIf();\n        }\n        else {\n            iterateKeywords(it, group);\n        }\n        // TODO make it \"ok\" call?\n        if (!allErrors)\n            gen.if((0, codegen_1._) `${names_1.default.errors} === ${errsCount || 0}`);\n    }\n}\nfunction iterateKeywords(it, group) {\n    const { gen, schema, opts: { useDefaults }, } = it;\n    if (useDefaults)\n        (0, defaults_1.assignDefaults)(it, group.type);\n    gen.block(() => {\n        for (const rule of group.rules) {\n            if ((0, applicability_1.shouldUseRule)(schema, rule)) {\n                keywordCode(it, rule.keyword, rule.definition, group.type);\n            }\n        }\n    });\n}\nfunction checkStrictTypes(it, types) {\n    if (it.schemaEnv.meta || !it.opts.strictTypes)\n        return;\n    checkContextTypes(it, types);\n    if (!it.opts.allowUnionTypes)\n        checkMultipleTypes(it, types);\n    checkKeywordTypes(it, it.dataTypes);\n}\nfunction checkContextTypes(it, types) {\n    if (!types.length)\n        return;\n    if (!it.dataTypes.length) {\n        it.dataTypes = types;\n        return;\n    }\n    types.forEach((t) => {\n        if (!includesType(it.dataTypes, t)) {\n            strictTypesError(it, `type \"${t}\" not allowed by context \"${it.dataTypes.join(\",\")}\"`);\n        }\n    });\n    narrowSchemaTypes(it, types);\n}\nfunction checkMultipleTypes(it, ts) {\n    if (ts.length > 1 && !(ts.length === 2 && ts.includes(\"null\"))) {\n        strictTypesError(it, \"use allowUnionTypes to allow union type keyword\");\n    }\n}\nfunction checkKeywordTypes(it, ts) {\n    const rules = it.self.RULES.all;\n    for (const keyword in rules) {\n        const rule = rules[keyword];\n        if (typeof rule == \"object\" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {\n            const { type } = rule.definition;\n            if (type.length && !type.some((t) => hasApplicableType(ts, t))) {\n                strictTypesError(it, `missing type \"${type.join(\",\")}\" for keyword \"${keyword}\"`);\n            }\n        }\n    }\n}\nfunction hasApplicableType(schTs, kwdT) {\n    return schTs.includes(kwdT) || (kwdT === \"number\" && schTs.includes(\"integer\"));\n}\nfunction includesType(ts, t) {\n    return ts.includes(t) || (t === \"integer\" && ts.includes(\"number\"));\n}\nfunction narrowSchemaTypes(it, withTypes) {\n    const ts = [];\n    for (const t of it.dataTypes) {\n        if (includesType(withTypes, t))\n            ts.push(t);\n        else if (withTypes.includes(\"integer\") && t === \"number\")\n            ts.push(\"integer\");\n    }\n    it.dataTypes = ts;\n}\nfunction strictTypesError(it, msg) {\n    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;\n    msg += ` at \"${schemaPath}\" (strictTypes)`;\n    (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);\n}\nclass KeywordCxt {\n    constructor(it, def, keyword) {\n        (0, keyword_1.validateKeywordUsage)(it, def, keyword);\n        this.gen = it.gen;\n        this.allErrors = it.allErrors;\n        this.keyword = keyword;\n        this.data = it.data;\n        this.schema = it.schema[keyword];\n        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;\n        this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);\n        this.schemaType = def.schemaType;\n        this.parentSchema = it.schema;\n        this.params = {};\n        this.it = it;\n        this.def = def;\n        if (this.$data) {\n            this.schemaCode = it.gen.const(\"vSchema\", getData(this.$data, it));\n        }\n        else {\n            this.schemaCode = this.schemaValue;\n            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {\n                throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);\n            }\n        }\n        if (\"code\" in def ? def.trackErrors : def.errors !== false) {\n            this.errsCount = it.gen.const(\"_errs\", names_1.default.errors);\n        }\n    }\n    result(condition, successAction, failAction) {\n        this.failResult((0, codegen_1.not)(condition), successAction, failAction);\n    }\n    failResult(condition, successAction, failAction) {\n        this.gen.if(condition);\n        if (failAction)\n            failAction();\n        else\n            this.error();\n        if (successAction) {\n            this.gen.else();\n            successAction();\n            if (this.allErrors)\n                this.gen.endIf();\n        }\n        else {\n            if (this.allErrors)\n                this.gen.endIf();\n            else\n                this.gen.else();\n        }\n    }\n    pass(condition, failAction) {\n        this.failResult((0, codegen_1.not)(condition), undefined, failAction);\n    }\n    fail(condition) {\n        if (condition === undefined) {\n            this.error();\n            if (!this.allErrors)\n                this.gen.if(false); // this branch will be removed by gen.optimize\n            return;\n        }\n        this.gen.if(condition);\n        this.error();\n        if (this.allErrors)\n            this.gen.endIf();\n        else\n            this.gen.else();\n    }\n    fail$data(condition) {\n        if (!this.$data)\n            return this.fail(condition);\n        const { schemaCode } = this;\n        this.fail((0, codegen_1._) `${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);\n    }\n    error(append, errorParams, errorPaths) {\n        if (errorParams) {\n            this.setParams(errorParams);\n            this._error(append, errorPaths);\n            this.setParams({});\n            return;\n        }\n        this._error(append, errorPaths);\n    }\n    _error(append, errorPaths) {\n        ;\n        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);\n    }\n    $dataError() {\n        (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);\n    }\n    reset() {\n        if (this.errsCount === undefined)\n            throw new Error('add \"trackErrors\" to keyword definition');\n        (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);\n    }\n    ok(cond) {\n        if (!this.allErrors)\n            this.gen.if(cond);\n    }\n    setParams(obj, assign) {\n        if (assign)\n            Object.assign(this.params, obj);\n        else\n            this.params = obj;\n    }\n    block$data(valid, codeBlock, $dataValid = codegen_1.nil) {\n        this.gen.block(() => {\n            this.check$data(valid, $dataValid);\n            codeBlock();\n        });\n    }\n    check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {\n        if (!this.$data)\n            return;\n        const { gen, schemaCode, schemaType, def } = this;\n        gen.if((0, codegen_1.or)((0, codegen_1._) `${schemaCode} === undefined`, $dataValid));\n        if (valid !== codegen_1.nil)\n            gen.assign(valid, true);\n        if (schemaType.length || def.validateSchema) {\n            gen.elseIf(this.invalid$data());\n            this.$dataError();\n            if (valid !== codegen_1.nil)\n                gen.assign(valid, false);\n        }\n        gen.else();\n    }\n    invalid$data() {\n        const { gen, schemaCode, schemaType, def, it } = this;\n        return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());\n        function wrong$DataType() {\n            if (schemaType.length) {\n                /* istanbul ignore if */\n                if (!(schemaCode instanceof codegen_1.Name))\n                    throw new Error(\"ajv implementation error\");\n                const st = Array.isArray(schemaType) ? schemaType : [schemaType];\n                return (0, codegen_1._) `${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;\n            }\n            return codegen_1.nil;\n        }\n        function invalid$DataSchema() {\n            if (def.validateSchema) {\n                const validateSchemaRef = gen.scopeValue(\"validate$data\", { ref: def.validateSchema }); // TODO value.code for standalone\n                return (0, codegen_1._) `!${validateSchemaRef}(${schemaCode})`;\n            }\n            return codegen_1.nil;\n        }\n    }\n    subschema(appl, valid) {\n        const subschema = (0, subschema_1.getSubschema)(this.it, appl);\n        (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);\n        (0, subschema_1.extendSubschemaMode)(subschema, appl);\n        const nextContext = { ...this.it, ...subschema, items: undefined, props: undefined };\n        subschemaCode(nextContext, valid);\n        return nextContext;\n    }\n    mergeEvaluated(schemaCxt, toName) {\n        const { it, gen } = this;\n        if (!it.opts.unevaluated)\n            return;\n        if (it.props !== true && schemaCxt.props !== undefined) {\n            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);\n        }\n        if (it.items !== true && schemaCxt.items !== undefined) {\n            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);\n        }\n    }\n    mergeValidEvaluated(schemaCxt, valid) {\n        const { it, gen } = this;\n        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {\n            gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));\n            return true;\n        }\n    }\n}\nexports.KeywordCxt = KeywordCxt;\nfunction keywordCode(it, keyword, def, ruleType) {\n    const cxt = new KeywordCxt(it, def, keyword);\n    if (\"code\" in def) {\n        def.code(cxt, ruleType);\n    }\n    else if (cxt.$data && def.validate) {\n        (0, keyword_1.funcKeywordCode)(cxt, def);\n    }\n    else if (\"macro\" in def) {\n        (0, keyword_1.macroKeywordCode)(cxt, def);\n    }\n    else if (def.compile || def.validate) {\n        (0, keyword_1.funcKeywordCode)(cxt, def);\n    }\n}\nconst JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/;\nconst RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/;\nfunction getData($data, { dataLevel, dataNames, dataPathArr }) {\n    let jsonPointer;\n    let data;\n    if ($data === \"\")\n        return names_1.default.rootData;\n    if ($data[0] === \"/\") {\n        if (!JSON_POINTER.test($data))\n            throw new Error(`Invalid JSON-pointer: ${$data}`);\n        jsonPointer = $data;\n        data = names_1.default.rootData;\n    }\n    else {\n        const matches = RELATIVE_JSON_POINTER.exec($data);\n        if (!matches)\n            throw new Error(`Invalid JSON-pointer: ${$data}`);\n        const up = +matches[1];\n        jsonPointer = matches[2];\n        if (jsonPointer === \"#\") {\n            if (up >= dataLevel)\n                throw new Error(errorMsg(\"property/index\", up));\n            return dataPathArr[dataLevel - up];\n        }\n        if (up > dataLevel)\n            throw new Error(errorMsg(\"data\", up));\n        data = dataNames[dataLevel - up];\n        if (!jsonPointer)\n            return data;\n    }\n    let expr = data;\n    const segments = jsonPointer.split(\"/\");\n    for (const segment of segments) {\n        if (segment) {\n            data = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;\n            expr = (0, codegen_1._) `${expr} && ${data}`;\n        }\n    }\n    return expr;\n    function errorMsg(pointerType, up) {\n        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;\n    }\n}\nexports.getData = getData;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLGtCQUFrQixHQUFHLDRCQUE0QjtBQUNuRSxxQkFBcUIsbUJBQU8sQ0FBQywwSEFBYztBQUMzQyxtQkFBbUIsbUJBQU8sQ0FBQyxzSEFBWTtBQUN2Qyx3QkFBd0IsbUJBQU8sQ0FBQyxnSUFBaUI7QUFDakQsbUJBQW1CLG1CQUFPLENBQUMsc0hBQVk7QUFDdkMsbUJBQW1CLG1CQUFPLENBQUMsc0hBQVk7QUFDdkMsa0JBQWtCLG1CQUFPLENBQUMsb0hBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsd0hBQWE7QUFDekMsa0JBQWtCLG1CQUFPLENBQUMsa0hBQVk7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsd0dBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsNEdBQVk7QUFDdEMsZUFBZSxtQkFBTyxDQUFDLHNHQUFTO0FBQ2hDLGlCQUFpQixtQkFBTyxDQUFDLDBHQUFXO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIsNEJBQTRCLDRDQUE0QztBQUN4RTtBQUNBLG1EQUFtRCxxQkFBcUIsSUFBSSx1QkFBdUI7QUFDbkcscURBQXFELEVBQUUsNEJBQTRCO0FBQ25GO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLG1EQUFtRCxxQkFBcUIsSUFBSSx3QkFBd0I7QUFDcEc7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUUsNkJBQTZCLE9BQU8sMkJBQTJCLElBQUksbUNBQW1DLElBQUkseUJBQXlCLEdBQUcscUJBQXFCLEVBQUUsd0NBQXdDLCtCQUErQixHQUFHLG1CQUFtQixHQUFHO0FBQzdSO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSx1QkFBdUIsR0FBRyw2QkFBNkI7QUFDekgsZ0VBQWdFLHVCQUF1QixHQUFHLDJCQUEyQjtBQUNySCx3RUFBd0UsdUJBQXVCLEdBQUcsbUNBQW1DO0FBQ3JJLDhEQUE4RCx1QkFBdUIsR0FBRyx5QkFBeUI7QUFDakg7QUFDQSx3RUFBd0UsdUJBQXVCLEdBQUcsK0JBQStCO0FBQ2pJLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQyw4REFBOEQsYUFBYTtBQUMzRSwrQkFBK0IsYUFBYSxxREFBcUQsYUFBYTtBQUM5RywrQkFBK0IsYUFBYSxxREFBcUQsYUFBYTtBQUM5RztBQUNBO0FBQ0E7QUFDQSxnR0FBZ0csT0FBTztBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsY0FBYztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsV0FBVyxNQUFNLHVCQUF1QjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0NBQW9DO0FBQ2hEO0FBQ0Esc0VBQXNFLGNBQWM7QUFDcEY7QUFDQTtBQUNBO0FBQ0EsWUFBWSxlQUFlO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDZDQUE2QztBQUN2RTtBQUNBO0FBQ0EscUNBQXFDLHFCQUFxQixjQUFjLElBQUk7QUFDNUU7QUFDQTtBQUNBLGlEQUFpRCxjQUFjO0FBQy9ELGtEQUFrRCxxQkFBcUI7QUFDdkUscUNBQXFDLHFCQUFxQixpQkFBaUIsSUFBSSxJQUFJLFdBQVcsSUFBSSxTQUFTO0FBQzNHO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0RBQXNEO0FBQ2xFO0FBQ0E7QUFDQSxtQ0FBbUMsd0JBQXdCLHdGQUF3RixnQkFBZ0IsR0FBRyx3QkFBd0I7QUFDOUw7QUFDQTtBQUNBLHVDQUF1QyxhQUFhO0FBQ3BEO0FBQ0E7QUFDQSx1Q0FBdUMsd0JBQXdCO0FBQy9EO0FBQ0E7QUFDQSwyQkFBMkIsOEJBQThCO0FBQ3pEO0FBQ0EsdUNBQXVDLFVBQVU7QUFDakQ7QUFDQSx1Q0FBdUMsVUFBVTtBQUNqRDtBQUNBO0FBQ0EsWUFBWSwyQ0FBMkM7QUFDdkQsWUFBWSxRQUFRO0FBQ3BCO0FBQ0EsNkVBQTZFO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyx3QkFBd0IsTUFBTSxlQUFlO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBLFlBQVkscUJBQXFCLGFBQWEsSUFBSTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxFQUFFLDRCQUE0Qix1QkFBdUI7QUFDL0Y7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQSxzREFBc0QsZUFBZSxpQkFBaUIsUUFBUTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixXQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsU0FBUyxnQkFBZ0IsK0JBQStCO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0Isc0NBQXNDLFlBQVksb0JBQW9CLGtEQUFrRDtBQUN4SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQ0FBbUM7QUFDbkQscURBQXFELFlBQVk7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix1Q0FBdUM7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsaUdBQWlHO0FBQzVJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUseUJBQXlCLEdBQUc7QUFDeEcsNENBQTRDLGtCQUFrQixHQUFHLFdBQVc7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUNBQW1DO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxNQUFNO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxNQUFNO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsS0FBSyxFQUFFLHFFQUFxRTtBQUNuSCx1Q0FBdUMsTUFBTSxLQUFLLEtBQUs7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsYUFBYSxFQUFFLElBQUksOEJBQThCLFVBQVU7QUFDM0Y7QUFDQTtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvaW5kZXguanM/YzE1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RGF0YSA9IGV4cG9ydHMuS2V5d29yZEN4dCA9IGV4cG9ydHMudmFsaWRhdGVGdW5jdGlvbkNvZGUgPSB2b2lkIDA7XG5jb25zdCBib29sU2NoZW1hXzEgPSByZXF1aXJlKFwiLi9ib29sU2NoZW1hXCIpO1xuY29uc3QgZGF0YVR5cGVfMSA9IHJlcXVpcmUoXCIuL2RhdGFUeXBlXCIpO1xuY29uc3QgYXBwbGljYWJpbGl0eV8xID0gcmVxdWlyZShcIi4vYXBwbGljYWJpbGl0eVwiKTtcbmNvbnN0IGRhdGFUeXBlXzIgPSByZXF1aXJlKFwiLi9kYXRhVHlwZVwiKTtcbmNvbnN0IGRlZmF1bHRzXzEgPSByZXF1aXJlKFwiLi9kZWZhdWx0c1wiKTtcbmNvbnN0IGtleXdvcmRfMSA9IHJlcXVpcmUoXCIuL2tleXdvcmRcIik7XG5jb25zdCBzdWJzY2hlbWFfMSA9IHJlcXVpcmUoXCIuL3N1YnNjaGVtYVwiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi9jb2RlZ2VuXCIpO1xuY29uc3QgbmFtZXNfMSA9IHJlcXVpcmUoXCIuLi9uYW1lc1wiKTtcbmNvbnN0IHJlc29sdmVfMSA9IHJlcXVpcmUoXCIuLi9yZXNvbHZlXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG4vLyBzY2hlbWEgY29tcGlsYXRpb24gLSBnZW5lcmF0ZXMgdmFsaWRhdGlvbiBmdW5jdGlvbiwgc3Vic2NoZW1hQ29kZSAoYmVsb3cpIGlzIHVzZWQgZm9yIHN1YnNjaGVtYXNcbmZ1bmN0aW9uIHZhbGlkYXRlRnVuY3Rpb25Db2RlKGl0KSB7XG4gICAgaWYgKGlzU2NoZW1hT2JqKGl0KSkge1xuICAgICAgICBjaGVja0tleXdvcmRzKGl0KTtcbiAgICAgICAgaWYgKHNjaGVtYUN4dEhhc1J1bGVzKGl0KSkge1xuICAgICAgICAgICAgdG9wU2NoZW1hT2JqQ29kZShpdCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFsaWRhdGVGdW5jdGlvbihpdCwgKCkgPT4gKDAsIGJvb2xTY2hlbWFfMS50b3BCb29sT3JFbXB0eVNjaGVtYSkoaXQpKTtcbn1cbmV4cG9ydHMudmFsaWRhdGVGdW5jdGlvbkNvZGUgPSB2YWxpZGF0ZUZ1bmN0aW9uQ29kZTtcbmZ1bmN0aW9uIHZhbGlkYXRlRnVuY3Rpb24oeyBnZW4sIHZhbGlkYXRlTmFtZSwgc2NoZW1hLCBzY2hlbWFFbnYsIG9wdHMgfSwgYm9keSkge1xuICAgIGlmIChvcHRzLmNvZGUuZXM1KSB7XG4gICAgICAgIGdlbi5mdW5jKHZhbGlkYXRlTmFtZSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQuZGF0YX0sICR7bmFtZXNfMS5kZWZhdWx0LnZhbEN4dH1gLCBzY2hlbWFFbnYuJGFzeW5jLCAoKSA9PiB7XG4gICAgICAgICAgICBnZW4uY29kZSgoMCwgY29kZWdlbl8xLl8pIGBcInVzZSBzdHJpY3RcIjsgJHtmdW5jU291cmNlVXJsKHNjaGVtYSwgb3B0cyl9YCk7XG4gICAgICAgICAgICBkZXN0cnVjdHVyZVZhbEN4dEVTNShnZW4sIG9wdHMpO1xuICAgICAgICAgICAgZ2VuLmNvZGUoYm9keSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2VuLmZ1bmModmFsaWRhdGVOYW1lLCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC5kYXRhfSwgJHtkZXN0cnVjdHVyZVZhbEN4dChvcHRzKX1gLCBzY2hlbWFFbnYuJGFzeW5jLCAoKSA9PiBnZW4uY29kZShmdW5jU291cmNlVXJsKHNjaGVtYSwgb3B0cykpLmNvZGUoYm9keSkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlc3RydWN0dXJlVmFsQ3h0KG9wdHMpIHtcbiAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5fKSBgeyR7bmFtZXNfMS5kZWZhdWx0Lmluc3RhbmNlUGF0aH09XCJcIiwgJHtuYW1lc18xLmRlZmF1bHQucGFyZW50RGF0YX0sICR7bmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGFQcm9wZXJ0eX0sICR7bmFtZXNfMS5kZWZhdWx0LnJvb3REYXRhfT0ke25hbWVzXzEuZGVmYXVsdC5kYXRhfSR7b3B0cy5keW5hbWljUmVmID8gKDAsIGNvZGVnZW5fMS5fKSBgLCAke25hbWVzXzEuZGVmYXVsdC5keW5hbWljQW5jaG9yc309e31gIDogY29kZWdlbl8xLm5pbH19PXt9YDtcbn1cbmZ1bmN0aW9uIGRlc3RydWN0dXJlVmFsQ3h0RVM1KGdlbiwgb3B0cykge1xuICAgIGdlbi5pZihuYW1lc18xLmRlZmF1bHQudmFsQ3h0LCAoKSA9PiB7XG4gICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0Lmluc3RhbmNlUGF0aCwgKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQudmFsQ3h0fS4ke25hbWVzXzEuZGVmYXVsdC5pbnN0YW5jZVBhdGh9YCk7XG4gICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGEsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZhbEN4dH0uJHtuYW1lc18xLmRlZmF1bHQucGFyZW50RGF0YX1gKTtcbiAgICAgICAgZ2VuLnZhcihuYW1lc18xLmRlZmF1bHQucGFyZW50RGF0YVByb3BlcnR5LCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52YWxDeHR9LiR7bmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGFQcm9wZXJ0eX1gKTtcbiAgICAgICAgZ2VuLnZhcihuYW1lc18xLmRlZmF1bHQucm9vdERhdGEsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZhbEN4dH0uJHtuYW1lc18xLmRlZmF1bHQucm9vdERhdGF9YCk7XG4gICAgICAgIGlmIChvcHRzLmR5bmFtaWNSZWYpXG4gICAgICAgICAgICBnZW4udmFyKG5hbWVzXzEuZGVmYXVsdC5keW5hbWljQW5jaG9ycywgKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQudmFsQ3h0fS4ke25hbWVzXzEuZGVmYXVsdC5keW5hbWljQW5jaG9yc31gKTtcbiAgICB9LCAoKSA9PiB7XG4gICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0Lmluc3RhbmNlUGF0aCwgKDAsIGNvZGVnZW5fMS5fKSBgXCJcImApO1xuICAgICAgICBnZW4udmFyKG5hbWVzXzEuZGVmYXVsdC5wYXJlbnREYXRhLCAoMCwgY29kZWdlbl8xLl8pIGB1bmRlZmluZWRgKTtcbiAgICAgICAgZ2VuLnZhcihuYW1lc18xLmRlZmF1bHQucGFyZW50RGF0YVByb3BlcnR5LCAoMCwgY29kZWdlbl8xLl8pIGB1bmRlZmluZWRgKTtcbiAgICAgICAgZ2VuLnZhcihuYW1lc18xLmRlZmF1bHQucm9vdERhdGEsIG5hbWVzXzEuZGVmYXVsdC5kYXRhKTtcbiAgICAgICAgaWYgKG9wdHMuZHluYW1pY1JlZilcbiAgICAgICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0LmR5bmFtaWNBbmNob3JzLCAoMCwgY29kZWdlbl8xLl8pIGB7fWApO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdG9wU2NoZW1hT2JqQ29kZShpdCkge1xuICAgIGNvbnN0IHsgc2NoZW1hLCBvcHRzLCBnZW4gfSA9IGl0O1xuICAgIHZhbGlkYXRlRnVuY3Rpb24oaXQsICgpID0+IHtcbiAgICAgICAgaWYgKG9wdHMuJGNvbW1lbnQgJiYgc2NoZW1hLiRjb21tZW50KVxuICAgICAgICAgICAgY29tbWVudEtleXdvcmQoaXQpO1xuICAgICAgICBjaGVja05vRGVmYXVsdChpdCk7XG4gICAgICAgIGdlbi5sZXQobmFtZXNfMS5kZWZhdWx0LnZFcnJvcnMsIG51bGwpO1xuICAgICAgICBnZW4ubGV0KG5hbWVzXzEuZGVmYXVsdC5lcnJvcnMsIDApO1xuICAgICAgICBpZiAob3B0cy51bmV2YWx1YXRlZClcbiAgICAgICAgICAgIHJlc2V0RXZhbHVhdGVkKGl0KTtcbiAgICAgICAgdHlwZUFuZEtleXdvcmRzKGl0KTtcbiAgICAgICAgcmV0dXJuUmVzdWx0cyhpdCk7XG4gICAgfSk7XG4gICAgcmV0dXJuO1xufVxuZnVuY3Rpb24gcmVzZXRFdmFsdWF0ZWQoaXQpIHtcbiAgICAvLyBUT0RPIG1heWJlIHNvbWUgaG9vayB0byBleGVjdXRlIGl0IGluIHRoZSBlbmQgdG8gY2hlY2sgd2hldGhlciBwcm9wcy9pdGVtcyBhcmUgTmFtZSwgYXMgaW4gYXNzaWduRXZhbHVhdGVkXG4gICAgY29uc3QgeyBnZW4sIHZhbGlkYXRlTmFtZSB9ID0gaXQ7XG4gICAgaXQuZXZhbHVhdGVkID0gZ2VuLmNvbnN0KFwiZXZhbHVhdGVkXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7dmFsaWRhdGVOYW1lfS5ldmFsdWF0ZWRgKTtcbiAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtpdC5ldmFsdWF0ZWR9LmR5bmFtaWNQcm9wc2AsICgpID0+IGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtpdC5ldmFsdWF0ZWR9LnByb3BzYCwgKDAsIGNvZGVnZW5fMS5fKSBgdW5kZWZpbmVkYCkpO1xuICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2l0LmV2YWx1YXRlZH0uZHluYW1pY0l0ZW1zYCwgKCkgPT4gZ2VuLmFzc2lnbigoMCwgY29kZWdlbl8xLl8pIGAke2l0LmV2YWx1YXRlZH0uaXRlbXNgLCAoMCwgY29kZWdlbl8xLl8pIGB1bmRlZmluZWRgKSk7XG59XG5mdW5jdGlvbiBmdW5jU291cmNlVXJsKHNjaGVtYSwgb3B0cykge1xuICAgIGNvbnN0IHNjaElkID0gdHlwZW9mIHNjaGVtYSA9PSBcIm9iamVjdFwiICYmIHNjaGVtYVtvcHRzLnNjaGVtYUlkXTtcbiAgICByZXR1cm4gc2NoSWQgJiYgKG9wdHMuY29kZS5zb3VyY2UgfHwgb3B0cy5jb2RlLnByb2Nlc3MpID8gKDAsIGNvZGVnZW5fMS5fKSBgLyojIHNvdXJjZVVSTD0ke3NjaElkfSAqL2AgOiBjb2RlZ2VuXzEubmlsO1xufVxuLy8gc2NoZW1hIGNvbXBpbGF0aW9uIC0gdGhpcyBmdW5jdGlvbiBpcyB1c2VkIHJlY3Vyc2l2ZWx5IHRvIGdlbmVyYXRlIGNvZGUgZm9yIHN1Yi1zY2hlbWFzXG5mdW5jdGlvbiBzdWJzY2hlbWFDb2RlKGl0LCB2YWxpZCkge1xuICAgIGlmIChpc1NjaGVtYU9iaihpdCkpIHtcbiAgICAgICAgY2hlY2tLZXl3b3JkcyhpdCk7XG4gICAgICAgIGlmIChzY2hlbWFDeHRIYXNSdWxlcyhpdCkpIHtcbiAgICAgICAgICAgIHN1YlNjaGVtYU9iakNvZGUoaXQsIHZhbGlkKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAoMCwgYm9vbFNjaGVtYV8xLmJvb2xPckVtcHR5U2NoZW1hKShpdCwgdmFsaWQpO1xufVxuZnVuY3Rpb24gc2NoZW1hQ3h0SGFzUnVsZXMoeyBzY2hlbWEsIHNlbGYgfSkge1xuICAgIGlmICh0eXBlb2Ygc2NoZW1hID09IFwiYm9vbGVhblwiKVxuICAgICAgICByZXR1cm4gIXNjaGVtYTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2hlbWEpXG4gICAgICAgIGlmIChzZWxmLlJVTEVTLmFsbFtrZXldKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNTY2hlbWFPYmooaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0LnNjaGVtYSAhPSBcImJvb2xlYW5cIjtcbn1cbmZ1bmN0aW9uIHN1YlNjaGVtYU9iakNvZGUoaXQsIHZhbGlkKSB7XG4gICAgY29uc3QgeyBzY2hlbWEsIGdlbiwgb3B0cyB9ID0gaXQ7XG4gICAgaWYgKG9wdHMuJGNvbW1lbnQgJiYgc2NoZW1hLiRjb21tZW50KVxuICAgICAgICBjb21tZW50S2V5d29yZChpdCk7XG4gICAgdXBkYXRlQ29udGV4dChpdCk7XG4gICAgY2hlY2tBc3luY1NjaGVtYShpdCk7XG4gICAgY29uc3QgZXJyc0NvdW50ID0gZ2VuLmNvbnN0KFwiX2VycnNcIiwgbmFtZXNfMS5kZWZhdWx0LmVycm9ycyk7XG4gICAgdHlwZUFuZEtleXdvcmRzKGl0LCBlcnJzQ291bnQpO1xuICAgIC8vIFRPRE8gdmFyXG4gICAgZ2VuLnZhcih2YWxpZCwgKDAsIGNvZGVnZW5fMS5fKSBgJHtlcnJzQ291bnR9ID09PSAke25hbWVzXzEuZGVmYXVsdC5lcnJvcnN9YCk7XG59XG5mdW5jdGlvbiBjaGVja0tleXdvcmRzKGl0KSB7XG4gICAgKDAsIHV0aWxfMS5jaGVja1Vua25vd25SdWxlcykoaXQpO1xuICAgIGNoZWNrUmVmc0FuZEtleXdvcmRzKGl0KTtcbn1cbmZ1bmN0aW9uIHR5cGVBbmRLZXl3b3JkcyhpdCwgZXJyc0NvdW50KSB7XG4gICAgaWYgKGl0Lm9wdHMuanRkKVxuICAgICAgICByZXR1cm4gc2NoZW1hS2V5d29yZHMoaXQsIFtdLCBmYWxzZSwgZXJyc0NvdW50KTtcbiAgICBjb25zdCB0eXBlcyA9ICgwLCBkYXRhVHlwZV8xLmdldFNjaGVtYVR5cGVzKShpdC5zY2hlbWEpO1xuICAgIGNvbnN0IGNoZWNrZWRUeXBlcyA9ICgwLCBkYXRhVHlwZV8xLmNvZXJjZUFuZENoZWNrRGF0YVR5cGUpKGl0LCB0eXBlcyk7XG4gICAgc2NoZW1hS2V5d29yZHMoaXQsIHR5cGVzLCAhY2hlY2tlZFR5cGVzLCBlcnJzQ291bnQpO1xufVxuZnVuY3Rpb24gY2hlY2tSZWZzQW5kS2V5d29yZHMoaXQpIHtcbiAgICBjb25zdCB7IHNjaGVtYSwgZXJyU2NoZW1hUGF0aCwgb3B0cywgc2VsZiB9ID0gaXQ7XG4gICAgaWYgKHNjaGVtYS4kcmVmICYmIG9wdHMuaWdub3JlS2V5d29yZHNXaXRoUmVmICYmICgwLCB1dGlsXzEuc2NoZW1hSGFzUnVsZXNCdXRSZWYpKHNjaGVtYSwgc2VsZi5SVUxFUykpIHtcbiAgICAgICAgc2VsZi5sb2dnZXIud2FybihgJHJlZjoga2V5d29yZHMgaWdub3JlZCBpbiBzY2hlbWEgYXQgcGF0aCBcIiR7ZXJyU2NoZW1hUGF0aH1cImApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNoZWNrTm9EZWZhdWx0KGl0KSB7XG4gICAgY29uc3QgeyBzY2hlbWEsIG9wdHMgfSA9IGl0O1xuICAgIGlmIChzY2hlbWEuZGVmYXVsdCAhPT0gdW5kZWZpbmVkICYmIG9wdHMudXNlRGVmYXVsdHMgJiYgb3B0cy5zdHJpY3RTY2hlbWEpIHtcbiAgICAgICAgKDAsIHV0aWxfMS5jaGVja1N0cmljdE1vZGUpKGl0LCBcImRlZmF1bHQgaXMgaWdub3JlZCBpbiB0aGUgc2NoZW1hIHJvb3RcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlQ29udGV4dChpdCkge1xuICAgIGNvbnN0IHNjaElkID0gaXQuc2NoZW1hW2l0Lm9wdHMuc2NoZW1hSWRdO1xuICAgIGlmIChzY2hJZClcbiAgICAgICAgaXQuYmFzZUlkID0gKDAsIHJlc29sdmVfMS5yZXNvbHZlVXJsKShpdC5vcHRzLnVyaVJlc29sdmVyLCBpdC5iYXNlSWQsIHNjaElkKTtcbn1cbmZ1bmN0aW9uIGNoZWNrQXN5bmNTY2hlbWEoaXQpIHtcbiAgICBpZiAoaXQuc2NoZW1hLiRhc3luYyAmJiAhaXQuc2NoZW1hRW52LiRhc3luYylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXN5bmMgc2NoZW1hIGluIHN5bmMgc2NoZW1hXCIpO1xufVxuZnVuY3Rpb24gY29tbWVudEtleXdvcmQoeyBnZW4sIHNjaGVtYUVudiwgc2NoZW1hLCBlcnJTY2hlbWFQYXRoLCBvcHRzIH0pIHtcbiAgICBjb25zdCBtc2cgPSBzY2hlbWEuJGNvbW1lbnQ7XG4gICAgaWYgKG9wdHMuJGNvbW1lbnQgPT09IHRydWUpIHtcbiAgICAgICAgZ2VuLmNvZGUoKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQuc2VsZn0ubG9nZ2VyLmxvZygke21zZ30pYCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBvcHRzLiRjb21tZW50ID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjb25zdCBzY2hlbWFQYXRoID0gKDAsIGNvZGVnZW5fMS5zdHIpIGAke2VyclNjaGVtYVBhdGh9LyRjb21tZW50YDtcbiAgICAgICAgY29uc3Qgcm9vdE5hbWUgPSBnZW4uc2NvcGVWYWx1ZShcInJvb3RcIiwgeyByZWY6IHNjaGVtYUVudi5yb290IH0pO1xuICAgICAgICBnZW4uY29kZSgoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC5zZWxmfS5vcHRzLiRjb21tZW50KCR7bXNnfSwgJHtzY2hlbWFQYXRofSwgJHtyb290TmFtZX0uc2NoZW1hKWApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJldHVyblJlc3VsdHMoaXQpIHtcbiAgICBjb25zdCB7IGdlbiwgc2NoZW1hRW52LCB2YWxpZGF0ZU5hbWUsIFZhbGlkYXRpb25FcnJvciwgb3B0cyB9ID0gaXQ7XG4gICAgaWYgKHNjaGVtYUVudi4kYXN5bmMpIHtcbiAgICAgICAgLy8gVE9ETyBhc3NpZ24gdW5ldmFsdWF0ZWRcbiAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LmVycm9yc30gPT09IDBgLCAoKSA9PiBnZW4ucmV0dXJuKG5hbWVzXzEuZGVmYXVsdC5kYXRhKSwgKCkgPT4gZ2VuLnRocm93KCgwLCBjb2RlZ2VuXzEuXykgYG5ldyAke1ZhbGlkYXRpb25FcnJvcn0oJHtuYW1lc18xLmRlZmF1bHQudkVycm9yc30pYCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2VuLmFzc2lnbigoMCwgY29kZWdlbl8xLl8pIGAke3ZhbGlkYXRlTmFtZX0uZXJyb3JzYCwgbmFtZXNfMS5kZWZhdWx0LnZFcnJvcnMpO1xuICAgICAgICBpZiAob3B0cy51bmV2YWx1YXRlZClcbiAgICAgICAgICAgIGFzc2lnbkV2YWx1YXRlZChpdCk7XG4gICAgICAgIGdlbi5yZXR1cm4oKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQuZXJyb3JzfSA9PT0gMGApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2lnbkV2YWx1YXRlZCh7IGdlbiwgZXZhbHVhdGVkLCBwcm9wcywgaXRlbXMgfSkge1xuICAgIGlmIChwcm9wcyBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lKVxuICAgICAgICBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZXZhbHVhdGVkfS5wcm9wc2AsIHByb3BzKTtcbiAgICBpZiAoaXRlbXMgaW5zdGFuY2VvZiBjb2RlZ2VuXzEuTmFtZSlcbiAgICAgICAgZ2VuLmFzc2lnbigoMCwgY29kZWdlbl8xLl8pIGAke2V2YWx1YXRlZH0uaXRlbXNgLCBpdGVtcyk7XG59XG5mdW5jdGlvbiBzY2hlbWFLZXl3b3JkcyhpdCwgdHlwZXMsIHR5cGVFcnJvcnMsIGVycnNDb3VudCkge1xuICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGRhdGEsIGFsbEVycm9ycywgb3B0cywgc2VsZiB9ID0gaXQ7XG4gICAgY29uc3QgeyBSVUxFUyB9ID0gc2VsZjtcbiAgICBpZiAoc2NoZW1hLiRyZWYgJiYgKG9wdHMuaWdub3JlS2V5d29yZHNXaXRoUmVmIHx8ICEoMCwgdXRpbF8xLnNjaGVtYUhhc1J1bGVzQnV0UmVmKShzY2hlbWEsIFJVTEVTKSkpIHtcbiAgICAgICAgZ2VuLmJsb2NrKCgpID0+IGtleXdvcmRDb2RlKGl0LCBcIiRyZWZcIiwgUlVMRVMuYWxsLiRyZWYuZGVmaW5pdGlvbikpOyAvLyBUT0RPIHR5cGVjYXN0XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFvcHRzLmp0ZClcbiAgICAgICAgY2hlY2tTdHJpY3RUeXBlcyhpdCwgdHlwZXMpO1xuICAgIGdlbi5ibG9jaygoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgUlVMRVMucnVsZXMpXG4gICAgICAgICAgICBncm91cEtleXdvcmRzKGdyb3VwKTtcbiAgICAgICAgZ3JvdXBLZXl3b3JkcyhSVUxFUy5wb3N0KTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBncm91cEtleXdvcmRzKGdyb3VwKSB7XG4gICAgICAgIGlmICghKDAsIGFwcGxpY2FiaWxpdHlfMS5zaG91bGRVc2VHcm91cCkoc2NoZW1hLCBncm91cCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChncm91cC50eXBlKSB7XG4gICAgICAgICAgICBnZW4uaWYoKDAsIGRhdGFUeXBlXzIuY2hlY2tEYXRhVHlwZSkoZ3JvdXAudHlwZSwgZGF0YSwgb3B0cy5zdHJpY3ROdW1iZXJzKSk7XG4gICAgICAgICAgICBpdGVyYXRlS2V5d29yZHMoaXQsIGdyb3VwKTtcbiAgICAgICAgICAgIGlmICh0eXBlcy5sZW5ndGggPT09IDEgJiYgdHlwZXNbMF0gPT09IGdyb3VwLnR5cGUgJiYgdHlwZUVycm9ycykge1xuICAgICAgICAgICAgICAgIGdlbi5lbHNlKCk7XG4gICAgICAgICAgICAgICAgKDAsIGRhdGFUeXBlXzIucmVwb3J0VHlwZUVycm9yKShpdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZW4uZW5kSWYoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGl0ZXJhdGVLZXl3b3JkcyhpdCwgZ3JvdXApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE8gbWFrZSBpdCBcIm9rXCIgY2FsbD9cbiAgICAgICAgaWYgKCFhbGxFcnJvcnMpXG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQuZXJyb3JzfSA9PT0gJHtlcnJzQ291bnQgfHwgMH1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpdGVyYXRlS2V5d29yZHMoaXQsIGdyb3VwKSB7XG4gICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgb3B0czogeyB1c2VEZWZhdWx0cyB9LCB9ID0gaXQ7XG4gICAgaWYgKHVzZURlZmF1bHRzKVxuICAgICAgICAoMCwgZGVmYXVsdHNfMS5hc3NpZ25EZWZhdWx0cykoaXQsIGdyb3VwLnR5cGUpO1xuICAgIGdlbi5ibG9jaygoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgcnVsZSBvZiBncm91cC5ydWxlcykge1xuICAgICAgICAgICAgaWYgKCgwLCBhcHBsaWNhYmlsaXR5XzEuc2hvdWxkVXNlUnVsZSkoc2NoZW1hLCBydWxlKSkge1xuICAgICAgICAgICAgICAgIGtleXdvcmRDb2RlKGl0LCBydWxlLmtleXdvcmQsIHJ1bGUuZGVmaW5pdGlvbiwgZ3JvdXAudHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNoZWNrU3RyaWN0VHlwZXMoaXQsIHR5cGVzKSB7XG4gICAgaWYgKGl0LnNjaGVtYUVudi5tZXRhIHx8ICFpdC5vcHRzLnN0cmljdFR5cGVzKVxuICAgICAgICByZXR1cm47XG4gICAgY2hlY2tDb250ZXh0VHlwZXMoaXQsIHR5cGVzKTtcbiAgICBpZiAoIWl0Lm9wdHMuYWxsb3dVbmlvblR5cGVzKVxuICAgICAgICBjaGVja011bHRpcGxlVHlwZXMoaXQsIHR5cGVzKTtcbiAgICBjaGVja0tleXdvcmRUeXBlcyhpdCwgaXQuZGF0YVR5cGVzKTtcbn1cbmZ1bmN0aW9uIGNoZWNrQ29udGV4dFR5cGVzKGl0LCB0eXBlcykge1xuICAgIGlmICghdHlwZXMubGVuZ3RoKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKCFpdC5kYXRhVHlwZXMubGVuZ3RoKSB7XG4gICAgICAgIGl0LmRhdGFUeXBlcyA9IHR5cGVzO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHR5cGVzLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgaWYgKCFpbmNsdWRlc1R5cGUoaXQuZGF0YVR5cGVzLCB0KSkge1xuICAgICAgICAgICAgc3RyaWN0VHlwZXNFcnJvcihpdCwgYHR5cGUgXCIke3R9XCIgbm90IGFsbG93ZWQgYnkgY29udGV4dCBcIiR7aXQuZGF0YVR5cGVzLmpvaW4oXCIsXCIpfVwiYCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBuYXJyb3dTY2hlbWFUeXBlcyhpdCwgdHlwZXMpO1xufVxuZnVuY3Rpb24gY2hlY2tNdWx0aXBsZVR5cGVzKGl0LCB0cykge1xuICAgIGlmICh0cy5sZW5ndGggPiAxICYmICEodHMubGVuZ3RoID09PSAyICYmIHRzLmluY2x1ZGVzKFwibnVsbFwiKSkpIHtcbiAgICAgICAgc3RyaWN0VHlwZXNFcnJvcihpdCwgXCJ1c2UgYWxsb3dVbmlvblR5cGVzIHRvIGFsbG93IHVuaW9uIHR5cGUga2V5d29yZFwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja0tleXdvcmRUeXBlcyhpdCwgdHMpIHtcbiAgICBjb25zdCBydWxlcyA9IGl0LnNlbGYuUlVMRVMuYWxsO1xuICAgIGZvciAoY29uc3Qga2V5d29yZCBpbiBydWxlcykge1xuICAgICAgICBjb25zdCBydWxlID0gcnVsZXNba2V5d29yZF07XG4gICAgICAgIGlmICh0eXBlb2YgcnVsZSA9PSBcIm9iamVjdFwiICYmICgwLCBhcHBsaWNhYmlsaXR5XzEuc2hvdWxkVXNlUnVsZSkoaXQuc2NoZW1hLCBydWxlKSkge1xuICAgICAgICAgICAgY29uc3QgeyB0eXBlIH0gPSBydWxlLmRlZmluaXRpb247XG4gICAgICAgICAgICBpZiAodHlwZS5sZW5ndGggJiYgIXR5cGUuc29tZSgodCkgPT4gaGFzQXBwbGljYWJsZVR5cGUodHMsIHQpKSkge1xuICAgICAgICAgICAgICAgIHN0cmljdFR5cGVzRXJyb3IoaXQsIGBtaXNzaW5nIHR5cGUgXCIke3R5cGUuam9pbihcIixcIil9XCIgZm9yIGtleXdvcmQgXCIke2tleXdvcmR9XCJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGhhc0FwcGxpY2FibGVUeXBlKHNjaFRzLCBrd2RUKSB7XG4gICAgcmV0dXJuIHNjaFRzLmluY2x1ZGVzKGt3ZFQpIHx8IChrd2RUID09PSBcIm51bWJlclwiICYmIHNjaFRzLmluY2x1ZGVzKFwiaW50ZWdlclwiKSk7XG59XG5mdW5jdGlvbiBpbmNsdWRlc1R5cGUodHMsIHQpIHtcbiAgICByZXR1cm4gdHMuaW5jbHVkZXModCkgfHwgKHQgPT09IFwiaW50ZWdlclwiICYmIHRzLmluY2x1ZGVzKFwibnVtYmVyXCIpKTtcbn1cbmZ1bmN0aW9uIG5hcnJvd1NjaGVtYVR5cGVzKGl0LCB3aXRoVHlwZXMpIHtcbiAgICBjb25zdCB0cyA9IFtdO1xuICAgIGZvciAoY29uc3QgdCBvZiBpdC5kYXRhVHlwZXMpIHtcbiAgICAgICAgaWYgKGluY2x1ZGVzVHlwZSh3aXRoVHlwZXMsIHQpKVxuICAgICAgICAgICAgdHMucHVzaCh0KTtcbiAgICAgICAgZWxzZSBpZiAod2l0aFR5cGVzLmluY2x1ZGVzKFwiaW50ZWdlclwiKSAmJiB0ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdHMucHVzaChcImludGVnZXJcIik7XG4gICAgfVxuICAgIGl0LmRhdGFUeXBlcyA9IHRzO1xufVxuZnVuY3Rpb24gc3RyaWN0VHlwZXNFcnJvcihpdCwgbXNnKSB7XG4gICAgY29uc3Qgc2NoZW1hUGF0aCA9IGl0LnNjaGVtYUVudi5iYXNlSWQgKyBpdC5lcnJTY2hlbWFQYXRoO1xuICAgIG1zZyArPSBgIGF0IFwiJHtzY2hlbWFQYXRofVwiIChzdHJpY3RUeXBlcylgO1xuICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgbXNnLCBpdC5vcHRzLnN0cmljdFR5cGVzKTtcbn1cbmNsYXNzIEtleXdvcmRDeHQge1xuICAgIGNvbnN0cnVjdG9yKGl0LCBkZWYsIGtleXdvcmQpIHtcbiAgICAgICAgKDAsIGtleXdvcmRfMS52YWxpZGF0ZUtleXdvcmRVc2FnZSkoaXQsIGRlZiwga2V5d29yZCk7XG4gICAgICAgIHRoaXMuZ2VuID0gaXQuZ2VuO1xuICAgICAgICB0aGlzLmFsbEVycm9ycyA9IGl0LmFsbEVycm9ycztcbiAgICAgICAgdGhpcy5rZXl3b3JkID0ga2V5d29yZDtcbiAgICAgICAgdGhpcy5kYXRhID0gaXQuZGF0YTtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBpdC5zY2hlbWFba2V5d29yZF07XG4gICAgICAgIHRoaXMuJGRhdGEgPSBkZWYuJGRhdGEgJiYgaXQub3B0cy4kZGF0YSAmJiB0aGlzLnNjaGVtYSAmJiB0aGlzLnNjaGVtYS4kZGF0YTtcbiAgICAgICAgdGhpcy5zY2hlbWFWYWx1ZSA9ICgwLCB1dGlsXzEuc2NoZW1hUmVmT3JWYWwpKGl0LCB0aGlzLnNjaGVtYSwga2V5d29yZCwgdGhpcy4kZGF0YSk7XG4gICAgICAgIHRoaXMuc2NoZW1hVHlwZSA9IGRlZi5zY2hlbWFUeXBlO1xuICAgICAgICB0aGlzLnBhcmVudFNjaGVtYSA9IGl0LnNjaGVtYTtcbiAgICAgICAgdGhpcy5wYXJhbXMgPSB7fTtcbiAgICAgICAgdGhpcy5pdCA9IGl0O1xuICAgICAgICB0aGlzLmRlZiA9IGRlZjtcbiAgICAgICAgaWYgKHRoaXMuJGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hQ29kZSA9IGl0Lmdlbi5jb25zdChcInZTY2hlbWFcIiwgZ2V0RGF0YSh0aGlzLiRkYXRhLCBpdCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY2hlbWFDb2RlID0gdGhpcy5zY2hlbWFWYWx1ZTtcbiAgICAgICAgICAgIGlmICghKDAsIGtleXdvcmRfMS52YWxpZFNjaGVtYVR5cGUpKHRoaXMuc2NoZW1hLCBkZWYuc2NoZW1hVHlwZSwgZGVmLmFsbG93VW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtrZXl3b3JkfSB2YWx1ZSBtdXN0IGJlICR7SlNPTi5zdHJpbmdpZnkoZGVmLnNjaGVtYVR5cGUpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChcImNvZGVcIiBpbiBkZWYgPyBkZWYudHJhY2tFcnJvcnMgOiBkZWYuZXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5lcnJzQ291bnQgPSBpdC5nZW4uY29uc3QoXCJfZXJyc1wiLCBuYW1lc18xLmRlZmF1bHQuZXJyb3JzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQoY29uZGl0aW9uLCBzdWNjZXNzQWN0aW9uLCBmYWlsQWN0aW9uKSB7XG4gICAgICAgIHRoaXMuZmFpbFJlc3VsdCgoMCwgY29kZWdlbl8xLm5vdCkoY29uZGl0aW9uKSwgc3VjY2Vzc0FjdGlvbiwgZmFpbEFjdGlvbik7XG4gICAgfVxuICAgIGZhaWxSZXN1bHQoY29uZGl0aW9uLCBzdWNjZXNzQWN0aW9uLCBmYWlsQWN0aW9uKSB7XG4gICAgICAgIHRoaXMuZ2VuLmlmKGNvbmRpdGlvbik7XG4gICAgICAgIGlmIChmYWlsQWN0aW9uKVxuICAgICAgICAgICAgZmFpbEFjdGlvbigpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmVycm9yKCk7XG4gICAgICAgIGlmIChzdWNjZXNzQWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmdlbi5lbHNlKCk7XG4gICAgICAgICAgICBzdWNjZXNzQWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5hbGxFcnJvcnMpXG4gICAgICAgICAgICAgICAgdGhpcy5nZW4uZW5kSWYoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbEVycm9ycylcbiAgICAgICAgICAgICAgICB0aGlzLmdlbi5lbmRJZigpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuLmVsc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXNzKGNvbmRpdGlvbiwgZmFpbEFjdGlvbikge1xuICAgICAgICB0aGlzLmZhaWxSZXN1bHQoKDAsIGNvZGVnZW5fMS5ub3QpKGNvbmRpdGlvbiksIHVuZGVmaW5lZCwgZmFpbEFjdGlvbik7XG4gICAgfVxuICAgIGZhaWwoY29uZGl0aW9uKSB7XG4gICAgICAgIGlmIChjb25kaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvcigpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbEVycm9ycylcbiAgICAgICAgICAgICAgICB0aGlzLmdlbi5pZihmYWxzZSk7IC8vIHRoaXMgYnJhbmNoIHdpbGwgYmUgcmVtb3ZlZCBieSBnZW4ub3B0aW1pemVcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdlbi5pZihjb25kaXRpb24pO1xuICAgICAgICB0aGlzLmVycm9yKCk7XG4gICAgICAgIGlmICh0aGlzLmFsbEVycm9ycylcbiAgICAgICAgICAgIHRoaXMuZ2VuLmVuZElmKCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuZ2VuLmVsc2UoKTtcbiAgICB9XG4gICAgZmFpbCRkYXRhKGNvbmRpdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMuJGRhdGEpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsKGNvbmRpdGlvbik7XG4gICAgICAgIGNvbnN0IHsgc2NoZW1hQ29kZSB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5mYWlsKCgwLCBjb2RlZ2VuXzEuXykgYCR7c2NoZW1hQ29kZX0gIT09IHVuZGVmaW5lZCAmJiAoJHsoMCwgY29kZWdlbl8xLm9yKSh0aGlzLmludmFsaWQkZGF0YSgpLCBjb25kaXRpb24pfSlgKTtcbiAgICB9XG4gICAgZXJyb3IoYXBwZW5kLCBlcnJvclBhcmFtcywgZXJyb3JQYXRocykge1xuICAgICAgICBpZiAoZXJyb3JQYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UGFyYW1zKGVycm9yUGFyYW1zKTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGFwcGVuZCwgZXJyb3JQYXRocyk7XG4gICAgICAgICAgICB0aGlzLnNldFBhcmFtcyh7fSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZXJyb3IoYXBwZW5kLCBlcnJvclBhdGhzKTtcbiAgICB9XG4gICAgX2Vycm9yKGFwcGVuZCwgZXJyb3JQYXRocykge1xuICAgICAgICA7XG4gICAgICAgIChhcHBlbmQgPyBlcnJvcnNfMS5yZXBvcnRFeHRyYUVycm9yIDogZXJyb3JzXzEucmVwb3J0RXJyb3IpKHRoaXMsIHRoaXMuZGVmLmVycm9yLCBlcnJvclBhdGhzKTtcbiAgICB9XG4gICAgJGRhdGFFcnJvcigpIHtcbiAgICAgICAgKDAsIGVycm9yc18xLnJlcG9ydEVycm9yKSh0aGlzLCB0aGlzLmRlZi4kZGF0YUVycm9yIHx8IGVycm9yc18xLmtleXdvcmQkRGF0YUVycm9yKTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmVycnNDb3VudCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZGQgXCJ0cmFja0Vycm9yc1wiIHRvIGtleXdvcmQgZGVmaW5pdGlvbicpO1xuICAgICAgICAoMCwgZXJyb3JzXzEucmVzZXRFcnJvcnNDb3VudCkodGhpcy5nZW4sIHRoaXMuZXJyc0NvdW50KTtcbiAgICB9XG4gICAgb2soY29uZCkge1xuICAgICAgICBpZiAoIXRoaXMuYWxsRXJyb3JzKVxuICAgICAgICAgICAgdGhpcy5nZW4uaWYoY29uZCk7XG4gICAgfVxuICAgIHNldFBhcmFtcyhvYmosIGFzc2lnbikge1xuICAgICAgICBpZiAoYXNzaWduKVxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnBhcmFtcywgb2JqKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5wYXJhbXMgPSBvYmo7XG4gICAgfVxuICAgIGJsb2NrJGRhdGEodmFsaWQsIGNvZGVCbG9jaywgJGRhdGFWYWxpZCA9IGNvZGVnZW5fMS5uaWwpIHtcbiAgICAgICAgdGhpcy5nZW4uYmxvY2soKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGVjayRkYXRhKHZhbGlkLCAkZGF0YVZhbGlkKTtcbiAgICAgICAgICAgIGNvZGVCbG9jaygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2hlY2skZGF0YSh2YWxpZCA9IGNvZGVnZW5fMS5uaWwsICRkYXRhVmFsaWQgPSBjb2RlZ2VuXzEubmlsKSB7XG4gICAgICAgIGlmICghdGhpcy4kZGF0YSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgeyBnZW4sIHNjaGVtYUNvZGUsIHNjaGVtYVR5cGUsIGRlZiB9ID0gdGhpcztcbiAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEub3IpKCgwLCBjb2RlZ2VuXzEuXykgYCR7c2NoZW1hQ29kZX0gPT09IHVuZGVmaW5lZGAsICRkYXRhVmFsaWQpKTtcbiAgICAgICAgaWYgKHZhbGlkICE9PSBjb2RlZ2VuXzEubmlsKVxuICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgdHJ1ZSk7XG4gICAgICAgIGlmIChzY2hlbWFUeXBlLmxlbmd0aCB8fCBkZWYudmFsaWRhdGVTY2hlbWEpIHtcbiAgICAgICAgICAgIGdlbi5lbHNlSWYodGhpcy5pbnZhbGlkJGRhdGEoKSk7XG4gICAgICAgICAgICB0aGlzLiRkYXRhRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICh2YWxpZCAhPT0gY29kZWdlbl8xLm5pbClcbiAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2VuLmVsc2UoKTtcbiAgICB9XG4gICAgaW52YWxpZCRkYXRhKCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgc2NoZW1hQ29kZSwgc2NoZW1hVHlwZSwgZGVmLCBpdCB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEub3IpKHdyb25nJERhdGFUeXBlKCksIGludmFsaWQkRGF0YVNjaGVtYSgpKTtcbiAgICAgICAgZnVuY3Rpb24gd3JvbmckRGF0YVR5cGUoKSB7XG4gICAgICAgICAgICBpZiAoc2NoZW1hVHlwZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgICBpZiAoIShzY2hlbWFDb2RlIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhanYgaW1wbGVtZW50YXRpb24gZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3QgPSBBcnJheS5pc0FycmF5KHNjaGVtYVR5cGUpID8gc2NoZW1hVHlwZSA6IFtzY2hlbWFUeXBlXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5fKSBgJHsoMCwgZGF0YVR5cGVfMi5jaGVja0RhdGFUeXBlcykoc3QsIHNjaGVtYUNvZGUsIGl0Lm9wdHMuc3RyaWN0TnVtYmVycywgZGF0YVR5cGVfMi5EYXRhVHlwZS5Xcm9uZyl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb2RlZ2VuXzEubmlsO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGludmFsaWQkRGF0YVNjaGVtYSgpIHtcbiAgICAgICAgICAgIGlmIChkZWYudmFsaWRhdGVTY2hlbWEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0ZVNjaGVtYVJlZiA9IGdlbi5zY29wZVZhbHVlKFwidmFsaWRhdGUkZGF0YVwiLCB7IHJlZjogZGVmLnZhbGlkYXRlU2NoZW1hIH0pOyAvLyBUT0RPIHZhbHVlLmNvZGUgZm9yIHN0YW5kYWxvbmVcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5fKSBgISR7dmFsaWRhdGVTY2hlbWFSZWZ9KCR7c2NoZW1hQ29kZX0pYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb2RlZ2VuXzEubmlsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN1YnNjaGVtYShhcHBsLCB2YWxpZCkge1xuICAgICAgICBjb25zdCBzdWJzY2hlbWEgPSAoMCwgc3Vic2NoZW1hXzEuZ2V0U3Vic2NoZW1hKSh0aGlzLml0LCBhcHBsKTtcbiAgICAgICAgKDAsIHN1YnNjaGVtYV8xLmV4dGVuZFN1YnNjaGVtYURhdGEpKHN1YnNjaGVtYSwgdGhpcy5pdCwgYXBwbCk7XG4gICAgICAgICgwLCBzdWJzY2hlbWFfMS5leHRlbmRTdWJzY2hlbWFNb2RlKShzdWJzY2hlbWEsIGFwcGwpO1xuICAgICAgICBjb25zdCBuZXh0Q29udGV4dCA9IHsgLi4udGhpcy5pdCwgLi4uc3Vic2NoZW1hLCBpdGVtczogdW5kZWZpbmVkLCBwcm9wczogdW5kZWZpbmVkIH07XG4gICAgICAgIHN1YnNjaGVtYUNvZGUobmV4dENvbnRleHQsIHZhbGlkKTtcbiAgICAgICAgcmV0dXJuIG5leHRDb250ZXh0O1xuICAgIH1cbiAgICBtZXJnZUV2YWx1YXRlZChzY2hlbWFDeHQsIHRvTmFtZSkge1xuICAgICAgICBjb25zdCB7IGl0LCBnZW4gfSA9IHRoaXM7XG4gICAgICAgIGlmICghaXQub3B0cy51bmV2YWx1YXRlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKGl0LnByb3BzICE9PSB0cnVlICYmIHNjaGVtYUN4dC5wcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpdC5wcm9wcyA9IHV0aWxfMS5tZXJnZUV2YWx1YXRlZC5wcm9wcyhnZW4sIHNjaGVtYUN4dC5wcm9wcywgaXQucHJvcHMsIHRvTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0Lml0ZW1zICE9PSB0cnVlICYmIHNjaGVtYUN4dC5pdGVtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpdC5pdGVtcyA9IHV0aWxfMS5tZXJnZUV2YWx1YXRlZC5pdGVtcyhnZW4sIHNjaGVtYUN4dC5pdGVtcywgaXQuaXRlbXMsIHRvTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWVyZ2VWYWxpZEV2YWx1YXRlZChzY2hlbWFDeHQsIHZhbGlkKSB7XG4gICAgICAgIGNvbnN0IHsgaXQsIGdlbiB9ID0gdGhpcztcbiAgICAgICAgaWYgKGl0Lm9wdHMudW5ldmFsdWF0ZWQgJiYgKGl0LnByb3BzICE9PSB0cnVlIHx8IGl0Lml0ZW1zICE9PSB0cnVlKSkge1xuICAgICAgICAgICAgZ2VuLmlmKHZhbGlkLCAoKSA9PiB0aGlzLm1lcmdlRXZhbHVhdGVkKHNjaGVtYUN4dCwgY29kZWdlbl8xLk5hbWUpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5LZXl3b3JkQ3h0ID0gS2V5d29yZEN4dDtcbmZ1bmN0aW9uIGtleXdvcmRDb2RlKGl0LCBrZXl3b3JkLCBkZWYsIHJ1bGVUeXBlKSB7XG4gICAgY29uc3QgY3h0ID0gbmV3IEtleXdvcmRDeHQoaXQsIGRlZiwga2V5d29yZCk7XG4gICAgaWYgKFwiY29kZVwiIGluIGRlZikge1xuICAgICAgICBkZWYuY29kZShjeHQsIHJ1bGVUeXBlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY3h0LiRkYXRhICYmIGRlZi52YWxpZGF0ZSkge1xuICAgICAgICAoMCwga2V5d29yZF8xLmZ1bmNLZXl3b3JkQ29kZSkoY3h0LCBkZWYpO1xuICAgIH1cbiAgICBlbHNlIGlmIChcIm1hY3JvXCIgaW4gZGVmKSB7XG4gICAgICAgICgwLCBrZXl3b3JkXzEubWFjcm9LZXl3b3JkQ29kZSkoY3h0LCBkZWYpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkZWYuY29tcGlsZSB8fCBkZWYudmFsaWRhdGUpIHtcbiAgICAgICAgKDAsIGtleXdvcmRfMS5mdW5jS2V5d29yZENvZGUpKGN4dCwgZGVmKTtcbiAgICB9XG59XG5jb25zdCBKU09OX1BPSU5URVIgPSAvXlxcLyg/Oltefl18fjB8fjEpKiQvO1xuY29uc3QgUkVMQVRJVkVfSlNPTl9QT0lOVEVSID0gL14oWzAtOV0rKSgjfFxcLyg/Oltefl18fjB8fjEpKik/JC87XG5mdW5jdGlvbiBnZXREYXRhKCRkYXRhLCB7IGRhdGFMZXZlbCwgZGF0YU5hbWVzLCBkYXRhUGF0aEFyciB9KSB7XG4gICAgbGV0IGpzb25Qb2ludGVyO1xuICAgIGxldCBkYXRhO1xuICAgIGlmICgkZGF0YSA9PT0gXCJcIilcbiAgICAgICAgcmV0dXJuIG5hbWVzXzEuZGVmYXVsdC5yb290RGF0YTtcbiAgICBpZiAoJGRhdGFbMF0gPT09IFwiL1wiKSB7XG4gICAgICAgIGlmICghSlNPTl9QT0lOVEVSLnRlc3QoJGRhdGEpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEpTT04tcG9pbnRlcjogJHskZGF0YX1gKTtcbiAgICAgICAganNvblBvaW50ZXIgPSAkZGF0YTtcbiAgICAgICAgZGF0YSA9IG5hbWVzXzEuZGVmYXVsdC5yb290RGF0YTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBSRUxBVElWRV9KU09OX1BPSU5URVIuZXhlYygkZGF0YSk7XG4gICAgICAgIGlmICghbWF0Y2hlcylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBKU09OLXBvaW50ZXI6ICR7JGRhdGF9YCk7XG4gICAgICAgIGNvbnN0IHVwID0gK21hdGNoZXNbMV07XG4gICAgICAgIGpzb25Qb2ludGVyID0gbWF0Y2hlc1syXTtcbiAgICAgICAgaWYgKGpzb25Qb2ludGVyID09PSBcIiNcIikge1xuICAgICAgICAgICAgaWYgKHVwID49IGRhdGFMZXZlbClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2coXCJwcm9wZXJ0eS9pbmRleFwiLCB1cCkpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFQYXRoQXJyW2RhdGFMZXZlbCAtIHVwXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXAgPiBkYXRhTGV2ZWwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2coXCJkYXRhXCIsIHVwKSk7XG4gICAgICAgIGRhdGEgPSBkYXRhTmFtZXNbZGF0YUxldmVsIC0gdXBdO1xuICAgICAgICBpZiAoIWpzb25Qb2ludGVyKVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGxldCBleHByID0gZGF0YTtcbiAgICBjb25zdCBzZWdtZW50cyA9IGpzb25Qb2ludGVyLnNwbGl0KFwiL1wiKTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICAgIGRhdGEgPSAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9JHsoMCwgY29kZWdlbl8xLmdldFByb3BlcnR5KSgoMCwgdXRpbF8xLnVuZXNjYXBlSnNvblBvaW50ZXIpKHNlZ21lbnQpKX1gO1xuICAgICAgICAgICAgZXhwciA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZXhwcn0gJiYgJHtkYXRhfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV4cHI7XG4gICAgZnVuY3Rpb24gZXJyb3JNc2cocG9pbnRlclR5cGUsIHVwKSB7XG4gICAgICAgIHJldHVybiBgQ2Fubm90IGFjY2VzcyAke3BvaW50ZXJUeXBlfSAke3VwfSBsZXZlbHMgdXAsIGN1cnJlbnQgbGV2ZWwgaXMgJHtkYXRhTGV2ZWx9YDtcbiAgICB9XG59XG5leHBvcnRzLmdldERhdGEgPSBnZXREYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/keyword.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/keyword.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names_1 = __webpack_require__(/*! ../names */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/names.js\");\nconst code_1 = __webpack_require__(/*! ../../vocabularies/code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/errors.js\");\nfunction macroKeywordCode(cxt, def) {\n    const { gen, keyword, schema, parentSchema, it } = cxt;\n    const macroSchema = def.macro.call(it.self, schema, parentSchema, it);\n    const schemaRef = useKeyword(gen, keyword, macroSchema);\n    if (it.opts.validateSchema !== false)\n        it.self.validateSchema(macroSchema, true);\n    const valid = gen.name(\"valid\");\n    cxt.subschema({\n        schema: macroSchema,\n        schemaPath: codegen_1.nil,\n        errSchemaPath: `${it.errSchemaPath}/${keyword}`,\n        topSchemaRef: schemaRef,\n        compositeRule: true,\n    }, valid);\n    cxt.pass(valid, () => cxt.error(true));\n}\nexports.macroKeywordCode = macroKeywordCode;\nfunction funcKeywordCode(cxt, def) {\n    var _a;\n    const { gen, keyword, schema, parentSchema, $data, it } = cxt;\n    checkAsyncKeyword(it, def);\n    const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;\n    const validateRef = useKeyword(gen, keyword, validate);\n    const valid = gen.let(\"valid\");\n    cxt.block$data(valid, validateKeyword);\n    cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);\n    function validateKeyword() {\n        if (def.errors === false) {\n            assignValid();\n            if (def.modifying)\n                modifyData(cxt);\n            reportErrs(() => cxt.error());\n        }\n        else {\n            const ruleErrs = def.async ? validateAsync() : validateSync();\n            if (def.modifying)\n                modifyData(cxt);\n            reportErrs(() => addErrs(cxt, ruleErrs));\n        }\n    }\n    function validateAsync() {\n        const ruleErrs = gen.let(\"ruleErrs\", null);\n        gen.try(() => assignValid((0, codegen_1._) `await `), (e) => gen.assign(valid, false).if((0, codegen_1._) `${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._) `${e}.errors`), () => gen.throw(e)));\n        return ruleErrs;\n    }\n    function validateSync() {\n        const validateErrs = (0, codegen_1._) `${validateRef}.errors`;\n        gen.assign(validateErrs, null);\n        assignValid(codegen_1.nil);\n        return validateErrs;\n    }\n    function assignValid(_await = def.async ? (0, codegen_1._) `await ` : codegen_1.nil) {\n        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;\n        const passSchema = !((\"compile\" in def && !$data) || def.schema === false);\n        gen.assign(valid, (0, codegen_1._) `${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);\n    }\n    function reportErrs(errors) {\n        var _a;\n        gen.if((0, codegen_1.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);\n    }\n}\nexports.funcKeywordCode = funcKeywordCode;\nfunction modifyData(cxt) {\n    const { gen, data, it } = cxt;\n    gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._) `${it.parentData}[${it.parentDataProperty}]`));\n}\nfunction addErrs(cxt, errs) {\n    const { gen } = cxt;\n    gen.if((0, codegen_1._) `Array.isArray(${errs})`, () => {\n        gen\n            .assign(names_1.default.vErrors, (0, codegen_1._) `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`)\n            .assign(names_1.default.errors, (0, codegen_1._) `${names_1.default.vErrors}.length`);\n        (0, errors_1.extendErrors)(cxt);\n    }, () => cxt.error());\n}\nfunction checkAsyncKeyword({ schemaEnv }, def) {\n    if (def.async && !schemaEnv.$async)\n        throw new Error(\"async keyword in sync schema\");\n}\nfunction useKeyword(gen, keyword, result) {\n    if (result === undefined)\n        throw new Error(`keyword \"${keyword}\" failed to compile`);\n    return gen.scopeValue(\"keyword\", typeof result == \"function\" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });\n}\nfunction validSchemaType(schema, schemaType, allowUndefined = false) {\n    // TODO add tests\n    return (!schemaType.length ||\n        schemaType.some((st) => st === \"array\"\n            ? Array.isArray(schema)\n            : st === \"object\"\n                ? schema && typeof schema == \"object\" && !Array.isArray(schema)\n                : typeof schema == st || (allowUndefined && typeof schema == \"undefined\")));\n}\nexports.validSchemaType = validSchemaType;\nfunction validateKeywordUsage({ schema, opts, self, errSchemaPath }, def, keyword) {\n    /* istanbul ignore if */\n    if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {\n        throw new Error(\"ajv implementation error\");\n    }\n    const deps = def.dependencies;\n    if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {\n        throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(\",\")}`);\n    }\n    if (def.validateSchema) {\n        const valid = def.validateSchema(schema[keyword]);\n        if (!valid) {\n            const msg = `keyword \"${keyword}\" value is invalid at path \"${errSchemaPath}\": ` +\n                self.errorsText(def.validateSchema.errors);\n            if (opts.validateSchema === \"log\")\n                self.logger.error(msg);\n            else\n                throw new Error(msg);\n        }\n    }\n}\nexports.validateKeywordUsage = validateKeywordUsage;\n//# sourceMappingURL=keyword.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/keyword.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/subschema.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/subschema.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nfunction getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {\n    if (keyword !== undefined && schema !== undefined) {\n        throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n    }\n    if (keyword !== undefined) {\n        const sch = it.schema[keyword];\n        return schemaProp === undefined\n            ? {\n                schema: sch,\n                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,\n                errSchemaPath: `${it.errSchemaPath}/${keyword}`,\n            }\n            : {\n                schema: sch[schemaProp],\n                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,\n                errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`,\n            };\n    }\n    if (schema !== undefined) {\n        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n            throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n        }\n        return {\n            schema,\n            schemaPath,\n            topSchemaRef,\n            errSchemaPath,\n        };\n    }\n    throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\nexports.getSubschema = getSubschema;\nfunction extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {\n    if (data !== undefined && dataProp !== undefined) {\n        throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n    }\n    const { gen } = it;\n    if (dataProp !== undefined) {\n        const { errorPath, dataPathArr, opts } = it;\n        const nextData = gen.let(\"data\", (0, codegen_1._) `${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);\n        dataContextProps(nextData);\n        subschema.errorPath = (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;\n        subschema.parentDataProperty = (0, codegen_1._) `${dataProp}`;\n        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];\n    }\n    if (data !== undefined) {\n        const nextData = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n        dataContextProps(nextData);\n        if (propertyName !== undefined)\n            subschema.propertyName = propertyName;\n        // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n    }\n    if (dataTypes)\n        subschema.dataTypes = dataTypes;\n    function dataContextProps(_nextData) {\n        subschema.data = _nextData;\n        subschema.dataLevel = it.dataLevel + 1;\n        subschema.dataTypes = [];\n        it.definedProperties = new Set();\n        subschema.parentData = it.data;\n        subschema.dataNames = [...it.dataNames, _nextData];\n    }\n}\nexports.extendSubschemaData = extendSubschemaData;\nfunction extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {\n    if (compositeRule !== undefined)\n        subschema.compositeRule = compositeRule;\n    if (createErrors !== undefined)\n        subschema.createErrors = createErrors;\n    if (allErrors !== undefined)\n        subschema.allErrors = allErrors;\n    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n    subschema.jtdMetadata = jtdMetadata; // not inherited\n}\nexports.extendSubschemaMode = extendSubschemaMode;\n//# sourceMappingURL=subschema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvc3Vic2NoZW1hLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQixHQUFHLDJCQUEyQixHQUFHLG9CQUFvQjtBQUNoRixrQkFBa0IsbUJBQU8sQ0FBQyxrSEFBWTtBQUN0QyxlQUFlLG1CQUFPLENBQUMsc0dBQVM7QUFDaEMsNEJBQTRCLHNFQUFzRTtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGNBQWMsRUFBRSxvQ0FBb0M7QUFDcEcsa0NBQWtDLGlCQUFpQixHQUFHLFFBQVE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGNBQWMsRUFBRSxvQ0FBb0MsRUFBRSx1Q0FBdUM7QUFDN0ksa0NBQWtDLGlCQUFpQixHQUFHLFFBQVEsR0FBRyx1Q0FBdUM7QUFDeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCLDhDQUE4QywrREFBK0Q7QUFDN0c7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0EsZ0JBQWdCLCtCQUErQjtBQUMvQyw2REFBNkQsUUFBUSxFQUFFLHFDQUFxQztBQUM1RztBQUNBLG9EQUFvRCxVQUFVLEVBQUUsa0VBQWtFO0FBQ2xJLDJEQUEyRCxTQUFTO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLDhGQUE4RjtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiwwQ0FBMEMsdUVBQXVFO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRCx5Q0FBeUM7QUFDekM7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3ZhbGlkYXRlL3N1YnNjaGVtYS5qcz9hNmQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leHRlbmRTdWJzY2hlbWFNb2RlID0gZXhwb3J0cy5leHRlbmRTdWJzY2hlbWFEYXRhID0gZXhwb3J0cy5nZXRTdWJzY2hlbWEgPSB2b2lkIDA7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuZnVuY3Rpb24gZ2V0U3Vic2NoZW1hKGl0LCB7IGtleXdvcmQsIHNjaGVtYVByb3AsIHNjaGVtYSwgc2NoZW1hUGF0aCwgZXJyU2NoZW1hUGF0aCwgdG9wU2NoZW1hUmVmIH0pIHtcbiAgICBpZiAoa2V5d29yZCAhPT0gdW5kZWZpbmVkICYmIHNjaGVtYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYm90aCBcImtleXdvcmRcIiBhbmQgXCJzY2hlbWFcIiBwYXNzZWQsIG9ubHkgb25lIGFsbG93ZWQnKTtcbiAgICB9XG4gICAgaWYgKGtleXdvcmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBzY2ggPSBpdC5zY2hlbWFba2V5d29yZF07XG4gICAgICAgIHJldHVybiBzY2hlbWFQcm9wID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIHNjaGVtYTogc2NoLFxuICAgICAgICAgICAgICAgIHNjaGVtYVBhdGg6ICgwLCBjb2RlZ2VuXzEuXykgYCR7aXQuc2NoZW1hUGF0aH0keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKGtleXdvcmQpfWAsXG4gICAgICAgICAgICAgICAgZXJyU2NoZW1hUGF0aDogYCR7aXQuZXJyU2NoZW1hUGF0aH0vJHtrZXl3b3JkfWAsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICBzY2hlbWE6IHNjaFtzY2hlbWFQcm9wXSxcbiAgICAgICAgICAgICAgICBzY2hlbWFQYXRoOiAoMCwgY29kZWdlbl8xLl8pIGAke2l0LnNjaGVtYVBhdGh9JHsoMCwgY29kZWdlbl8xLmdldFByb3BlcnR5KShrZXl3b3JkKX0keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKHNjaGVtYVByb3ApfWAsXG4gICAgICAgICAgICAgICAgZXJyU2NoZW1hUGF0aDogYCR7aXQuZXJyU2NoZW1hUGF0aH0vJHtrZXl3b3JkfS8keygwLCB1dGlsXzEuZXNjYXBlRnJhZ21lbnQpKHNjaGVtYVByb3ApfWAsXG4gICAgICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoc2NoZW1hICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHNjaGVtYVBhdGggPT09IHVuZGVmaW5lZCB8fCBlcnJTY2hlbWFQYXRoID09PSB1bmRlZmluZWQgfHwgdG9wU2NoZW1hUmVmID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJzY2hlbWFQYXRoXCIsIFwiZXJyU2NoZW1hUGF0aFwiIGFuZCBcInRvcFNjaGVtYVJlZlwiIGFyZSByZXF1aXJlZCB3aXRoIFwic2NoZW1hXCInKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgICAgc2NoZW1hUGF0aCxcbiAgICAgICAgICAgIHRvcFNjaGVtYVJlZixcbiAgICAgICAgICAgIGVyclNjaGVtYVBhdGgsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignZWl0aGVyIFwia2V5d29yZFwiIG9yIFwic2NoZW1hXCIgbXVzdCBiZSBwYXNzZWQnKTtcbn1cbmV4cG9ydHMuZ2V0U3Vic2NoZW1hID0gZ2V0U3Vic2NoZW1hO1xuZnVuY3Rpb24gZXh0ZW5kU3Vic2NoZW1hRGF0YShzdWJzY2hlbWEsIGl0LCB7IGRhdGFQcm9wLCBkYXRhUHJvcFR5cGU6IGRwVHlwZSwgZGF0YSwgZGF0YVR5cGVzLCBwcm9wZXJ0eU5hbWUgfSkge1xuICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQgJiYgZGF0YVByb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JvdGggXCJkYXRhXCIgYW5kIFwiZGF0YVByb3BcIiBwYXNzZWQsIG9ubHkgb25lIGFsbG93ZWQnKTtcbiAgICB9XG4gICAgY29uc3QgeyBnZW4gfSA9IGl0O1xuICAgIGlmIChkYXRhUHJvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHsgZXJyb3JQYXRoLCBkYXRhUGF0aEFyciwgb3B0cyB9ID0gaXQ7XG4gICAgICAgIGNvbnN0IG5leHREYXRhID0gZ2VuLmxldChcImRhdGFcIiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtpdC5kYXRhfSR7KDAsIGNvZGVnZW5fMS5nZXRQcm9wZXJ0eSkoZGF0YVByb3ApfWAsIHRydWUpO1xuICAgICAgICBkYXRhQ29udGV4dFByb3BzKG5leHREYXRhKTtcbiAgICAgICAgc3Vic2NoZW1hLmVycm9yUGF0aCA9ICgwLCBjb2RlZ2VuXzEuc3RyKSBgJHtlcnJvclBhdGh9JHsoMCwgdXRpbF8xLmdldEVycm9yUGF0aCkoZGF0YVByb3AsIGRwVHlwZSwgb3B0cy5qc1Byb3BlcnR5U3ludGF4KX1gO1xuICAgICAgICBzdWJzY2hlbWEucGFyZW50RGF0YVByb3BlcnR5ID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhUHJvcH1gO1xuICAgICAgICBzdWJzY2hlbWEuZGF0YVBhdGhBcnIgPSBbLi4uZGF0YVBhdGhBcnIsIHN1YnNjaGVtYS5wYXJlbnREYXRhUHJvcGVydHldO1xuICAgIH1cbiAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IG5leHREYXRhID0gZGF0YSBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lID8gZGF0YSA6IGdlbi5sZXQoXCJkYXRhXCIsIGRhdGEsIHRydWUpOyAvLyByZXBsYWNlYWJsZSBpZiB1c2VkIG9uY2U/XG4gICAgICAgIGRhdGFDb250ZXh0UHJvcHMobmV4dERhdGEpO1xuICAgICAgICBpZiAocHJvcGVydHlOYW1lICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBzdWJzY2hlbWEucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuICAgICAgICAvLyBUT0RPIHNvbWV0aGluZyBpcyBwb3NzaWJseSB3cm9uZyBoZXJlIHdpdGggbm90IGNoYW5naW5nIHBhcmVudERhdGFQcm9wZXJ0eSBhbmQgbm90IGFwcGVuZGluZyBkYXRhUGF0aEFyclxuICAgIH1cbiAgICBpZiAoZGF0YVR5cGVzKVxuICAgICAgICBzdWJzY2hlbWEuZGF0YVR5cGVzID0gZGF0YVR5cGVzO1xuICAgIGZ1bmN0aW9uIGRhdGFDb250ZXh0UHJvcHMoX25leHREYXRhKSB7XG4gICAgICAgIHN1YnNjaGVtYS5kYXRhID0gX25leHREYXRhO1xuICAgICAgICBzdWJzY2hlbWEuZGF0YUxldmVsID0gaXQuZGF0YUxldmVsICsgMTtcbiAgICAgICAgc3Vic2NoZW1hLmRhdGFUeXBlcyA9IFtdO1xuICAgICAgICBpdC5kZWZpbmVkUHJvcGVydGllcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgc3Vic2NoZW1hLnBhcmVudERhdGEgPSBpdC5kYXRhO1xuICAgICAgICBzdWJzY2hlbWEuZGF0YU5hbWVzID0gWy4uLml0LmRhdGFOYW1lcywgX25leHREYXRhXTtcbiAgICB9XG59XG5leHBvcnRzLmV4dGVuZFN1YnNjaGVtYURhdGEgPSBleHRlbmRTdWJzY2hlbWFEYXRhO1xuZnVuY3Rpb24gZXh0ZW5kU3Vic2NoZW1hTW9kZShzdWJzY2hlbWEsIHsganRkRGlzY3JpbWluYXRvciwganRkTWV0YWRhdGEsIGNvbXBvc2l0ZVJ1bGUsIGNyZWF0ZUVycm9ycywgYWxsRXJyb3JzIH0pIHtcbiAgICBpZiAoY29tcG9zaXRlUnVsZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBzdWJzY2hlbWEuY29tcG9zaXRlUnVsZSA9IGNvbXBvc2l0ZVJ1bGU7XG4gICAgaWYgKGNyZWF0ZUVycm9ycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBzdWJzY2hlbWEuY3JlYXRlRXJyb3JzID0gY3JlYXRlRXJyb3JzO1xuICAgIGlmIChhbGxFcnJvcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgc3Vic2NoZW1hLmFsbEVycm9ycyA9IGFsbEVycm9ycztcbiAgICBzdWJzY2hlbWEuanRkRGlzY3JpbWluYXRvciA9IGp0ZERpc2NyaW1pbmF0b3I7IC8vIG5vdCBpbmhlcml0ZWRcbiAgICBzdWJzY2hlbWEuanRkTWV0YWRhdGEgPSBqdGRNZXRhZGF0YTsgLy8gbm90IGluaGVyaXRlZFxufVxuZXhwb3J0cy5leHRlbmRTdWJzY2hlbWFNb2RlID0gZXh0ZW5kU3Vic2NoZW1hTW9kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjaGVtYS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/subschema.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/core.js":
/*!********************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/core.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;\nvar validate_1 = __webpack_require__(/*! ./compile/validate */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/index.js\");\nObject.defineProperty(exports, \"KeywordCxt\", ({ enumerable: true, get: function () { return validate_1.KeywordCxt; } }));\nvar codegen_1 = __webpack_require__(/*! ./compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nObject.defineProperty(exports, \"_\", ({ enumerable: true, get: function () { return codegen_1._; } }));\nObject.defineProperty(exports, \"str\", ({ enumerable: true, get: function () { return codegen_1.str; } }));\nObject.defineProperty(exports, \"stringify\", ({ enumerable: true, get: function () { return codegen_1.stringify; } }));\nObject.defineProperty(exports, \"nil\", ({ enumerable: true, get: function () { return codegen_1.nil; } }));\nObject.defineProperty(exports, \"Name\", ({ enumerable: true, get: function () { return codegen_1.Name; } }));\nObject.defineProperty(exports, \"CodeGen\", ({ enumerable: true, get: function () { return codegen_1.CodeGen; } }));\nconst validation_error_1 = __webpack_require__(/*! ./runtime/validation_error */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/validation_error.js\");\nconst ref_error_1 = __webpack_require__(/*! ./compile/ref_error */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/ref_error.js\");\nconst rules_1 = __webpack_require__(/*! ./compile/rules */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/rules.js\");\nconst compile_1 = __webpack_require__(/*! ./compile */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/index.js\");\nconst codegen_2 = __webpack_require__(/*! ./compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst resolve_1 = __webpack_require__(/*! ./compile/resolve */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/resolve.js\");\nconst dataType_1 = __webpack_require__(/*! ./compile/validate/dataType */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/dataType.js\");\nconst util_1 = __webpack_require__(/*! ./compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst $dataRefSchema = __webpack_require__(/*! ./refs/data.json */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/refs/data.json\");\nconst uri_1 = __webpack_require__(/*! ./runtime/uri */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/uri.js\");\nconst defaultRegExp = (str, flags) => new RegExp(str, flags);\ndefaultRegExp.code = \"new RegExp\";\nconst META_IGNORE_OPTIONS = [\"removeAdditional\", \"useDefaults\", \"coerceTypes\"];\nconst EXT_SCOPE_NAMES = new Set([\n    \"validate\",\n    \"serialize\",\n    \"parse\",\n    \"wrapper\",\n    \"root\",\n    \"schema\",\n    \"keyword\",\n    \"pattern\",\n    \"formats\",\n    \"validate$data\",\n    \"func\",\n    \"obj\",\n    \"Error\",\n]);\nconst removedOptions = {\n    errorDataPath: \"\",\n    format: \"`validateFormats: false` can be used instead.\",\n    nullable: '\"nullable\" keyword is supported by default.',\n    jsonPointers: \"Deprecated jsPropertySyntax can be used instead.\",\n    extendRefs: \"Deprecated ignoreKeywordsWithRef can be used instead.\",\n    missingRefs: \"Pass empty schema with $id that should be ignored to ajv.addSchema.\",\n    processCode: \"Use option `code: {process: (code, schemaEnv: object) => string}`\",\n    sourceCode: \"Use option `code: {source: true}`\",\n    strictDefaults: \"It is default now, see option `strict`.\",\n    strictKeywords: \"It is default now, see option `strict`.\",\n    uniqueItems: '\"uniqueItems\" keyword is always validated.',\n    unknownFormats: \"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).\",\n    cache: \"Map is used as cache, schema object as key.\",\n    serialize: \"Map is used as cache, schema object as key.\",\n    ajvErrors: \"It is default now.\",\n};\nconst deprecatedOptions = {\n    ignoreKeywordsWithRef: \"\",\n    jsPropertySyntax: \"\",\n    unicode: '\"minLength\"/\"maxLength\" account for unicode characters by default.',\n};\nconst MAX_EXPRESSION = 200;\n// eslint-disable-next-line complexity\nfunction requiredOptions(o) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;\n    const s = o.strict;\n    const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;\n    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;\n    const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;\n    const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;\n    return {\n        strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,\n        strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,\n        strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : \"log\",\n        strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : \"log\",\n        strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,\n        code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },\n        loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,\n        loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,\n        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,\n        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,\n        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,\n        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : \"$id\",\n        addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,\n        validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,\n        validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,\n        unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,\n        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,\n        uriResolver: uriResolver,\n    };\n}\nclass Ajv {\n    constructor(opts = {}) {\n        this.schemas = {};\n        this.refs = {};\n        this.formats = {};\n        this._compilations = new Set();\n        this._loading = {};\n        this._cache = new Map();\n        opts = this.opts = { ...opts, ...requiredOptions(opts) };\n        const { es5, lines } = this.opts.code;\n        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });\n        this.logger = getLogger(opts.logger);\n        const formatOpt = opts.validateFormats;\n        opts.validateFormats = false;\n        this.RULES = (0, rules_1.getRules)();\n        checkOptions.call(this, removedOptions, opts, \"NOT SUPPORTED\");\n        checkOptions.call(this, deprecatedOptions, opts, \"DEPRECATED\", \"warn\");\n        this._metaOpts = getMetaSchemaOptions.call(this);\n        if (opts.formats)\n            addInitialFormats.call(this);\n        this._addVocabularies();\n        this._addDefaultMetaSchema();\n        if (opts.keywords)\n            addInitialKeywords.call(this, opts.keywords);\n        if (typeof opts.meta == \"object\")\n            this.addMetaSchema(opts.meta);\n        addInitialSchemas.call(this);\n        opts.validateFormats = formatOpt;\n    }\n    _addVocabularies() {\n        this.addKeyword(\"$async\");\n    }\n    _addDefaultMetaSchema() {\n        const { $data, meta, schemaId } = this.opts;\n        let _dataRefSchema = $dataRefSchema;\n        if (schemaId === \"id\") {\n            _dataRefSchema = { ...$dataRefSchema };\n            _dataRefSchema.id = _dataRefSchema.$id;\n            delete _dataRefSchema.$id;\n        }\n        if (meta && $data)\n            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);\n    }\n    defaultMeta() {\n        const { meta, schemaId } = this.opts;\n        return (this.opts.defaultMeta = typeof meta == \"object\" ? meta[schemaId] || meta : undefined);\n    }\n    validate(schemaKeyRef, // key, ref or schema object\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    data // to be validated\n    ) {\n        let v;\n        if (typeof schemaKeyRef == \"string\") {\n            v = this.getSchema(schemaKeyRef);\n            if (!v)\n                throw new Error(`no schema with key or ref \"${schemaKeyRef}\"`);\n        }\n        else {\n            v = this.compile(schemaKeyRef);\n        }\n        const valid = v(data);\n        if (!(\"$async\" in v))\n            this.errors = v.errors;\n        return valid;\n    }\n    compile(schema, _meta) {\n        const sch = this._addSchema(schema, _meta);\n        return (sch.validate || this._compileSchemaEnv(sch));\n    }\n    compileAsync(schema, meta) {\n        if (typeof this.opts.loadSchema != \"function\") {\n            throw new Error(\"options.loadSchema should be a function\");\n        }\n        const { loadSchema } = this.opts;\n        return runCompileAsync.call(this, schema, meta);\n        async function runCompileAsync(_schema, _meta) {\n            await loadMetaSchema.call(this, _schema.$schema);\n            const sch = this._addSchema(_schema, _meta);\n            return sch.validate || _compileAsync.call(this, sch);\n        }\n        async function loadMetaSchema($ref) {\n            if ($ref && !this.getSchema($ref)) {\n                await runCompileAsync.call(this, { $ref }, true);\n            }\n        }\n        async function _compileAsync(sch) {\n            try {\n                return this._compileSchemaEnv(sch);\n            }\n            catch (e) {\n                if (!(e instanceof ref_error_1.default))\n                    throw e;\n                checkLoaded.call(this, e);\n                await loadMissingSchema.call(this, e.missingSchema);\n                return _compileAsync.call(this, sch);\n            }\n        }\n        function checkLoaded({ missingSchema: ref, missingRef }) {\n            if (this.refs[ref]) {\n                throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);\n            }\n        }\n        async function loadMissingSchema(ref) {\n            const _schema = await _loadSchema.call(this, ref);\n            if (!this.refs[ref])\n                await loadMetaSchema.call(this, _schema.$schema);\n            if (!this.refs[ref])\n                this.addSchema(_schema, ref, meta);\n        }\n        async function _loadSchema(ref) {\n            const p = this._loading[ref];\n            if (p)\n                return p;\n            try {\n                return await (this._loading[ref] = loadSchema(ref));\n            }\n            finally {\n                delete this._loading[ref];\n            }\n        }\n    }\n    // Adds schema to the instance\n    addSchema(schema, // If array is passed, `key` will be ignored\n    key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n    _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n    _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.\n    ) {\n        if (Array.isArray(schema)) {\n            for (const sch of schema)\n                this.addSchema(sch, undefined, _meta, _validateSchema);\n            return this;\n        }\n        let id;\n        if (typeof schema === \"object\") {\n            const { schemaId } = this.opts;\n            id = schema[schemaId];\n            if (id !== undefined && typeof id != \"string\") {\n                throw new Error(`schema ${schemaId} must be string`);\n            }\n        }\n        key = (0, resolve_1.normalizeId)(key || id);\n        this._checkUnique(key);\n        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);\n        return this;\n    }\n    // Add schema that will be used to validate other schemas\n    // options in META_IGNORE_OPTIONS are alway set to false\n    addMetaSchema(schema, key, // schema key\n    _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema\n    ) {\n        this.addSchema(schema, key, true, _validateSchema);\n        return this;\n    }\n    //  Validate schema against its meta-schema\n    validateSchema(schema, throwOrLogError) {\n        if (typeof schema == \"boolean\")\n            return true;\n        let $schema;\n        $schema = schema.$schema;\n        if ($schema !== undefined && typeof $schema != \"string\") {\n            throw new Error(\"$schema must be a string\");\n        }\n        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();\n        if (!$schema) {\n            this.logger.warn(\"meta-schema not available\");\n            this.errors = null;\n            return true;\n        }\n        const valid = this.validate($schema, schema);\n        if (!valid && throwOrLogError) {\n            const message = \"schema is invalid: \" + this.errorsText();\n            if (this.opts.validateSchema === \"log\")\n                this.logger.error(message);\n            else\n                throw new Error(message);\n        }\n        return valid;\n    }\n    // Get compiled schema by `key` or `ref`.\n    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)\n    getSchema(keyRef) {\n        let sch;\n        while (typeof (sch = getSchEnv.call(this, keyRef)) == \"string\")\n            keyRef = sch;\n        if (sch === undefined) {\n            const { schemaId } = this.opts;\n            const root = new compile_1.SchemaEnv({ schema: {}, schemaId });\n            sch = compile_1.resolveSchema.call(this, root, keyRef);\n            if (!sch)\n                return;\n            this.refs[keyRef] = sch;\n        }\n        return (sch.validate || this._compileSchemaEnv(sch));\n    }\n    // Remove cached schema(s).\n    // If no parameter is passed all schemas but meta-schemas are removed.\n    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n    removeSchema(schemaKeyRef) {\n        if (schemaKeyRef instanceof RegExp) {\n            this._removeAllSchemas(this.schemas, schemaKeyRef);\n            this._removeAllSchemas(this.refs, schemaKeyRef);\n            return this;\n        }\n        switch (typeof schemaKeyRef) {\n            case \"undefined\":\n                this._removeAllSchemas(this.schemas);\n                this._removeAllSchemas(this.refs);\n                this._cache.clear();\n                return this;\n            case \"string\": {\n                const sch = getSchEnv.call(this, schemaKeyRef);\n                if (typeof sch == \"object\")\n                    this._cache.delete(sch.schema);\n                delete this.schemas[schemaKeyRef];\n                delete this.refs[schemaKeyRef];\n                return this;\n            }\n            case \"object\": {\n                const cacheKey = schemaKeyRef;\n                this._cache.delete(cacheKey);\n                let id = schemaKeyRef[this.opts.schemaId];\n                if (id) {\n                    id = (0, resolve_1.normalizeId)(id);\n                    delete this.schemas[id];\n                    delete this.refs[id];\n                }\n                return this;\n            }\n            default:\n                throw new Error(\"ajv.removeSchema: invalid parameter\");\n        }\n    }\n    // add \"vocabulary\" - a collection of keywords\n    addVocabulary(definitions) {\n        for (const def of definitions)\n            this.addKeyword(def);\n        return this;\n    }\n    addKeyword(kwdOrDef, def // deprecated\n    ) {\n        let keyword;\n        if (typeof kwdOrDef == \"string\") {\n            keyword = kwdOrDef;\n            if (typeof def == \"object\") {\n                this.logger.warn(\"these parameters are deprecated, see docs for addKeyword\");\n                def.keyword = keyword;\n            }\n        }\n        else if (typeof kwdOrDef == \"object\" && def === undefined) {\n            def = kwdOrDef;\n            keyword = def.keyword;\n            if (Array.isArray(keyword) && !keyword.length) {\n                throw new Error(\"addKeywords: keyword must be string or non-empty array\");\n            }\n        }\n        else {\n            throw new Error(\"invalid addKeywords parameters\");\n        }\n        checkKeyword.call(this, keyword, def);\n        if (!def) {\n            (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));\n            return this;\n        }\n        keywordMetaschema.call(this, def);\n        const definition = {\n            ...def,\n            type: (0, dataType_1.getJSONTypes)(def.type),\n            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType),\n        };\n        (0, util_1.eachItem)(keyword, definition.type.length === 0\n            ? (k) => addRule.call(this, k, definition)\n            : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));\n        return this;\n    }\n    getKeyword(keyword) {\n        const rule = this.RULES.all[keyword];\n        return typeof rule == \"object\" ? rule.definition : !!rule;\n    }\n    // Remove keyword\n    removeKeyword(keyword) {\n        // TODO return type should be Ajv\n        const { RULES } = this;\n        delete RULES.keywords[keyword];\n        delete RULES.all[keyword];\n        for (const group of RULES.rules) {\n            const i = group.rules.findIndex((rule) => rule.keyword === keyword);\n            if (i >= 0)\n                group.rules.splice(i, 1);\n        }\n        return this;\n    }\n    // Add format\n    addFormat(name, format) {\n        if (typeof format == \"string\")\n            format = new RegExp(format);\n        this.formats[name] = format;\n        return this;\n    }\n    errorsText(errors = this.errors, // optional array of validation errors\n    { separator = \", \", dataVar = \"data\" } = {} // optional options with properties `separator` and `dataVar`\n    ) {\n        if (!errors || errors.length === 0)\n            return \"No errors\";\n        return errors\n            .map((e) => `${dataVar}${e.instancePath} ${e.message}`)\n            .reduce((text, msg) => text + separator + msg);\n    }\n    $dataMetaSchema(metaSchema, keywordsJsonPointers) {\n        const rules = this.RULES.all;\n        metaSchema = JSON.parse(JSON.stringify(metaSchema));\n        for (const jsonPointer of keywordsJsonPointers) {\n            const segments = jsonPointer.split(\"/\").slice(1); // first segment is an empty string\n            let keywords = metaSchema;\n            for (const seg of segments)\n                keywords = keywords[seg];\n            for (const key in rules) {\n                const rule = rules[key];\n                if (typeof rule != \"object\")\n                    continue;\n                const { $data } = rule.definition;\n                const schema = keywords[key];\n                if ($data && schema)\n                    keywords[key] = schemaOrData(schema);\n            }\n        }\n        return metaSchema;\n    }\n    _removeAllSchemas(schemas, regex) {\n        for (const keyRef in schemas) {\n            const sch = schemas[keyRef];\n            if (!regex || regex.test(keyRef)) {\n                if (typeof sch == \"string\") {\n                    delete schemas[keyRef];\n                }\n                else if (sch && !sch.meta) {\n                    this._cache.delete(sch.schema);\n                    delete schemas[keyRef];\n                }\n            }\n        }\n    }\n    _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {\n        let id;\n        const { schemaId } = this.opts;\n        if (typeof schema == \"object\") {\n            id = schema[schemaId];\n        }\n        else {\n            if (this.opts.jtd)\n                throw new Error(\"schema must be object\");\n            else if (typeof schema != \"boolean\")\n                throw new Error(\"schema must be object or boolean\");\n        }\n        let sch = this._cache.get(schema);\n        if (sch !== undefined)\n            return sch;\n        baseId = (0, resolve_1.normalizeId)(id || baseId);\n        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);\n        sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });\n        this._cache.set(sch.schema, sch);\n        if (addSchema && !baseId.startsWith(\"#\")) {\n            // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)\n            if (baseId)\n                this._checkUnique(baseId);\n            this.refs[baseId] = sch;\n        }\n        if (validateSchema)\n            this.validateSchema(schema, true);\n        return sch;\n    }\n    _checkUnique(id) {\n        if (this.schemas[id] || this.refs[id]) {\n            throw new Error(`schema with key or id \"${id}\" already exists`);\n        }\n    }\n    _compileSchemaEnv(sch) {\n        if (sch.meta)\n            this._compileMetaSchema(sch);\n        else\n            compile_1.compileSchema.call(this, sch);\n        /* istanbul ignore if */\n        if (!sch.validate)\n            throw new Error(\"ajv implementation error\");\n        return sch.validate;\n    }\n    _compileMetaSchema(sch) {\n        const currentOpts = this.opts;\n        this.opts = this._metaOpts;\n        try {\n            compile_1.compileSchema.call(this, sch);\n        }\n        finally {\n            this.opts = currentOpts;\n        }\n    }\n}\nAjv.ValidationError = validation_error_1.default;\nAjv.MissingRefError = ref_error_1.default;\nexports[\"default\"] = Ajv;\nfunction checkOptions(checkOpts, options, msg, log = \"error\") {\n    for (const key in checkOpts) {\n        const opt = key;\n        if (opt in options)\n            this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);\n    }\n}\nfunction getSchEnv(keyRef) {\n    keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line\n    return this.schemas[keyRef] || this.refs[keyRef];\n}\nfunction addInitialSchemas() {\n    const optsSchemas = this.opts.schemas;\n    if (!optsSchemas)\n        return;\n    if (Array.isArray(optsSchemas))\n        this.addSchema(optsSchemas);\n    else\n        for (const key in optsSchemas)\n            this.addSchema(optsSchemas[key], key);\n}\nfunction addInitialFormats() {\n    for (const name in this.opts.formats) {\n        const format = this.opts.formats[name];\n        if (format)\n            this.addFormat(name, format);\n    }\n}\nfunction addInitialKeywords(defs) {\n    if (Array.isArray(defs)) {\n        this.addVocabulary(defs);\n        return;\n    }\n    this.logger.warn(\"keywords option as map is deprecated, pass array\");\n    for (const keyword in defs) {\n        const def = defs[keyword];\n        if (!def.keyword)\n            def.keyword = keyword;\n        this.addKeyword(def);\n    }\n}\nfunction getMetaSchemaOptions() {\n    const metaOpts = { ...this.opts };\n    for (const opt of META_IGNORE_OPTIONS)\n        delete metaOpts[opt];\n    return metaOpts;\n}\nconst noLogs = { log() { }, warn() { }, error() { } };\nfunction getLogger(logger) {\n    if (logger === false)\n        return noLogs;\n    if (logger === undefined)\n        return console;\n    if (logger.log && logger.warn && logger.error)\n        return logger;\n    throw new Error(\"logger must implement log, warn and error methods\");\n}\nconst KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;\nfunction checkKeyword(keyword, def) {\n    const { RULES } = this;\n    (0, util_1.eachItem)(keyword, (kwd) => {\n        if (RULES.keywords[kwd])\n            throw new Error(`Keyword ${kwd} is already defined`);\n        if (!KEYWORD_NAME.test(kwd))\n            throw new Error(`Keyword ${kwd} has invalid name`);\n    });\n    if (!def)\n        return;\n    if (def.$data && !(\"code\" in def || \"validate\" in def)) {\n        throw new Error('$data keyword must have \"code\" or \"validate\" function');\n    }\n}\nfunction addRule(keyword, definition, dataType) {\n    var _a;\n    const post = definition === null || definition === void 0 ? void 0 : definition.post;\n    if (dataType && post)\n        throw new Error('keyword with \"post\" flag cannot have \"type\"');\n    const { RULES } = this;\n    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);\n    if (!ruleGroup) {\n        ruleGroup = { type: dataType, rules: [] };\n        RULES.rules.push(ruleGroup);\n    }\n    RULES.keywords[keyword] = true;\n    if (!definition)\n        return;\n    const rule = {\n        keyword,\n        definition: {\n            ...definition,\n            type: (0, dataType_1.getJSONTypes)(definition.type),\n            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType),\n        },\n    };\n    if (definition.before)\n        addBeforeRule.call(this, ruleGroup, rule, definition.before);\n    else\n        ruleGroup.rules.push(rule);\n    RULES.all[keyword] = rule;\n    (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));\n}\nfunction addBeforeRule(ruleGroup, rule, before) {\n    const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);\n    if (i >= 0) {\n        ruleGroup.rules.splice(i, 0, rule);\n    }\n    else {\n        ruleGroup.rules.push(rule);\n        this.logger.warn(`rule ${before} is not defined`);\n    }\n}\nfunction keywordMetaschema(def) {\n    let { metaSchema } = def;\n    if (metaSchema === undefined)\n        return;\n    if (def.$data && this.opts.$data)\n        metaSchema = schemaOrData(metaSchema);\n    def.validateSchema = this.compile(metaSchema, true);\n}\nconst $dataRef = {\n    $ref: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\",\n};\nfunction schemaOrData(schema) {\n    return { anyOf: [schema, $dataRef] };\n}\n//# sourceMappingURL=core.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/core.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/equal.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/equal.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// https://github.com/ajv-validator/ajv/issues/889\nconst equal = __webpack_require__(/*! fast-deep-equal */ \"(action-browser)/./node_modules/fast-deep-equal/index.js\");\nequal.code = 'require(\"ajv/dist/runtime/equal\").default';\nexports[\"default\"] = equal;\n//# sourceMappingURL=equal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvZXF1YWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQSxjQUFjLG1CQUFPLENBQUMsaUZBQWlCO0FBQ3ZDO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvZXF1YWwuanM/NDQxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hanYtdmFsaWRhdG9yL2Fqdi9pc3N1ZXMvODg5XG5jb25zdCBlcXVhbCA9IHJlcXVpcmUoXCJmYXN0LWRlZXAtZXF1YWxcIik7XG5lcXVhbC5jb2RlID0gJ3JlcXVpcmUoXCJhanYvZGlzdC9ydW50aW1lL2VxdWFsXCIpLmRlZmF1bHQnO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXF1YWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcXVhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/equal.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/ucs2length.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/ucs2length.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// https://mathiasbynens.be/notes/javascript-encoding\n// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode\nfunction ucs2length(str) {\n    const len = str.length;\n    let length = 0;\n    let pos = 0;\n    let value;\n    while (pos < len) {\n        length++;\n        value = str.charCodeAt(pos++);\n        if (value >= 0xd800 && value <= 0xdbff && pos < len) {\n            // high surrogate, and there is a next character\n            value = str.charCodeAt(pos);\n            if ((value & 0xfc00) === 0xdc00)\n                pos++; // low surrogate\n        }\n    }\n    return length;\n}\nexports[\"default\"] = ucs2length;\nucs2length.code = 'require(\"ajv/dist/runtime/ucs2length\").default';\n//# sourceMappingURL=ucs2length.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvdWNzMmxlbmd0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvcnVudGltZS91Y3MybGVuZ3RoLmpzP2IyNjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZ1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL3B1bnljb2RlLmpzIC0gcHVueWNvZGUudWNzMi5kZWNvZGVcbmZ1bmN0aW9uIHVjczJsZW5ndGgoc3RyKSB7XG4gICAgY29uc3QgbGVuID0gc3RyLmxlbmd0aDtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBsZXQgcG9zID0gMDtcbiAgICBsZXQgdmFsdWU7XG4gICAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgICAgICBsZW5ndGgrKztcbiAgICAgICAgdmFsdWUgPSBzdHIuY2hhckNvZGVBdChwb3MrKyk7XG4gICAgICAgIGlmICh2YWx1ZSA+PSAweGQ4MDAgJiYgdmFsdWUgPD0gMHhkYmZmICYmIHBvcyA8IGxlbikge1xuICAgICAgICAgICAgLy8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG4gICAgICAgICAgICB2YWx1ZSA9IHN0ci5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICAgICAgICBpZiAoKHZhbHVlICYgMHhmYzAwKSA9PT0gMHhkYzAwKVxuICAgICAgICAgICAgICAgIHBvcysrOyAvLyBsb3cgc3Vycm9nYXRlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxlbmd0aDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHVjczJsZW5ndGg7XG51Y3MybGVuZ3RoLmNvZGUgPSAncmVxdWlyZShcImFqdi9kaXN0L3J1bnRpbWUvdWNzMmxlbmd0aFwiKS5kZWZhdWx0Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVjczJsZW5ndGguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/ucs2length.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/uri.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/uri.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst uri = __webpack_require__(/*! fast-uri */ \"(action-browser)/./node_modules/fast-uri/index.js\");\nuri.code = 'require(\"ajv/dist/runtime/uri\").default';\nexports[\"default\"] = uri;\n//# sourceMappingURL=uri.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvdXJpLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFlBQVksbUJBQU8sQ0FBQyxtRUFBVTtBQUM5QjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC9ydW50aW1lL3VyaS5qcz81NTgyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXJpID0gcmVxdWlyZShcImZhc3QtdXJpXCIpO1xudXJpLmNvZGUgPSAncmVxdWlyZShcImFqdi9kaXN0L3J1bnRpbWUvdXJpXCIpLmRlZmF1bHQnO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXJpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/uri.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/validation_error.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/validation_error.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass ValidationError extends Error {\n    constructor(errors) {\n        super(\"validation failed\");\n        this.errors = errors;\n        this.ajv = this.validation = true;\n    }\n}\nexports[\"default\"] = ValidationError;\n//# sourceMappingURL=validation_error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvdmFsaWRhdGlvbl9lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC9ydW50aW1lL3ZhbGlkYXRpb25fZXJyb3IuanM/YTMzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihlcnJvcnMpIHtcbiAgICAgICAgc3VwZXIoXCJ2YWxpZGF0aW9uIGZhaWxlZFwiKTtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIHRoaXMuYWp2ID0gdGhpcy52YWxpZGF0aW9uID0gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBWYWxpZGF0aW9uRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0aW9uX2Vycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/validation_error.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateAdditionalItems = void 0;\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: ({ params: { len } }) => (0, codegen_1.str) `must NOT have more than ${len} items`,\n    params: ({ params: { len } }) => (0, codegen_1._) `{limit: ${len}}`,\n};\nconst def = {\n    keyword: \"additionalItems\",\n    type: \"array\",\n    schemaType: [\"boolean\", \"object\"],\n    before: \"uniqueItems\",\n    error,\n    code(cxt) {\n        const { parentSchema, it } = cxt;\n        const { items } = parentSchema;\n        if (!Array.isArray(items)) {\n            (0, util_1.checkStrictMode)(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas');\n            return;\n        }\n        validateAdditionalItems(cxt, items);\n    },\n};\nfunction validateAdditionalItems(cxt, items) {\n    const { gen, schema, data, keyword, it } = cxt;\n    it.items = true;\n    const len = gen.const(\"len\", (0, codegen_1._) `${data}.length`);\n    if (schema === false) {\n        cxt.setParams({ len: items.length });\n        cxt.pass((0, codegen_1._) `${len} <= ${items.length}`);\n    }\n    else if (typeof schema == \"object\" && !(0, util_1.alwaysValidSchema)(it, schema)) {\n        const valid = gen.var(\"valid\", (0, codegen_1._) `${len} <= ${items.length}`); // TODO var\n        gen.if((0, codegen_1.not)(valid), () => validateItems(valid));\n        cxt.ok(valid);\n    }\n    function validateItems(valid) {\n        gen.forRange(\"i\", items.length, len, (i) => {\n            cxt.subschema({ keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid);\n            if (!it.allErrors)\n                gen.if((0, codegen_1.not)(valid), () => gen.break());\n        });\n    }\n}\nexports.validateAdditionalItems = validateAdditionalItems;\nexports[\"default\"] = def;\n//# sourceMappingURL=additionalItems.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FkZGl0aW9uYWxJdGVtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0Isa0JBQWtCLG1CQUFPLENBQUMsNkhBQXVCO0FBQ2pELGVBQWUsbUJBQU8sQ0FBQyxpSEFBb0I7QUFDM0M7QUFDQSxnQkFBZ0IsVUFBVSxPQUFPLG1EQUFtRCxLQUFLO0FBQ3pGLGVBQWUsVUFBVSxPQUFPLHdCQUF3QixTQUFTLEtBQUs7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQkFBbUI7QUFDbkMsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWSxpQ0FBaUM7QUFDN0M7QUFDQSxxREFBcUQsS0FBSztBQUMxRDtBQUNBLHdCQUF3QixtQkFBbUI7QUFDM0MscUNBQXFDLEtBQUssS0FBSyxhQUFhO0FBQzVEO0FBQ0E7QUFDQSwyREFBMkQsS0FBSyxLQUFLLGFBQWEsSUFBSTtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFEQUFxRDtBQUNqRjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0Isa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FkZGl0aW9uYWxJdGVtcy5qcz81NGUwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52YWxpZGF0ZUFkZGl0aW9uYWxJdGVtcyA9IHZvaWQgMDtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgcGFyYW1zOiB7IGxlbiB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBOT1QgaGF2ZSBtb3JlIHRoYW4gJHtsZW59IGl0ZW1zYCxcbiAgICBwYXJhbXM6ICh7IHBhcmFtczogeyBsZW4gfSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bGltaXQ6ICR7bGVufX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImFkZGl0aW9uYWxJdGVtc1wiLFxuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJib29sZWFuXCIsIFwib2JqZWN0XCJdLFxuICAgIGJlZm9yZTogXCJ1bmlxdWVJdGVtc1wiLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgcGFyZW50U2NoZW1hLCBpdCB9ID0gY3h0O1xuICAgICAgICBjb25zdCB7IGl0ZW1zIH0gPSBwYXJlbnRTY2hlbWE7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpdGVtcykpIHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgJ1wiYWRkaXRpb25hbEl0ZW1zXCIgaXMgaWdub3JlZCB3aGVuIFwiaXRlbXNcIiBpcyBub3QgYW4gYXJyYXkgb2Ygc2NoZW1hcycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhbGlkYXRlQWRkaXRpb25hbEl0ZW1zKGN4dCwgaXRlbXMpO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVBZGRpdGlvbmFsSXRlbXMoY3h0LCBpdGVtcykge1xuICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGRhdGEsIGtleXdvcmQsIGl0IH0gPSBjeHQ7XG4gICAgaXQuaXRlbXMgPSB0cnVlO1xuICAgIGNvbnN0IGxlbiA9IGdlbi5jb25zdChcImxlblwiLCAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9Lmxlbmd0aGApO1xuICAgIGlmIChzY2hlbWEgPT09IGZhbHNlKSB7XG4gICAgICAgIGN4dC5zZXRQYXJhbXMoeyBsZW46IGl0ZW1zLmxlbmd0aCB9KTtcbiAgICAgICAgY3h0LnBhc3MoKDAsIGNvZGVnZW5fMS5fKSBgJHtsZW59IDw9ICR7aXRlbXMubGVuZ3RofWApO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygc2NoZW1hID09IFwib2JqZWN0XCIgJiYgISgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWEpKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLnZhcihcInZhbGlkXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7bGVufSA8PSAke2l0ZW1zLmxlbmd0aH1gKTsgLy8gVE9ETyB2YXJcbiAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KSh2YWxpZCksICgpID0+IHZhbGlkYXRlSXRlbXModmFsaWQpKTtcbiAgICAgICAgY3h0Lm9rKHZhbGlkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVJdGVtcyh2YWxpZCkge1xuICAgICAgICBnZW4uZm9yUmFuZ2UoXCJpXCIsIGl0ZW1zLmxlbmd0aCwgbGVuLCAoaSkgPT4ge1xuICAgICAgICAgICAgY3h0LnN1YnNjaGVtYSh7IGtleXdvcmQsIGRhdGFQcm9wOiBpLCBkYXRhUHJvcFR5cGU6IHV0aWxfMS5UeXBlLk51bSB9LCB2YWxpZCk7XG4gICAgICAgICAgICBpZiAoIWl0LmFsbEVycm9ycylcbiAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSwgKCkgPT4gZ2VuLmJyZWFrKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlQWRkaXRpb25hbEl0ZW1zID0gdmFsaWRhdGVBZGRpdGlvbmFsSXRlbXM7XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRpdGlvbmFsSXRlbXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst code_1 = __webpack_require__(/*! ../code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names_1 = __webpack_require__(/*! ../../compile/names */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/names.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: \"must NOT have additional properties\",\n    params: ({ params }) => (0, codegen_1._) `{additionalProperty: ${params.additionalProperty}}`,\n};\nconst def = {\n    keyword: \"additionalProperties\",\n    type: [\"object\"],\n    schemaType: [\"boolean\", \"object\"],\n    allowUndefined: true,\n    trackErrors: true,\n    error,\n    code(cxt) {\n        const { gen, schema, parentSchema, data, errsCount, it } = cxt;\n        /* istanbul ignore if */\n        if (!errsCount)\n            throw new Error(\"ajv implementation error\");\n        const { allErrors, opts } = it;\n        it.props = true;\n        if (opts.removeAdditional !== \"all\" && (0, util_1.alwaysValidSchema)(it, schema))\n            return;\n        const props = (0, code_1.allSchemaProperties)(parentSchema.properties);\n        const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);\n        checkAdditionalProperties();\n        cxt.ok((0, codegen_1._) `${errsCount} === ${names_1.default.errors}`);\n        function checkAdditionalProperties() {\n            gen.forIn(\"key\", data, (key) => {\n                if (!props.length && !patProps.length)\n                    additionalPropertyCode(key);\n                else\n                    gen.if(isAdditional(key), () => additionalPropertyCode(key));\n            });\n        }\n        function isAdditional(key) {\n            let definedProp;\n            if (props.length > 8) {\n                // TODO maybe an option instead of hard-coded 8?\n                const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, \"properties\");\n                definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);\n            }\n            else if (props.length) {\n                definedProp = (0, codegen_1.or)(...props.map((p) => (0, codegen_1._) `${key} === ${p}`));\n            }\n            else {\n                definedProp = codegen_1.nil;\n            }\n            if (patProps.length) {\n                definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p) => (0, codegen_1._) `${(0, code_1.usePattern)(cxt, p)}.test(${key})`));\n            }\n            return (0, codegen_1.not)(definedProp);\n        }\n        function deleteAdditional(key) {\n            gen.code((0, codegen_1._) `delete ${data}[${key}]`);\n        }\n        function additionalPropertyCode(key) {\n            if (opts.removeAdditional === \"all\" || (opts.removeAdditional && schema === false)) {\n                deleteAdditional(key);\n                return;\n            }\n            if (schema === false) {\n                cxt.setParams({ additionalProperty: key });\n                cxt.error();\n                if (!allErrors)\n                    gen.break();\n                return;\n            }\n            if (typeof schema == \"object\" && !(0, util_1.alwaysValidSchema)(it, schema)) {\n                const valid = gen.name(\"valid\");\n                if (opts.removeAdditional === \"failing\") {\n                    applyAdditionalSchema(key, valid, false);\n                    gen.if((0, codegen_1.not)(valid), () => {\n                        cxt.reset();\n                        deleteAdditional(key);\n                    });\n                }\n                else {\n                    applyAdditionalSchema(key, valid);\n                    if (!allErrors)\n                        gen.if((0, codegen_1.not)(valid), () => gen.break());\n                }\n            }\n        }\n        function applyAdditionalSchema(key, valid, errors) {\n            const subschema = {\n                keyword: \"additionalProperties\",\n                dataProp: key,\n                dataPropType: util_1.Type.Str,\n            };\n            if (errors === false) {\n                Object.assign(subschema, {\n                    compositeRule: true,\n                    createErrors: false,\n                    allErrors: false,\n                });\n            }\n            cxt.subschema(subschema, valid);\n        }\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=additionalProperties.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FkZGl0aW9uYWxQcm9wZXJ0aWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsbUJBQU8sQ0FBQywyR0FBUztBQUNoQyxrQkFBa0IsbUJBQU8sQ0FBQyw2SEFBdUI7QUFDakQsZ0JBQWdCLG1CQUFPLENBQUMsbUhBQXFCO0FBQzdDLGVBQWUsbUJBQU8sQ0FBQyxpSEFBb0I7QUFDM0M7QUFDQTtBQUNBLGVBQWUsUUFBUSx3QkFBd0Isc0JBQXNCLDJCQUEyQjtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaURBQWlEO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixrQkFBa0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFdBQVcsTUFBTSx1QkFBdUI7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdGQUF3RixLQUFLLE1BQU0sRUFBRTtBQUNyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0dBQXdHLCtCQUErQixRQUFRLElBQUk7QUFDbko7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsS0FBSyxHQUFHLElBQUk7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MseUJBQXlCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvYWRkaXRpb25hbFByb3BlcnRpZXMuanM/ZjQwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVfMSA9IHJlcXVpcmUoXCIuLi9jb2RlXCIpO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9uYW1lc1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiBcIm11c3QgTk9UIGhhdmUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzXCIsXG4gICAgcGFyYW1zOiAoeyBwYXJhbXMgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge2FkZGl0aW9uYWxQcm9wZXJ0eTogJHtwYXJhbXMuYWRkaXRpb25hbFByb3BlcnR5fX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCIsXG4gICAgdHlwZTogW1wib2JqZWN0XCJdLFxuICAgIHNjaGVtYVR5cGU6IFtcImJvb2xlYW5cIiwgXCJvYmplY3RcIl0sXG4gICAgYWxsb3dVbmRlZmluZWQ6IHRydWUsXG4gICAgdHJhY2tFcnJvcnM6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgcGFyZW50U2NoZW1hLCBkYXRhLCBlcnJzQ291bnQsIGl0IH0gPSBjeHQ7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWVycnNDb3VudClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFqdiBpbXBsZW1lbnRhdGlvbiBlcnJvclwiKTtcbiAgICAgICAgY29uc3QgeyBhbGxFcnJvcnMsIG9wdHMgfSA9IGl0O1xuICAgICAgICBpdC5wcm9wcyA9IHRydWU7XG4gICAgICAgIGlmIChvcHRzLnJlbW92ZUFkZGl0aW9uYWwgIT09IFwiYWxsXCIgJiYgKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHByb3BzID0gKDAsIGNvZGVfMS5hbGxTY2hlbWFQcm9wZXJ0aWVzKShwYXJlbnRTY2hlbWEucHJvcGVydGllcyk7XG4gICAgICAgIGNvbnN0IHBhdFByb3BzID0gKDAsIGNvZGVfMS5hbGxTY2hlbWFQcm9wZXJ0aWVzKShwYXJlbnRTY2hlbWEucGF0dGVyblByb3BlcnRpZXMpO1xuICAgICAgICBjaGVja0FkZGl0aW9uYWxQcm9wZXJ0aWVzKCk7XG4gICAgICAgIGN4dC5vaygoMCwgY29kZWdlbl8xLl8pIGAke2VycnNDb3VudH0gPT09ICR7bmFtZXNfMS5kZWZhdWx0LmVycm9yc31gKTtcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tBZGRpdGlvbmFsUHJvcGVydGllcygpIHtcbiAgICAgICAgICAgIGdlbi5mb3JJbihcImtleVwiLCBkYXRhLCAoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFwcm9wcy5sZW5ndGggJiYgIXBhdFByb3BzLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnR5Q29kZShrZXkpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmlmKGlzQWRkaXRpb25hbChrZXkpLCAoKSA9PiBhZGRpdGlvbmFsUHJvcGVydHlDb2RlKGtleSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNBZGRpdGlvbmFsKGtleSkge1xuICAgICAgICAgICAgbGV0IGRlZmluZWRQcm9wO1xuICAgICAgICAgICAgaWYgKHByb3BzLmxlbmd0aCA+IDgpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPIG1heWJlIGFuIG9wdGlvbiBpbnN0ZWFkIG9mIGhhcmQtY29kZWQgOD9cbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wc1NjaGVtYSA9ICgwLCB1dGlsXzEuc2NoZW1hUmVmT3JWYWwpKGl0LCBwYXJlbnRTY2hlbWEucHJvcGVydGllcywgXCJwcm9wZXJ0aWVzXCIpO1xuICAgICAgICAgICAgICAgIGRlZmluZWRQcm9wID0gKDAsIGNvZGVfMS5pc093blByb3BlcnR5KShnZW4sIHByb3BzU2NoZW1hLCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lZFByb3AgPSAoMCwgY29kZWdlbl8xLm9yKSguLi5wcm9wcy5tYXAoKHApID0+ICgwLCBjb2RlZ2VuXzEuXykgYCR7a2V5fSA9PT0gJHtwfWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmluZWRQcm9wID0gY29kZWdlbl8xLm5pbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXRQcm9wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVkUHJvcCA9ICgwLCBjb2RlZ2VuXzEub3IpKGRlZmluZWRQcm9wLCAuLi5wYXRQcm9wcy5tYXAoKHApID0+ICgwLCBjb2RlZ2VuXzEuXykgYCR7KDAsIGNvZGVfMS51c2VQYXR0ZXJuKShjeHQsIHApfS50ZXN0KCR7a2V5fSlgKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5ub3QpKGRlZmluZWRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBkZWxldGVBZGRpdGlvbmFsKGtleSkge1xuICAgICAgICAgICAgZ2VuLmNvZGUoKDAsIGNvZGVnZW5fMS5fKSBgZGVsZXRlICR7ZGF0YX1bJHtrZXl9XWApO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFkZGl0aW9uYWxQcm9wZXJ0eUNvZGUoa2V5KSB7XG4gICAgICAgICAgICBpZiAob3B0cy5yZW1vdmVBZGRpdGlvbmFsID09PSBcImFsbFwiIHx8IChvcHRzLnJlbW92ZUFkZGl0aW9uYWwgJiYgc2NoZW1hID09PSBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGVBZGRpdGlvbmFsKGtleSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNjaGVtYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjeHQuc2V0UGFyYW1zKHsgYWRkaXRpb25hbFByb3BlcnR5OiBrZXkgfSk7XG4gICAgICAgICAgICAgICAgY3h0LmVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFhbGxFcnJvcnMpXG4gICAgICAgICAgICAgICAgICAgIGdlbi5icmVhaygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09IFwib2JqZWN0XCIgJiYgISgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWEpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLnJlbW92ZUFkZGl0aW9uYWwgPT09IFwiZmFpbGluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGx5QWRkaXRpb25hbFNjaGVtYShrZXksIHZhbGlkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLm5vdCkodmFsaWQpLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjeHQucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUFkZGl0aW9uYWwoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcHBseUFkZGl0aW9uYWxTY2hlbWEoa2V5LCB2YWxpZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYWxsRXJyb3JzKVxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KSh2YWxpZCksICgpID0+IGdlbi5icmVhaygpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlBZGRpdGlvbmFsU2NoZW1hKGtleSwgdmFsaWQsIGVycm9ycykge1xuICAgICAgICAgICAgY29uc3Qgc3Vic2NoZW1hID0ge1xuICAgICAgICAgICAgICAgIGtleXdvcmQ6IFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIixcbiAgICAgICAgICAgICAgICBkYXRhUHJvcDoga2V5LFxuICAgICAgICAgICAgICAgIGRhdGFQcm9wVHlwZTogdXRpbF8xLlR5cGUuU3RyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChlcnJvcnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzdWJzY2hlbWEsIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9zaXRlUnVsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRXJyb3JzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYWxsRXJyb3JzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN4dC5zdWJzY2hlbWEoc3Vic2NoZW1hLCB2YWxpZCk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZGl0aW9uYWxQcm9wZXJ0aWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/allOf.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/allOf.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst def = {\n    keyword: \"allOf\",\n    schemaType: \"array\",\n    code(cxt) {\n        const { gen, schema, it } = cxt;\n        /* istanbul ignore if */\n        if (!Array.isArray(schema))\n            throw new Error(\"ajv implementation error\");\n        const valid = gen.name(\"valid\");\n        schema.forEach((sch, i) => {\n            if ((0, util_1.alwaysValidSchema)(it, sch))\n                return;\n            const schCxt = cxt.subschema({ keyword: \"allOf\", schemaProp: i }, valid);\n            cxt.ok(valid);\n            cxt.mergeEvaluated(schCxt);\n        });\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=allOf.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FsbE9mLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsbUJBQU8sQ0FBQyxpSEFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGlDQUFpQztBQUM1RTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci9hbGxPZi5qcz8zNzY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImFsbE9mXCIsXG4gICAgc2NoZW1hVHlwZTogXCJhcnJheVwiLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2NoZW1hKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFqdiBpbXBsZW1lbnRhdGlvbiBlcnJvclwiKTtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICBzY2hlbWEuZm9yRWFjaCgoc2NoLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3Qgc2NoQ3h0ID0gY3h0LnN1YnNjaGVtYSh7IGtleXdvcmQ6IFwiYWxsT2ZcIiwgc2NoZW1hUHJvcDogaSB9LCB2YWxpZCk7XG4gICAgICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgICAgICAgICAgY3h0Lm1lcmdlRXZhbHVhdGVkKHNjaEN4dCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWxsT2YuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/allOf.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/anyOf.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/anyOf.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst code_1 = __webpack_require__(/*! ../code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\");\nconst def = {\n    keyword: \"anyOf\",\n    schemaType: \"array\",\n    trackErrors: true,\n    code: code_1.validateUnion,\n    error: { message: \"must match a schema in anyOf\" },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=anyOf.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FueU9mLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsbUJBQU8sQ0FBQywyR0FBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx5Q0FBeUM7QUFDdEQ7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvYW55T2YuanM/NDY0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVfMSA9IHJlcXVpcmUoXCIuLi9jb2RlXCIpO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiYW55T2ZcIixcbiAgICBzY2hlbWFUeXBlOiBcImFycmF5XCIsXG4gICAgdHJhY2tFcnJvcnM6IHRydWUsXG4gICAgY29kZTogY29kZV8xLnZhbGlkYXRlVW5pb24sXG4gICAgZXJyb3I6IHsgbWVzc2FnZTogXCJtdXN0IG1hdGNoIGEgc2NoZW1hIGluIGFueU9mXCIgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbnlPZi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/anyOf.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/contains.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/contains.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: ({ params: { min, max } }) => max === undefined\n        ? (0, codegen_1.str) `must contain at least ${min} valid item(s)`\n        : (0, codegen_1.str) `must contain at least ${min} and no more than ${max} valid item(s)`,\n    params: ({ params: { min, max } }) => max === undefined ? (0, codegen_1._) `{minContains: ${min}}` : (0, codegen_1._) `{minContains: ${min}, maxContains: ${max}}`,\n};\nconst def = {\n    keyword: \"contains\",\n    type: \"array\",\n    schemaType: [\"object\", \"boolean\"],\n    before: \"uniqueItems\",\n    trackErrors: true,\n    error,\n    code(cxt) {\n        const { gen, schema, parentSchema, data, it } = cxt;\n        let min;\n        let max;\n        const { minContains, maxContains } = parentSchema;\n        if (it.opts.next) {\n            min = minContains === undefined ? 1 : minContains;\n            max = maxContains;\n        }\n        else {\n            min = 1;\n        }\n        const len = gen.const(\"len\", (0, codegen_1._) `${data}.length`);\n        cxt.setParams({ min, max });\n        if (max === undefined && min === 0) {\n            (0, util_1.checkStrictMode)(it, `\"minContains\" == 0 without \"maxContains\": \"contains\" keyword ignored`);\n            return;\n        }\n        if (max !== undefined && min > max) {\n            (0, util_1.checkStrictMode)(it, `\"minContains\" > \"maxContains\" is always invalid`);\n            cxt.fail();\n            return;\n        }\n        if ((0, util_1.alwaysValidSchema)(it, schema)) {\n            let cond = (0, codegen_1._) `${len} >= ${min}`;\n            if (max !== undefined)\n                cond = (0, codegen_1._) `${cond} && ${len} <= ${max}`;\n            cxt.pass(cond);\n            return;\n        }\n        it.items = true;\n        const valid = gen.name(\"valid\");\n        if (max === undefined && min === 1) {\n            validateItems(valid, () => gen.if(valid, () => gen.break()));\n        }\n        else if (min === 0) {\n            gen.let(valid, true);\n            if (max !== undefined)\n                gen.if((0, codegen_1._) `${data}.length > 0`, validateItemsWithCount);\n        }\n        else {\n            gen.let(valid, false);\n            validateItemsWithCount();\n        }\n        cxt.result(valid, () => cxt.reset());\n        function validateItemsWithCount() {\n            const schValid = gen.name(\"_valid\");\n            const count = gen.let(\"count\", 0);\n            validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));\n        }\n        function validateItems(_valid, block) {\n            gen.forRange(\"i\", 0, len, (i) => {\n                cxt.subschema({\n                    keyword: \"contains\",\n                    dataProp: i,\n                    dataPropType: util_1.Type.Num,\n                    compositeRule: true,\n                }, _valid);\n                block();\n            });\n        }\n        function checkLimits(count) {\n            gen.code((0, codegen_1._) `${count}++`);\n            if (max === undefined) {\n                gen.if((0, codegen_1._) `${count} >= ${min}`, () => gen.assign(valid, true).break());\n            }\n            else {\n                gen.if((0, codegen_1._) `${count} > ${max}`, () => gen.assign(valid, false).break());\n                if (min === 1)\n                    gen.assign(valid, true);\n                else\n                    gen.if((0, codegen_1._) `${count} >= ${min}`, () => gen.assign(valid, true));\n            }\n        }\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=contains.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2NvbnRhaW5zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixtQkFBTyxDQUFDLDZIQUF1QjtBQUNqRCxlQUFlLG1CQUFPLENBQUMsaUhBQW9CO0FBQzNDO0FBQ0EsZ0JBQWdCLFVBQVUsWUFBWTtBQUN0QyxzREFBc0QsS0FBSztBQUMzRCxzREFBc0QsS0FBSyxtQkFBbUIsS0FBSztBQUNuRixlQUFlLFVBQVUsWUFBWSw0Q0FBNEMsZUFBZSxLQUFLLHVCQUF1QixlQUFlLElBQUksaUJBQWlCLEtBQUs7QUFDcks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0EsZ0JBQWdCLDJCQUEyQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxLQUFLO0FBQzlELHdCQUF3QixVQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLEtBQUssS0FBSyxJQUFJO0FBQ3pEO0FBQ0EsMkNBQTJDLE1BQU0sS0FBSyxLQUFLLEtBQUssSUFBSTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLEtBQUs7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSx5Q0FBeUMsTUFBTTtBQUMvQztBQUNBLDJDQUEyQyxPQUFPLEtBQUssSUFBSTtBQUMzRDtBQUNBO0FBQ0EsMkNBQTJDLE9BQU8sSUFBSSxJQUFJO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxPQUFPLEtBQUssSUFBSTtBQUMvRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2NvbnRhaW5zLmpzPzcxOGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHBhcmFtczogeyBtaW4sIG1heCB9IH0pID0+IG1heCA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgJHttaW59IHZhbGlkIGl0ZW0ocylgXG4gICAgICAgIDogKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgJHttaW59IGFuZCBubyBtb3JlIHRoYW4gJHttYXh9IHZhbGlkIGl0ZW0ocylgLFxuICAgIHBhcmFtczogKHsgcGFyYW1zOiB7IG1pbiwgbWF4IH0gfSkgPT4gbWF4ID09PSB1bmRlZmluZWQgPyAoMCwgY29kZWdlbl8xLl8pIGB7bWluQ29udGFpbnM6ICR7bWlufX1gIDogKDAsIGNvZGVnZW5fMS5fKSBge21pbkNvbnRhaW5zOiAke21pbn0sIG1heENvbnRhaW5zOiAke21heH19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJjb250YWluc1wiLFxuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJib29sZWFuXCJdLFxuICAgIGJlZm9yZTogXCJ1bmlxdWVJdGVtc1wiLFxuICAgIHRyYWNrRXJyb3JzOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgZGF0YSwgaXQgfSA9IGN4dDtcbiAgICAgICAgbGV0IG1pbjtcbiAgICAgICAgbGV0IG1heDtcbiAgICAgICAgY29uc3QgeyBtaW5Db250YWlucywgbWF4Q29udGFpbnMgfSA9IHBhcmVudFNjaGVtYTtcbiAgICAgICAgaWYgKGl0Lm9wdHMubmV4dCkge1xuICAgICAgICAgICAgbWluID0gbWluQ29udGFpbnMgPT09IHVuZGVmaW5lZCA/IDEgOiBtaW5Db250YWlucztcbiAgICAgICAgICAgIG1heCA9IG1heENvbnRhaW5zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWluID0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZW4gPSBnZW4uY29uc3QoXCJsZW5cIiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfS5sZW5ndGhgKTtcbiAgICAgICAgY3h0LnNldFBhcmFtcyh7IG1pbiwgbWF4IH0pO1xuICAgICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQgJiYgbWluID09PSAwKSB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIGBcIm1pbkNvbnRhaW5zXCIgPT0gMCB3aXRob3V0IFwibWF4Q29udGFpbnNcIjogXCJjb250YWluc1wiIGtleXdvcmQgaWdub3JlZGApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXggIT09IHVuZGVmaW5lZCAmJiBtaW4gPiBtYXgpIHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgYFwibWluQ29udGFpbnNcIiA+IFwibWF4Q29udGFpbnNcIiBpcyBhbHdheXMgaW52YWxpZGApO1xuICAgICAgICAgICAgY3h0LmZhaWwoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSkpIHtcbiAgICAgICAgICAgIGxldCBjb25kID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtsZW59ID49ICR7bWlufWA7XG4gICAgICAgICAgICBpZiAobWF4ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgY29uZCA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7Y29uZH0gJiYgJHtsZW59IDw9ICR7bWF4fWA7XG4gICAgICAgICAgICBjeHQucGFzcyhjb25kKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpdC5pdGVtcyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICAgICAgaWYgKG1heCA9PT0gdW5kZWZpbmVkICYmIG1pbiA9PT0gMSkge1xuICAgICAgICAgICAgdmFsaWRhdGVJdGVtcyh2YWxpZCwgKCkgPT4gZ2VuLmlmKHZhbGlkLCAoKSA9PiBnZW4uYnJlYWsoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1pbiA9PT0gMCkge1xuICAgICAgICAgICAgZ2VuLmxldCh2YWxpZCwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAobWF4ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0ubGVuZ3RoID4gMGAsIHZhbGlkYXRlSXRlbXNXaXRoQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2VuLmxldCh2YWxpZCwgZmFsc2UpO1xuICAgICAgICAgICAgdmFsaWRhdGVJdGVtc1dpdGhDb3VudCgpO1xuICAgICAgICB9XG4gICAgICAgIGN4dC5yZXN1bHQodmFsaWQsICgpID0+IGN4dC5yZXNldCgpKTtcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVJdGVtc1dpdGhDb3VudCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjaFZhbGlkID0gZ2VuLm5hbWUoXCJfdmFsaWRcIik7XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IGdlbi5sZXQoXCJjb3VudFwiLCAwKTtcbiAgICAgICAgICAgIHZhbGlkYXRlSXRlbXMoc2NoVmFsaWQsICgpID0+IGdlbi5pZihzY2hWYWxpZCwgKCkgPT4gY2hlY2tMaW1pdHMoY291bnQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVJdGVtcyhfdmFsaWQsIGJsb2NrKSB7XG4gICAgICAgICAgICBnZW4uZm9yUmFuZ2UoXCJpXCIsIDAsIGxlbiwgKGkpID0+IHtcbiAgICAgICAgICAgICAgICBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICAgICAga2V5d29yZDogXCJjb250YWluc1wiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhUHJvcDogaSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVByb3BUeXBlOiB1dGlsXzEuVHlwZS5OdW0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSwgX3ZhbGlkKTtcbiAgICAgICAgICAgICAgICBibG9jaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tMaW1pdHMoY291bnQpIHtcbiAgICAgICAgICAgIGdlbi5jb2RlKCgwLCBjb2RlZ2VuXzEuXykgYCR7Y291bnR9KytgKTtcbiAgICAgICAgICAgIGlmIChtYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2NvdW50fSA+PSAke21pbn1gLCAoKSA9PiBnZW4uYXNzaWduKHZhbGlkLCB0cnVlKS5icmVhaygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2NvdW50fSA+ICR7bWF4fWAsICgpID0+IGdlbi5hc3NpZ24odmFsaWQsIGZhbHNlKS5icmVhaygpKTtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSAxKVxuICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2NvdW50fSA+PSAke21pbn1gLCAoKSA9PiBnZW4uYXNzaWduKHZhbGlkLCB0cnVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRhaW5zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/contains.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/dependencies.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/dependencies.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst code_1 = __webpack_require__(/*! ../code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\");\nexports.error = {\n    message: ({ params: { property, depsCount, deps } }) => {\n        const property_ies = depsCount === 1 ? \"property\" : \"properties\";\n        return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;\n    },\n    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}`, // TODO change to reference\n};\nconst def = {\n    keyword: \"dependencies\",\n    type: \"object\",\n    schemaType: \"object\",\n    error: exports.error,\n    code(cxt) {\n        const [propDeps, schDeps] = splitDependencies(cxt);\n        validatePropertyDeps(cxt, propDeps);\n        validateSchemaDeps(cxt, schDeps);\n    },\n};\nfunction splitDependencies({ schema }) {\n    const propertyDeps = {};\n    const schemaDeps = {};\n    for (const key in schema) {\n        if (key === \"__proto__\")\n            continue;\n        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;\n        deps[key] = schema[key];\n    }\n    return [propertyDeps, schemaDeps];\n}\nfunction validatePropertyDeps(cxt, propertyDeps = cxt.schema) {\n    const { gen, data, it } = cxt;\n    if (Object.keys(propertyDeps).length === 0)\n        return;\n    const missing = gen.let(\"missing\");\n    for (const prop in propertyDeps) {\n        const deps = propertyDeps[prop];\n        if (deps.length === 0)\n            continue;\n        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);\n        cxt.setParams({\n            property: prop,\n            depsCount: deps.length,\n            deps: deps.join(\", \"),\n        });\n        if (it.allErrors) {\n            gen.if(hasProperty, () => {\n                for (const depProp of deps) {\n                    (0, code_1.checkReportMissingProp)(cxt, depProp);\n                }\n            });\n        }\n        else {\n            gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);\n            (0, code_1.reportMissingProp)(cxt, missing);\n            gen.else();\n        }\n    }\n}\nexports.validatePropertyDeps = validatePropertyDeps;\nfunction validateSchemaDeps(cxt, schemaDeps = cxt.schema) {\n    const { gen, data, keyword, it } = cxt;\n    const valid = gen.name(\"valid\");\n    for (const prop in schemaDeps) {\n        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))\n            continue;\n        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {\n            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);\n            cxt.mergeValidEvaluated(schCxt, valid);\n        }, () => gen.var(valid, true) // TODO var\n        );\n        cxt.ok(valid);\n    }\n}\nexports.validateSchemaDeps = validateSchemaDeps;\nexports[\"default\"] = def;\n//# sourceMappingURL=dependencies.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2RlcGVuZGVuY2llcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyw0QkFBNEIsR0FBRyxhQUFhO0FBQ3pFLGtCQUFrQixtQkFBTyxDQUFDLDZIQUF1QjtBQUNqRCxlQUFlLG1CQUFPLENBQUMsaUhBQW9CO0FBQzNDLGVBQWUsbUJBQU8sQ0FBQywyR0FBUztBQUNoQyxhQUFhO0FBQ2IsZ0JBQWdCLFVBQVUsNkJBQTZCO0FBQ3ZEO0FBQ0EsK0NBQStDLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixVQUFVO0FBQy9GLEtBQUs7QUFDTCxlQUFlLFVBQVUsOENBQThDLHdCQUF3QixZQUFZLFNBQVM7QUFDcEgsdUJBQXVCLGdCQUFnQjtBQUN2QyxpQkFBaUIsVUFBVTtBQUMzQixZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLHVDQUF1QyxhQUFhLE1BQU0saURBQWlEO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSxZQUFZLHlCQUF5QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLDJCQUEyQjtBQUN0RTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQixrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvZGVwZW5kZW5jaWVzLmpzP2RkNzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlU2NoZW1hRGVwcyA9IGV4cG9ydHMudmFsaWRhdGVQcm9wZXJ0eURlcHMgPSBleHBvcnRzLmVycm9yID0gdm9pZCAwO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmV4cG9ydHMuZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgcGFyYW1zOiB7IHByb3BlcnR5LCBkZXBzQ291bnQsIGRlcHMgfSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5X2llcyA9IGRlcHNDb3VudCA9PT0gMSA/IFwicHJvcGVydHlcIiA6IFwicHJvcGVydGllc1wiO1xuICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IGhhdmUgJHtwcm9wZXJ0eV9pZXN9ICR7ZGVwc30gd2hlbiBwcm9wZXJ0eSAke3Byb3BlcnR5fSBpcyBwcmVzZW50YDtcbiAgICB9LFxuICAgIHBhcmFtczogKHsgcGFyYW1zOiB7IHByb3BlcnR5LCBkZXBzQ291bnQsIGRlcHMsIG1pc3NpbmdQcm9wZXJ0eSB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtwcm9wZXJ0eTogJHtwcm9wZXJ0eX0sXG4gICAgbWlzc2luZ1Byb3BlcnR5OiAke21pc3NpbmdQcm9wZXJ0eX0sXG4gICAgZGVwc0NvdW50OiAke2RlcHNDb3VudH0sXG4gICAgZGVwczogJHtkZXBzfX1gLCAvLyBUT0RPIGNoYW5nZSB0byByZWZlcmVuY2Vcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJkZXBlbmRlbmNpZXNcIixcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIHNjaGVtYVR5cGU6IFwib2JqZWN0XCIsXG4gICAgZXJyb3I6IGV4cG9ydHMuZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgW3Byb3BEZXBzLCBzY2hEZXBzXSA9IHNwbGl0RGVwZW5kZW5jaWVzKGN4dCk7XG4gICAgICAgIHZhbGlkYXRlUHJvcGVydHlEZXBzKGN4dCwgcHJvcERlcHMpO1xuICAgICAgICB2YWxpZGF0ZVNjaGVtYURlcHMoY3h0LCBzY2hEZXBzKTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHNwbGl0RGVwZW5kZW5jaWVzKHsgc2NoZW1hIH0pIHtcbiAgICBjb25zdCBwcm9wZXJ0eURlcHMgPSB7fTtcbiAgICBjb25zdCBzY2hlbWFEZXBzID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hKSB7XG4gICAgICAgIGlmIChrZXkgPT09IFwiX19wcm90b19fXCIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgZGVwcyA9IEFycmF5LmlzQXJyYXkoc2NoZW1hW2tleV0pID8gcHJvcGVydHlEZXBzIDogc2NoZW1hRGVwcztcbiAgICAgICAgZGVwc1trZXldID0gc2NoZW1hW2tleV07XG4gICAgfVxuICAgIHJldHVybiBbcHJvcGVydHlEZXBzLCBzY2hlbWFEZXBzXTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydHlEZXBzKGN4dCwgcHJvcGVydHlEZXBzID0gY3h0LnNjaGVtYSkge1xuICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBpdCB9ID0gY3h0O1xuICAgIGlmIChPYmplY3Qua2V5cyhwcm9wZXJ0eURlcHMpLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IG1pc3NpbmcgPSBnZW4ubGV0KFwibWlzc2luZ1wiKTtcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gcHJvcGVydHlEZXBzKSB7XG4gICAgICAgIGNvbnN0IGRlcHMgPSBwcm9wZXJ0eURlcHNbcHJvcF07XG4gICAgICAgIGlmIChkZXBzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBoYXNQcm9wZXJ0eSA9ICgwLCBjb2RlXzEucHJvcGVydHlJbkRhdGEpKGdlbiwgZGF0YSwgcHJvcCwgaXQub3B0cy5vd25Qcm9wZXJ0aWVzKTtcbiAgICAgICAgY3h0LnNldFBhcmFtcyh7XG4gICAgICAgICAgICBwcm9wZXJ0eTogcHJvcCxcbiAgICAgICAgICAgIGRlcHNDb3VudDogZGVwcy5sZW5ndGgsXG4gICAgICAgICAgICBkZXBzOiBkZXBzLmpvaW4oXCIsIFwiKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpdC5hbGxFcnJvcnMpIHtcbiAgICAgICAgICAgIGdlbi5pZihoYXNQcm9wZXJ0eSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGVwUHJvcCBvZiBkZXBzKSB7XG4gICAgICAgICAgICAgICAgICAgICgwLCBjb2RlXzEuY2hlY2tSZXBvcnRNaXNzaW5nUHJvcCkoY3h0LCBkZXBQcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2hhc1Byb3BlcnR5fSAmJiAoJHsoMCwgY29kZV8xLmNoZWNrTWlzc2luZ1Byb3ApKGN4dCwgZGVwcywgbWlzc2luZyl9KWApO1xuICAgICAgICAgICAgKDAsIGNvZGVfMS5yZXBvcnRNaXNzaW5nUHJvcCkoY3h0LCBtaXNzaW5nKTtcbiAgICAgICAgICAgIGdlbi5lbHNlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlUHJvcGVydHlEZXBzID0gdmFsaWRhdGVQcm9wZXJ0eURlcHM7XG5mdW5jdGlvbiB2YWxpZGF0ZVNjaGVtYURlcHMoY3h0LCBzY2hlbWFEZXBzID0gY3h0LnNjaGVtYSkge1xuICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBrZXl3b3JkLCBpdCB9ID0gY3h0O1xuICAgIGNvbnN0IHZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gc2NoZW1hRGVwcykge1xuICAgICAgICBpZiAoKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYURlcHNbcHJvcF0pKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGdlbi5pZigoMCwgY29kZV8xLnByb3BlcnR5SW5EYXRhKShnZW4sIGRhdGEsIHByb3AsIGl0Lm9wdHMub3duUHJvcGVydGllcyksICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjaEN4dCA9IGN4dC5zdWJzY2hlbWEoeyBrZXl3b3JkLCBzY2hlbWFQcm9wOiBwcm9wIH0sIHZhbGlkKTtcbiAgICAgICAgICAgIGN4dC5tZXJnZVZhbGlkRXZhbHVhdGVkKHNjaEN4dCwgdmFsaWQpO1xuICAgICAgICB9LCAoKSA9PiBnZW4udmFyKHZhbGlkLCB0cnVlKSAvLyBUT0RPIHZhclxuICAgICAgICApO1xuICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgIH1cbn1cbmV4cG9ydHMudmFsaWRhdGVTY2hlbWFEZXBzID0gdmFsaWRhdGVTY2hlbWFEZXBzO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVwZW5kZW5jaWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/dependencies.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/if.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/if.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: ({ params }) => (0, codegen_1.str) `must match \"${params.ifClause}\" schema`,\n    params: ({ params }) => (0, codegen_1._) `{failingKeyword: ${params.ifClause}}`,\n};\nconst def = {\n    keyword: \"if\",\n    schemaType: [\"object\", \"boolean\"],\n    trackErrors: true,\n    error,\n    code(cxt) {\n        const { gen, parentSchema, it } = cxt;\n        if (parentSchema.then === undefined && parentSchema.else === undefined) {\n            (0, util_1.checkStrictMode)(it, '\"if\" without \"then\" and \"else\" is ignored');\n        }\n        const hasThen = hasSchema(it, \"then\");\n        const hasElse = hasSchema(it, \"else\");\n        if (!hasThen && !hasElse)\n            return;\n        const valid = gen.let(\"valid\", true);\n        const schValid = gen.name(\"_valid\");\n        validateIf();\n        cxt.reset();\n        if (hasThen && hasElse) {\n            const ifClause = gen.let(\"ifClause\");\n            cxt.setParams({ ifClause });\n            gen.if(schValid, validateClause(\"then\", ifClause), validateClause(\"else\", ifClause));\n        }\n        else if (hasThen) {\n            gen.if(schValid, validateClause(\"then\"));\n        }\n        else {\n            gen.if((0, codegen_1.not)(schValid), validateClause(\"else\"));\n        }\n        cxt.pass(valid, () => cxt.error(true));\n        function validateIf() {\n            const schCxt = cxt.subschema({\n                keyword: \"if\",\n                compositeRule: true,\n                createErrors: false,\n                allErrors: false,\n            }, schValid);\n            cxt.mergeEvaluated(schCxt);\n        }\n        function validateClause(keyword, ifClause) {\n            return () => {\n                const schCxt = cxt.subschema({ keyword }, schValid);\n                gen.assign(valid, schValid);\n                cxt.mergeValidEvaluated(schCxt, valid);\n                if (ifClause)\n                    gen.assign(ifClause, (0, codegen_1._) `${keyword}`);\n                else\n                    cxt.setParams({ ifClause: keyword });\n            };\n        }\n    },\n};\nfunction hasSchema(it, keyword) {\n    const schema = it.schema[keyword];\n    return schema !== undefined && !(0, util_1.alwaysValidSchema)(it, schema);\n}\nexports[\"default\"] = def;\n//# sourceMappingURL=if.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2lmLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixtQkFBTyxDQUFDLDZIQUF1QjtBQUNqRCxlQUFlLG1CQUFPLENBQUMsaUhBQW9CO0FBQzNDO0FBQ0EsZ0JBQWdCLFFBQVEsdUNBQXVDLGdCQUFnQjtBQUMvRSxlQUFlLFFBQVEsd0JBQXdCLGtCQUFrQixpQkFBaUI7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0JBQXdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFVBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFNBQVM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELFFBQVE7QUFDckU7QUFDQSxvQ0FBb0MsbUJBQW1CO0FBQ3ZEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci9pZi5qcz85ZWZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBwYXJhbXMgfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IG1hdGNoIFwiJHtwYXJhbXMuaWZDbGF1c2V9XCIgc2NoZW1hYCxcbiAgICBwYXJhbXM6ICh7IHBhcmFtcyB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7ZmFpbGluZ0tleXdvcmQ6ICR7cGFyYW1zLmlmQ2xhdXNlfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImlmXCIsXG4gICAgc2NoZW1hVHlwZTogW1wib2JqZWN0XCIsIFwiYm9vbGVhblwiXSxcbiAgICB0cmFja0Vycm9yczogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgcGFyZW50U2NoZW1hLCBpdCB9ID0gY3h0O1xuICAgICAgICBpZiAocGFyZW50U2NoZW1hLnRoZW4gPT09IHVuZGVmaW5lZCAmJiBwYXJlbnRTY2hlbWEuZWxzZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsICdcImlmXCIgd2l0aG91dCBcInRoZW5cIiBhbmQgXCJlbHNlXCIgaXMgaWdub3JlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhc1RoZW4gPSBoYXNTY2hlbWEoaXQsIFwidGhlblwiKTtcbiAgICAgICAgY29uc3QgaGFzRWxzZSA9IGhhc1NjaGVtYShpdCwgXCJlbHNlXCIpO1xuICAgICAgICBpZiAoIWhhc1RoZW4gJiYgIWhhc0Vsc2UpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIsIHRydWUpO1xuICAgICAgICBjb25zdCBzY2hWYWxpZCA9IGdlbi5uYW1lKFwiX3ZhbGlkXCIpO1xuICAgICAgICB2YWxpZGF0ZUlmKCk7XG4gICAgICAgIGN4dC5yZXNldCgpO1xuICAgICAgICBpZiAoaGFzVGhlbiAmJiBoYXNFbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBpZkNsYXVzZSA9IGdlbi5sZXQoXCJpZkNsYXVzZVwiKTtcbiAgICAgICAgICAgIGN4dC5zZXRQYXJhbXMoeyBpZkNsYXVzZSB9KTtcbiAgICAgICAgICAgIGdlbi5pZihzY2hWYWxpZCwgdmFsaWRhdGVDbGF1c2UoXCJ0aGVuXCIsIGlmQ2xhdXNlKSwgdmFsaWRhdGVDbGF1c2UoXCJlbHNlXCIsIGlmQ2xhdXNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzVGhlbikge1xuICAgICAgICAgICAgZ2VuLmlmKHNjaFZhbGlkLCB2YWxpZGF0ZUNsYXVzZShcInRoZW5cIikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KShzY2hWYWxpZCksIHZhbGlkYXRlQ2xhdXNlKFwiZWxzZVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgY3h0LnBhc3ModmFsaWQsICgpID0+IGN4dC5lcnJvcih0cnVlKSk7XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlSWYoKSB7XG4gICAgICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICBrZXl3b3JkOiBcImlmXCIsXG4gICAgICAgICAgICAgICAgY29tcG9zaXRlUnVsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFcnJvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFsbEVycm9yczogZmFsc2UsXG4gICAgICAgICAgICB9LCBzY2hWYWxpZCk7XG4gICAgICAgICAgICBjeHQubWVyZ2VFdmFsdWF0ZWQoc2NoQ3h0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZUNsYXVzZShrZXl3b3JkLCBpZkNsYXVzZSkge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHsga2V5d29yZCB9LCBzY2hWYWxpZCk7XG4gICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgc2NoVmFsaWQpO1xuICAgICAgICAgICAgICAgIGN4dC5tZXJnZVZhbGlkRXZhbHVhdGVkKHNjaEN4dCwgdmFsaWQpO1xuICAgICAgICAgICAgICAgIGlmIChpZkNsYXVzZSlcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmFzc2lnbihpZkNsYXVzZSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtrZXl3b3JkfWApO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY3h0LnNldFBhcmFtcyh7IGlmQ2xhdXNlOiBrZXl3b3JkIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZnVuY3Rpb24gaGFzU2NoZW1hKGl0LCBrZXl3b3JkKSB7XG4gICAgY29uc3Qgc2NoZW1hID0gaXQuc2NoZW1hW2tleXdvcmRdO1xuICAgIHJldHVybiBzY2hlbWEgIT09IHVuZGVmaW5lZCAmJiAhKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/if.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst additionalItems_1 = __webpack_require__(/*! ./additionalItems */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js\");\nconst prefixItems_1 = __webpack_require__(/*! ./prefixItems */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js\");\nconst items_1 = __webpack_require__(/*! ./items */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/items.js\");\nconst items2020_1 = __webpack_require__(/*! ./items2020 */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/items2020.js\");\nconst contains_1 = __webpack_require__(/*! ./contains */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/contains.js\");\nconst dependencies_1 = __webpack_require__(/*! ./dependencies */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/dependencies.js\");\nconst propertyNames_1 = __webpack_require__(/*! ./propertyNames */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js\");\nconst additionalProperties_1 = __webpack_require__(/*! ./additionalProperties */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js\");\nconst properties_1 = __webpack_require__(/*! ./properties */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/properties.js\");\nconst patternProperties_1 = __webpack_require__(/*! ./patternProperties */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js\");\nconst not_1 = __webpack_require__(/*! ./not */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/not.js\");\nconst anyOf_1 = __webpack_require__(/*! ./anyOf */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/anyOf.js\");\nconst oneOf_1 = __webpack_require__(/*! ./oneOf */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/oneOf.js\");\nconst allOf_1 = __webpack_require__(/*! ./allOf */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/allOf.js\");\nconst if_1 = __webpack_require__(/*! ./if */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/if.js\");\nconst thenElse_1 = __webpack_require__(/*! ./thenElse */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/thenElse.js\");\nfunction getApplicator(draft2020 = false) {\n    const applicator = [\n        // any\n        not_1.default,\n        anyOf_1.default,\n        oneOf_1.default,\n        allOf_1.default,\n        if_1.default,\n        thenElse_1.default,\n        // object\n        propertyNames_1.default,\n        additionalProperties_1.default,\n        dependencies_1.default,\n        properties_1.default,\n        patternProperties_1.default,\n    ];\n    // array\n    if (draft2020)\n        applicator.push(prefixItems_1.default, items2020_1.default);\n    else\n        applicator.push(additionalItems_1.default, items_1.default);\n    applicator.push(contains_1.default);\n    return applicator;\n}\nexports[\"default\"] = getApplicator;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixtQkFBTyxDQUFDLDJJQUFtQjtBQUNyRCxzQkFBc0IsbUJBQU8sQ0FBQyxtSUFBZTtBQUM3QyxnQkFBZ0IsbUJBQU8sQ0FBQyx1SEFBUztBQUNqQyxvQkFBb0IsbUJBQU8sQ0FBQywrSEFBYTtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyw2SEFBWTtBQUN2Qyx1QkFBdUIsbUJBQU8sQ0FBQyxxSUFBZ0I7QUFDL0Msd0JBQXdCLG1CQUFPLENBQUMsdUlBQWlCO0FBQ2pELCtCQUErQixtQkFBTyxDQUFDLHFKQUF3QjtBQUMvRCxxQkFBcUIsbUJBQU8sQ0FBQyxpSUFBYztBQUMzQyw0QkFBNEIsbUJBQU8sQ0FBQywrSUFBcUI7QUFDekQsY0FBYyxtQkFBTyxDQUFDLG1IQUFPO0FBQzdCLGdCQUFnQixtQkFBTyxDQUFDLHVIQUFTO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLHVIQUFTO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLHVIQUFTO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyxpSEFBTTtBQUMzQixtQkFBbUIsbUJBQU8sQ0FBQyw2SEFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvaW5kZXguanM/NDg4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFkZGl0aW9uYWxJdGVtc18xID0gcmVxdWlyZShcIi4vYWRkaXRpb25hbEl0ZW1zXCIpO1xuY29uc3QgcHJlZml4SXRlbXNfMSA9IHJlcXVpcmUoXCIuL3ByZWZpeEl0ZW1zXCIpO1xuY29uc3QgaXRlbXNfMSA9IHJlcXVpcmUoXCIuL2l0ZW1zXCIpO1xuY29uc3QgaXRlbXMyMDIwXzEgPSByZXF1aXJlKFwiLi9pdGVtczIwMjBcIik7XG5jb25zdCBjb250YWluc18xID0gcmVxdWlyZShcIi4vY29udGFpbnNcIik7XG5jb25zdCBkZXBlbmRlbmNpZXNfMSA9IHJlcXVpcmUoXCIuL2RlcGVuZGVuY2llc1wiKTtcbmNvbnN0IHByb3BlcnR5TmFtZXNfMSA9IHJlcXVpcmUoXCIuL3Byb3BlcnR5TmFtZXNcIik7XG5jb25zdCBhZGRpdGlvbmFsUHJvcGVydGllc18xID0gcmVxdWlyZShcIi4vYWRkaXRpb25hbFByb3BlcnRpZXNcIik7XG5jb25zdCBwcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiLi9wcm9wZXJ0aWVzXCIpO1xuY29uc3QgcGF0dGVyblByb3BlcnRpZXNfMSA9IHJlcXVpcmUoXCIuL3BhdHRlcm5Qcm9wZXJ0aWVzXCIpO1xuY29uc3Qgbm90XzEgPSByZXF1aXJlKFwiLi9ub3RcIik7XG5jb25zdCBhbnlPZl8xID0gcmVxdWlyZShcIi4vYW55T2ZcIik7XG5jb25zdCBvbmVPZl8xID0gcmVxdWlyZShcIi4vb25lT2ZcIik7XG5jb25zdCBhbGxPZl8xID0gcmVxdWlyZShcIi4vYWxsT2ZcIik7XG5jb25zdCBpZl8xID0gcmVxdWlyZShcIi4vaWZcIik7XG5jb25zdCB0aGVuRWxzZV8xID0gcmVxdWlyZShcIi4vdGhlbkVsc2VcIik7XG5mdW5jdGlvbiBnZXRBcHBsaWNhdG9yKGRyYWZ0MjAyMCA9IGZhbHNlKSB7XG4gICAgY29uc3QgYXBwbGljYXRvciA9IFtcbiAgICAgICAgLy8gYW55XG4gICAgICAgIG5vdF8xLmRlZmF1bHQsXG4gICAgICAgIGFueU9mXzEuZGVmYXVsdCxcbiAgICAgICAgb25lT2ZfMS5kZWZhdWx0LFxuICAgICAgICBhbGxPZl8xLmRlZmF1bHQsXG4gICAgICAgIGlmXzEuZGVmYXVsdCxcbiAgICAgICAgdGhlbkVsc2VfMS5kZWZhdWx0LFxuICAgICAgICAvLyBvYmplY3RcbiAgICAgICAgcHJvcGVydHlOYW1lc18xLmRlZmF1bHQsXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzXzEuZGVmYXVsdCxcbiAgICAgICAgZGVwZW5kZW5jaWVzXzEuZGVmYXVsdCxcbiAgICAgICAgcHJvcGVydGllc18xLmRlZmF1bHQsXG4gICAgICAgIHBhdHRlcm5Qcm9wZXJ0aWVzXzEuZGVmYXVsdCxcbiAgICBdO1xuICAgIC8vIGFycmF5XG4gICAgaWYgKGRyYWZ0MjAyMClcbiAgICAgICAgYXBwbGljYXRvci5wdXNoKHByZWZpeEl0ZW1zXzEuZGVmYXVsdCwgaXRlbXMyMDIwXzEuZGVmYXVsdCk7XG4gICAgZWxzZVxuICAgICAgICBhcHBsaWNhdG9yLnB1c2goYWRkaXRpb25hbEl0ZW1zXzEuZGVmYXVsdCwgaXRlbXNfMS5kZWZhdWx0KTtcbiAgICBhcHBsaWNhdG9yLnB1c2goY29udGFpbnNfMS5kZWZhdWx0KTtcbiAgICByZXR1cm4gYXBwbGljYXRvcjtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGdldEFwcGxpY2F0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/items.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/items.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateTuple = void 0;\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst code_1 = __webpack_require__(/*! ../code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\");\nconst def = {\n    keyword: \"items\",\n    type: \"array\",\n    schemaType: [\"object\", \"array\", \"boolean\"],\n    before: \"uniqueItems\",\n    code(cxt) {\n        const { schema, it } = cxt;\n        if (Array.isArray(schema))\n            return validateTuple(cxt, \"additionalItems\", schema);\n        it.items = true;\n        if ((0, util_1.alwaysValidSchema)(it, schema))\n            return;\n        cxt.ok((0, code_1.validateArray)(cxt));\n    },\n};\nfunction validateTuple(cxt, extraItems, schArr = cxt.schema) {\n    const { gen, parentSchema, data, keyword, it } = cxt;\n    checkStrictTuple(parentSchema);\n    if (it.opts.unevaluated && schArr.length && it.items !== true) {\n        it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);\n    }\n    const valid = gen.name(\"valid\");\n    const len = gen.const(\"len\", (0, codegen_1._) `${data}.length`);\n    schArr.forEach((sch, i) => {\n        if ((0, util_1.alwaysValidSchema)(it, sch))\n            return;\n        gen.if((0, codegen_1._) `${len} > ${i}`, () => cxt.subschema({\n            keyword,\n            schemaProp: i,\n            dataProp: i,\n        }, valid));\n        cxt.ok(valid);\n    });\n    function checkStrictTuple(sch) {\n        const { opts, errSchemaPath } = it;\n        const l = schArr.length;\n        const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);\n        if (opts.strictTuples && !fullTuple) {\n            const msg = `\"${keyword}\" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path \"${errSchemaPath}\"`;\n            (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);\n        }\n    }\n}\nexports.validateTuple = validateTuple;\nexports[\"default\"] = def;\n//# sourceMappingURL=items.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2l0ZW1zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQixrQkFBa0IsbUJBQU8sQ0FBQyw2SEFBdUI7QUFDakQsZUFBZSxtQkFBTyxDQUFDLGlIQUFvQjtBQUMzQyxlQUFlLG1CQUFPLENBQUMsMkdBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLHVDQUF1QztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELEtBQUs7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLEtBQUssSUFBSSxFQUFFO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBLGdCQUFnQixzQkFBc0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFFBQVEsT0FBTyxFQUFFLG1DQUFtQyxZQUFZLDBDQUEwQyxjQUFjO0FBQ3BKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci9pdGVtcy5qcz83MWViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52YWxpZGF0ZVR1cGxlID0gdm9pZCAwO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcIml0ZW1zXCIsXG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIHNjaGVtYVR5cGU6IFtcIm9iamVjdFwiLCBcImFycmF5XCIsIFwiYm9vbGVhblwiXSxcbiAgICBiZWZvcmU6IFwidW5pcXVlSXRlbXNcIixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IHNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hKSlcbiAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZVR1cGxlKGN4dCwgXCJhZGRpdGlvbmFsSXRlbXNcIiwgc2NoZW1hKTtcbiAgICAgICAgaXQuaXRlbXMgPSB0cnVlO1xuICAgICAgICBpZiAoKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGN4dC5vaygoMCwgY29kZV8xLnZhbGlkYXRlQXJyYXkpKGN4dCkpO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVUdXBsZShjeHQsIGV4dHJhSXRlbXMsIHNjaEFyciA9IGN4dC5zY2hlbWEpIHtcbiAgICBjb25zdCB7IGdlbiwgcGFyZW50U2NoZW1hLCBkYXRhLCBrZXl3b3JkLCBpdCB9ID0gY3h0O1xuICAgIGNoZWNrU3RyaWN0VHVwbGUocGFyZW50U2NoZW1hKTtcbiAgICBpZiAoaXQub3B0cy51bmV2YWx1YXRlZCAmJiBzY2hBcnIubGVuZ3RoICYmIGl0Lml0ZW1zICE9PSB0cnVlKSB7XG4gICAgICAgIGl0Lml0ZW1zID0gdXRpbF8xLm1lcmdlRXZhbHVhdGVkLml0ZW1zKGdlbiwgc2NoQXJyLmxlbmd0aCwgaXQuaXRlbXMpO1xuICAgIH1cbiAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgY29uc3QgbGVuID0gZ2VuLmNvbnN0KFwibGVuXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0ubGVuZ3RoYCk7XG4gICAgc2NoQXJyLmZvckVhY2goKHNjaCwgaSkgPT4ge1xuICAgICAgICBpZiAoKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2xlbn0gPiAke2l9YCwgKCkgPT4gY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgICAgICBrZXl3b3JkLFxuICAgICAgICAgICAgc2NoZW1hUHJvcDogaSxcbiAgICAgICAgICAgIGRhdGFQcm9wOiBpLFxuICAgICAgICB9LCB2YWxpZCkpO1xuICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGNoZWNrU3RyaWN0VHVwbGUoc2NoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0cywgZXJyU2NoZW1hUGF0aCB9ID0gaXQ7XG4gICAgICAgIGNvbnN0IGwgPSBzY2hBcnIubGVuZ3RoO1xuICAgICAgICBjb25zdCBmdWxsVHVwbGUgPSBsID09PSBzY2gubWluSXRlbXMgJiYgKGwgPT09IHNjaC5tYXhJdGVtcyB8fCBzY2hbZXh0cmFJdGVtc10gPT09IGZhbHNlKTtcbiAgICAgICAgaWYgKG9wdHMuc3RyaWN0VHVwbGVzICYmICFmdWxsVHVwbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IGBcIiR7a2V5d29yZH1cIiBpcyAke2x9LXR1cGxlLCBidXQgbWluSXRlbXMgb3IgbWF4SXRlbXMvJHtleHRyYUl0ZW1zfSBhcmUgbm90IHNwZWNpZmllZCBvciBkaWZmZXJlbnQgYXQgcGF0aCBcIiR7ZXJyU2NoZW1hUGF0aH1cImA7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIG1zZywgb3B0cy5zdHJpY3RUdXBsZXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy52YWxpZGF0ZVR1cGxlID0gdmFsaWRhdGVUdXBsZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZW1zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/items.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/items2020.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/items2020.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst code_1 = __webpack_require__(/*! ../code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\");\nconst additionalItems_1 = __webpack_require__(/*! ./additionalItems */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js\");\nconst error = {\n    message: ({ params: { len } }) => (0, codegen_1.str) `must NOT have more than ${len} items`,\n    params: ({ params: { len } }) => (0, codegen_1._) `{limit: ${len}}`,\n};\nconst def = {\n    keyword: \"items\",\n    type: \"array\",\n    schemaType: [\"object\", \"boolean\"],\n    before: \"uniqueItems\",\n    error,\n    code(cxt) {\n        const { schema, parentSchema, it } = cxt;\n        const { prefixItems } = parentSchema;\n        it.items = true;\n        if ((0, util_1.alwaysValidSchema)(it, schema))\n            return;\n        if (prefixItems)\n            (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);\n        else\n            cxt.ok((0, code_1.validateArray)(cxt));\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=items2020.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2l0ZW1zMjAyMC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsbUJBQU8sQ0FBQyw2SEFBdUI7QUFDakQsZUFBZSxtQkFBTyxDQUFDLGlIQUFvQjtBQUMzQyxlQUFlLG1CQUFPLENBQUMsMkdBQVM7QUFDaEMsMEJBQTBCLG1CQUFPLENBQUMsMklBQW1CO0FBQ3JEO0FBQ0EsZ0JBQWdCLFVBQVUsT0FBTyxtREFBbUQsS0FBSztBQUN6RixlQUFlLFVBQVUsT0FBTyx3QkFBd0IsU0FBUyxLQUFLO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMkJBQTJCO0FBQzNDLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2l0ZW1zMjAyMC5qcz8zN2NjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmNvbnN0IGFkZGl0aW9uYWxJdGVtc18xID0gcmVxdWlyZShcIi4vYWRkaXRpb25hbEl0ZW1zXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgcGFyYW1zOiB7IGxlbiB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBOT1QgaGF2ZSBtb3JlIHRoYW4gJHtsZW59IGl0ZW1zYCxcbiAgICBwYXJhbXM6ICh7IHBhcmFtczogeyBsZW4gfSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bGltaXQ6ICR7bGVufX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcIml0ZW1zXCIsXG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIHNjaGVtYVR5cGU6IFtcIm9iamVjdFwiLCBcImJvb2xlYW5cIl0sXG4gICAgYmVmb3JlOiBcInVuaXF1ZUl0ZW1zXCIsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgY29uc3QgeyBwcmVmaXhJdGVtcyB9ID0gcGFyZW50U2NoZW1hO1xuICAgICAgICBpdC5pdGVtcyA9IHRydWU7XG4gICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHByZWZpeEl0ZW1zKVxuICAgICAgICAgICAgKDAsIGFkZGl0aW9uYWxJdGVtc18xLnZhbGlkYXRlQWRkaXRpb25hbEl0ZW1zKShjeHQsIHByZWZpeEl0ZW1zKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY3h0Lm9rKCgwLCBjb2RlXzEudmFsaWRhdGVBcnJheSkoY3h0KSk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVtczIwMjAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/items2020.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/not.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/not.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst def = {\n    keyword: \"not\",\n    schemaType: [\"object\", \"boolean\"],\n    trackErrors: true,\n    code(cxt) {\n        const { gen, schema, it } = cxt;\n        if ((0, util_1.alwaysValidSchema)(it, schema)) {\n            cxt.fail();\n            return;\n        }\n        const valid = gen.name(\"valid\");\n        cxt.subschema({\n            keyword: \"not\",\n            compositeRule: true,\n            createErrors: false,\n            allErrors: false,\n        }, valid);\n        cxt.failResult(valid, () => cxt.reset(), () => cxt.error());\n    },\n    error: { message: \"must NOT be valid\" },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=not.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL25vdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlLG1CQUFPLENBQUMsaUhBQW9CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLGFBQWEsOEJBQThCO0FBQzNDO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL25vdC5qcz8xZTRkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcIm5vdFwiLFxuICAgIHNjaGVtYVR5cGU6IFtcIm9iamVjdFwiLCBcImJvb2xlYW5cIl0sXG4gICAgdHJhY2tFcnJvcnM6IHRydWUsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgaWYgKCgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWEpKSB7XG4gICAgICAgICAgICBjeHQuZmFpbCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICAgICAgY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgICAgICBrZXl3b3JkOiBcIm5vdFwiLFxuICAgICAgICAgICAgY29tcG9zaXRlUnVsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNyZWF0ZUVycm9yczogZmFsc2UsXG4gICAgICAgICAgICBhbGxFcnJvcnM6IGZhbHNlLFxuICAgICAgICB9LCB2YWxpZCk7XG4gICAgICAgIGN4dC5mYWlsUmVzdWx0KHZhbGlkLCAoKSA9PiBjeHQucmVzZXQoKSwgKCkgPT4gY3h0LmVycm9yKCkpO1xuICAgIH0sXG4gICAgZXJyb3I6IHsgbWVzc2FnZTogXCJtdXN0IE5PVCBiZSB2YWxpZFwiIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm90LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/not.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/oneOf.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/oneOf.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: \"must match exactly one schema in oneOf\",\n    params: ({ params }) => (0, codegen_1._) `{passingSchemas: ${params.passing}}`,\n};\nconst def = {\n    keyword: \"oneOf\",\n    schemaType: \"array\",\n    trackErrors: true,\n    error,\n    code(cxt) {\n        const { gen, schema, parentSchema, it } = cxt;\n        /* istanbul ignore if */\n        if (!Array.isArray(schema))\n            throw new Error(\"ajv implementation error\");\n        if (it.opts.discriminator && parentSchema.discriminator)\n            return;\n        const schArr = schema;\n        const valid = gen.let(\"valid\", false);\n        const passing = gen.let(\"passing\", null);\n        const schValid = gen.name(\"_valid\");\n        cxt.setParams({ passing });\n        // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas\n        gen.block(validateOneOf);\n        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));\n        function validateOneOf() {\n            schArr.forEach((sch, i) => {\n                let schCxt;\n                if ((0, util_1.alwaysValidSchema)(it, sch)) {\n                    gen.var(schValid, true);\n                }\n                else {\n                    schCxt = cxt.subschema({\n                        keyword: \"oneOf\",\n                        schemaProp: i,\n                        compositeRule: true,\n                    }, schValid);\n                }\n                if (i > 0) {\n                    gen\n                        .if((0, codegen_1._) `${schValid} && ${valid}`)\n                        .assign(valid, false)\n                        .assign(passing, (0, codegen_1._) `[${passing}, ${i}]`)\n                        .else();\n                }\n                gen.if(schValid, () => {\n                    gen.assign(valid, true);\n                    gen.assign(passing, i);\n                    if (schCxt)\n                        cxt.mergeEvaluated(schCxt, codegen_1.Name);\n                });\n            });\n        }\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=oneOf.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL29uZU9mLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixtQkFBTyxDQUFDLDZIQUF1QjtBQUNqRCxlQUFlLG1CQUFPLENBQUMsaUhBQW9CO0FBQzNDO0FBQ0E7QUFDQSxlQUFlLFFBQVEsd0JBQXdCLGtCQUFrQixnQkFBZ0I7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0NBQWdDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixTQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELFVBQVUsS0FBSyxNQUFNO0FBQ3JFO0FBQ0EsOERBQThELFFBQVEsSUFBSSxFQUFFO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci9vbmVPZi5qcz8yMTQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiBcIm11c3QgbWF0Y2ggZXhhY3RseSBvbmUgc2NoZW1hIGluIG9uZU9mXCIsXG4gICAgcGFyYW1zOiAoeyBwYXJhbXMgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge3Bhc3NpbmdTY2hlbWFzOiAke3BhcmFtcy5wYXNzaW5nfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcIm9uZU9mXCIsXG4gICAgc2NoZW1hVHlwZTogXCJhcnJheVwiLFxuICAgIHRyYWNrRXJyb3JzOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzY2hlbWEpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICBpZiAoaXQub3B0cy5kaXNjcmltaW5hdG9yICYmIHBhcmVudFNjaGVtYS5kaXNjcmltaW5hdG9yKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBzY2hBcnIgPSBzY2hlbWE7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgcGFzc2luZyA9IGdlbi5sZXQoXCJwYXNzaW5nXCIsIG51bGwpO1xuICAgICAgICBjb25zdCBzY2hWYWxpZCA9IGdlbi5uYW1lKFwiX3ZhbGlkXCIpO1xuICAgICAgICBjeHQuc2V0UGFyYW1zKHsgcGFzc2luZyB9KTtcbiAgICAgICAgLy8gVE9ETyBwb3NzaWJseSBmYWlsIHN0cmFpZ2h0IGF3YXkgKHdpdGggd2FybmluZyBvciBleGNlcHRpb24pIGlmIHRoZXJlIGFyZSB0d28gZW1wdHkgYWx3YXlzIHZhbGlkIHNjaGVtYXNcbiAgICAgICAgZ2VuLmJsb2NrKHZhbGlkYXRlT25lT2YpO1xuICAgICAgICBjeHQucmVzdWx0KHZhbGlkLCAoKSA9PiBjeHQucmVzZXQoKSwgKCkgPT4gY3h0LmVycm9yKHRydWUpKTtcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVPbmVPZigpIHtcbiAgICAgICAgICAgIHNjaEFyci5mb3JFYWNoKChzY2gsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc2NoQ3h0O1xuICAgICAgICAgICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoKSkge1xuICAgICAgICAgICAgICAgICAgICBnZW4udmFyKHNjaFZhbGlkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNjaEN4dCA9IGN4dC5zdWJzY2hlbWEoe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5d29yZDogXCJvbmVPZlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hUHJvcDogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0sIHNjaFZhbGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgICAgICAgICAgLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7c2NoVmFsaWR9ICYmICR7dmFsaWR9YClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hc3NpZ24odmFsaWQsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFzc2lnbihwYXNzaW5nLCAoMCwgY29kZWdlbl8xLl8pIGBbJHtwYXNzaW5nfSwgJHtpfV1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVsc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2VuLmlmKHNjaFZhbGlkLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHBhc3NpbmcsIGkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NoQ3h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgY3h0Lm1lcmdlRXZhbHVhdGVkKHNjaEN4dCwgY29kZWdlbl8xLk5hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9uZU9mLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/oneOf.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst code_1 = __webpack_require__(/*! ../code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst util_2 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst def = {\n    keyword: \"patternProperties\",\n    type: \"object\",\n    schemaType: \"object\",\n    code(cxt) {\n        const { gen, schema, data, parentSchema, it } = cxt;\n        const { opts } = it;\n        const patterns = (0, code_1.allSchemaProperties)(schema);\n        const alwaysValidPatterns = patterns.filter((p) => (0, util_1.alwaysValidSchema)(it, schema[p]));\n        if (patterns.length === 0 ||\n            (alwaysValidPatterns.length === patterns.length &&\n                (!it.opts.unevaluated || it.props === true))) {\n            return;\n        }\n        const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;\n        const valid = gen.name(\"valid\");\n        if (it.props !== true && !(it.props instanceof codegen_1.Name)) {\n            it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);\n        }\n        const { props } = it;\n        validatePatternProperties();\n        function validatePatternProperties() {\n            for (const pat of patterns) {\n                if (checkProperties)\n                    checkMatchingProperties(pat);\n                if (it.allErrors) {\n                    validateProperties(pat);\n                }\n                else {\n                    gen.var(valid, true); // TODO var\n                    validateProperties(pat);\n                    gen.if(valid);\n                }\n            }\n        }\n        function checkMatchingProperties(pat) {\n            for (const prop in checkProperties) {\n                if (new RegExp(pat).test(prop)) {\n                    (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);\n                }\n            }\n        }\n        function validateProperties(pat) {\n            gen.forIn(\"key\", data, (key) => {\n                gen.if((0, codegen_1._) `${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {\n                    const alwaysValid = alwaysValidPatterns.includes(pat);\n                    if (!alwaysValid) {\n                        cxt.subschema({\n                            keyword: \"patternProperties\",\n                            schemaProp: pat,\n                            dataProp: key,\n                            dataPropType: util_2.Type.Str,\n                        }, valid);\n                    }\n                    if (it.opts.unevaluated && props !== true) {\n                        gen.assign((0, codegen_1._) `${props}[${key}]`, true);\n                    }\n                    else if (!alwaysValid && !it.allErrors) {\n                        // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)\n                        // or if all properties were evaluated (props === true)\n                        gen.if((0, codegen_1.not)(valid), () => gen.break());\n                    }\n                });\n            });\n        }\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=patternProperties.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3BhdHRlcm5Qcm9wZXJ0aWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsbUJBQU8sQ0FBQywyR0FBUztBQUNoQyxrQkFBa0IsbUJBQU8sQ0FBQyw2SEFBdUI7QUFDakQsZUFBZSxtQkFBTyxDQUFDLGlIQUFvQjtBQUMzQyxlQUFlLG1CQUFPLENBQUMsaUhBQW9CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isc0NBQXNDO0FBQ3RELGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLE1BQU0sa0JBQWtCLEtBQUs7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxpQ0FBaUMsUUFBUSxJQUFJO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSx1REFBdUQsTUFBTSxHQUFHLElBQUk7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci9wYXR0ZXJuUHJvcGVydGllcy5qcz8wMGViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IHV0aWxfMiA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJwYXR0ZXJuUHJvcGVydGllc1wiLFxuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgc2NoZW1hVHlwZTogXCJvYmplY3RcIixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCBkYXRhLCBwYXJlbnRTY2hlbWEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGNvbnN0IHsgb3B0cyB9ID0gaXQ7XG4gICAgICAgIGNvbnN0IHBhdHRlcm5zID0gKDAsIGNvZGVfMS5hbGxTY2hlbWFQcm9wZXJ0aWVzKShzY2hlbWEpO1xuICAgICAgICBjb25zdCBhbHdheXNWYWxpZFBhdHRlcm5zID0gcGF0dGVybnMuZmlsdGVyKChwKSA9PiAoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hW3BdKSk7XG4gICAgICAgIGlmIChwYXR0ZXJucy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAgIChhbHdheXNWYWxpZFBhdHRlcm5zLmxlbmd0aCA9PT0gcGF0dGVybnMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgKCFpdC5vcHRzLnVuZXZhbHVhdGVkIHx8IGl0LnByb3BzID09PSB0cnVlKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGVja1Byb3BlcnRpZXMgPSBvcHRzLnN0cmljdFNjaGVtYSAmJiAhb3B0cy5hbGxvd01hdGNoaW5nUHJvcGVydGllcyAmJiBwYXJlbnRTY2hlbWEucHJvcGVydGllcztcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICBpZiAoaXQucHJvcHMgIT09IHRydWUgJiYgIShpdC5wcm9wcyBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lKSkge1xuICAgICAgICAgICAgaXQucHJvcHMgPSAoMCwgdXRpbF8yLmV2YWx1YXRlZFByb3BzVG9OYW1lKShnZW4sIGl0LnByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHByb3BzIH0gPSBpdDtcbiAgICAgICAgdmFsaWRhdGVQYXR0ZXJuUHJvcGVydGllcygpO1xuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZVBhdHRlcm5Qcm9wZXJ0aWVzKCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwYXQgb2YgcGF0dGVybnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tQcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgICAgICBjaGVja01hdGNoaW5nUHJvcGVydGllcyhwYXQpO1xuICAgICAgICAgICAgICAgIGlmIChpdC5hbGxFcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVQcm9wZXJ0aWVzKHBhdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZW4udmFyKHZhbGlkLCB0cnVlKTsgLy8gVE9ETyB2YXJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVQcm9wZXJ0aWVzKHBhdCk7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5pZih2YWxpZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrTWF0Y2hpbmdQcm9wZXJ0aWVzKHBhdCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIGNoZWNrUHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIGlmIChuZXcgUmVnRXhwKHBhdCkudGVzdChwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIGBwcm9wZXJ0eSAke3Byb3B9IG1hdGNoZXMgcGF0dGVybiAke3BhdH0gKHVzZSBhbGxvd01hdGNoaW5nUHJvcGVydGllcylgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0aWVzKHBhdCkge1xuICAgICAgICAgICAgZ2VuLmZvckluKFwia2V5XCIsIGRhdGEsIChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHsoMCwgY29kZV8xLnVzZVBhdHRlcm4pKGN4dCwgcGF0KX0udGVzdCgke2tleX0pYCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbHdheXNWYWxpZCA9IGFsd2F5c1ZhbGlkUGF0dGVybnMuaW5jbHVkZXMocGF0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbHdheXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5d29yZDogXCJwYXR0ZXJuUHJvcGVydGllc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjaGVtYVByb3A6IHBhdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhUHJvcDoga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFQcm9wVHlwZTogdXRpbF8yLlR5cGUuU3RyLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdmFsaWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC5vcHRzLnVuZXZhbHVhdGVkICYmIHByb3BzICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7cHJvcHN9WyR7a2V5fV1gLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghYWx3YXlzVmFsaWQgJiYgIWl0LmFsbEVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FuIHNob3J0LWNpcmN1aXQgaWYgYHVuZXZhbHVhdGVkUHJvcGVydGllc2AgaXMgbm90IHN1cHBvcnRlZCAob3B0cy5uZXh0ID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9yIGlmIGFsbCBwcm9wZXJ0aWVzIHdlcmUgZXZhbHVhdGVkIChwcm9wcyA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLm5vdCkodmFsaWQpLCAoKSA9PiBnZW4uYnJlYWsoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXR0ZXJuUHJvcGVydGllcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst items_1 = __webpack_require__(/*! ./items */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/items.js\");\nconst def = {\n    keyword: \"prefixItems\",\n    type: \"array\",\n    schemaType: [\"array\"],\n    before: \"uniqueItems\",\n    code: (cxt) => (0, items_1.validateTuple)(cxt, \"items\"),\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=prefixItems.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3ByZWZpeEl0ZW1zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLHVIQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3ByZWZpeEl0ZW1zLmpzP2FmODMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpdGVtc18xID0gcmVxdWlyZShcIi4vaXRlbXNcIik7XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJwcmVmaXhJdGVtc1wiLFxuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJhcnJheVwiXSxcbiAgICBiZWZvcmU6IFwidW5pcXVlSXRlbXNcIixcbiAgICBjb2RlOiAoY3h0KSA9PiAoMCwgaXRlbXNfMS52YWxpZGF0ZVR1cGxlKShjeHQsIFwiaXRlbXNcIiksXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlZml4SXRlbXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/properties.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/properties.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst validate_1 = __webpack_require__(/*! ../../compile/validate */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/index.js\");\nconst code_1 = __webpack_require__(/*! ../code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst additionalProperties_1 = __webpack_require__(/*! ./additionalProperties */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js\");\nconst def = {\n    keyword: \"properties\",\n    type: \"object\",\n    schemaType: \"object\",\n    code(cxt) {\n        const { gen, schema, parentSchema, data, it } = cxt;\n        if (it.opts.removeAdditional === \"all\" && parentSchema.additionalProperties === undefined) {\n            additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, \"additionalProperties\"));\n        }\n        const allProps = (0, code_1.allSchemaProperties)(schema);\n        for (const prop of allProps) {\n            it.definedProperties.add(prop);\n        }\n        if (it.opts.unevaluated && allProps.length && it.props !== true) {\n            it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);\n        }\n        const properties = allProps.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema[p]));\n        if (properties.length === 0)\n            return;\n        const valid = gen.name(\"valid\");\n        for (const prop of properties) {\n            if (hasDefault(prop)) {\n                applyPropertySchema(prop);\n            }\n            else {\n                gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));\n                applyPropertySchema(prop);\n                if (!it.allErrors)\n                    gen.else().var(valid, true);\n                gen.endIf();\n            }\n            cxt.it.definedProperties.add(prop);\n            cxt.ok(valid);\n        }\n        function hasDefault(prop) {\n            return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;\n        }\n        function applyPropertySchema(prop) {\n            cxt.subschema({\n                keyword: \"properties\",\n                schemaProp: prop,\n                dataProp: prop,\n            }, valid);\n        }\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=properties.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3Byb3BlcnRpZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLG1CQUFPLENBQUMsK0hBQXdCO0FBQ25ELGVBQWUsbUJBQU8sQ0FBQywyR0FBUztBQUNoQyxlQUFlLG1CQUFPLENBQUMsaUhBQW9CO0FBQzNDLCtCQUErQixtQkFBTyxDQUFDLHFKQUF3QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvcHJvcGVydGllcy5qcz9lYTQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdmFsaWRhdGVfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3ZhbGlkYXRlXCIpO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgYWRkaXRpb25hbFByb3BlcnRpZXNfMSA9IHJlcXVpcmUoXCIuL2FkZGl0aW9uYWxQcm9wZXJ0aWVzXCIpO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwicHJvcGVydGllc1wiLFxuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgc2NoZW1hVHlwZTogXCJvYmplY3RcIixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIGRhdGEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmIChpdC5vcHRzLnJlbW92ZUFkZGl0aW9uYWwgPT09IFwiYWxsXCIgJiYgcGFyZW50U2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzXzEuZGVmYXVsdC5jb2RlKG5ldyB2YWxpZGF0ZV8xLktleXdvcmRDeHQoaXQsIGFkZGl0aW9uYWxQcm9wZXJ0aWVzXzEuZGVmYXVsdCwgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWxsUHJvcHMgPSAoMCwgY29kZV8xLmFsbFNjaGVtYVByb3BlcnRpZXMpKHNjaGVtYSk7XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBhbGxQcm9wcykge1xuICAgICAgICAgICAgaXQuZGVmaW5lZFByb3BlcnRpZXMuYWRkKHByb3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdC5vcHRzLnVuZXZhbHVhdGVkICYmIGFsbFByb3BzLmxlbmd0aCAmJiBpdC5wcm9wcyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgaXQucHJvcHMgPSB1dGlsXzEubWVyZ2VFdmFsdWF0ZWQucHJvcHMoZ2VuLCAoMCwgdXRpbF8xLnRvSGFzaCkoYWxsUHJvcHMpLCBpdC5wcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IGFsbFByb3BzLmZpbHRlcigocCkgPT4gISgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWFbcF0pKTtcbiAgICAgICAgaWYgKHByb3BlcnRpZXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBpZiAoaGFzRGVmYXVsdChwcm9wKSkge1xuICAgICAgICAgICAgICAgIGFwcGx5UHJvcGVydHlTY2hlbWEocHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVfMS5wcm9wZXJ0eUluRGF0YSkoZ2VuLCBkYXRhLCBwcm9wLCBpdC5vcHRzLm93blByb3BlcnRpZXMpKTtcbiAgICAgICAgICAgICAgICBhcHBseVByb3BlcnR5U2NoZW1hKHByb3ApO1xuICAgICAgICAgICAgICAgIGlmICghaXQuYWxsRXJyb3JzKVxuICAgICAgICAgICAgICAgICAgICBnZW4uZWxzZSgpLnZhcih2YWxpZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgZ2VuLmVuZElmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjeHQuaXQuZGVmaW5lZFByb3BlcnRpZXMuYWRkKHByb3ApO1xuICAgICAgICAgICAgY3h0Lm9rKHZhbGlkKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBoYXNEZWZhdWx0KHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBpdC5vcHRzLnVzZURlZmF1bHRzICYmICFpdC5jb21wb3NpdGVSdWxlICYmIHNjaGVtYVtwcm9wXS5kZWZhdWx0ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlQcm9wZXJ0eVNjaGVtYShwcm9wKSB7XG4gICAgICAgICAgICBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICBrZXl3b3JkOiBcInByb3BlcnRpZXNcIixcbiAgICAgICAgICAgICAgICBzY2hlbWFQcm9wOiBwcm9wLFxuICAgICAgICAgICAgICAgIGRhdGFQcm9wOiBwcm9wLFxuICAgICAgICAgICAgfSwgdmFsaWQpO1xuICAgICAgICB9XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0aWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/properties.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: \"property name must be valid\",\n    params: ({ params }) => (0, codegen_1._) `{propertyName: ${params.propertyName}}`,\n};\nconst def = {\n    keyword: \"propertyNames\",\n    type: \"object\",\n    schemaType: [\"object\", \"boolean\"],\n    error,\n    code(cxt) {\n        const { gen, schema, data, it } = cxt;\n        if ((0, util_1.alwaysValidSchema)(it, schema))\n            return;\n        const valid = gen.name(\"valid\");\n        gen.forIn(\"key\", data, (key) => {\n            cxt.setParams({ propertyName: key });\n            cxt.subschema({\n                keyword: \"propertyNames\",\n                data: key,\n                dataTypes: [\"string\"],\n                propertyName: key,\n                compositeRule: true,\n            }, valid);\n            gen.if((0, codegen_1.not)(valid), () => {\n                cxt.error(true);\n                if (!it.allErrors)\n                    gen.break();\n            });\n        });\n        cxt.ok(valid);\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=propertyNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3Byb3BlcnR5TmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLG1CQUFPLENBQUMsNkhBQXVCO0FBQ2pELGVBQWUsbUJBQU8sQ0FBQyxpSEFBb0I7QUFDM0M7QUFDQTtBQUNBLGVBQWUsUUFBUSx3QkFBd0IsZ0JBQWdCLHFCQUFxQjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix3QkFBd0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUJBQW1CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvcHJvcGVydHlOYW1lcy5qcz83ZWUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiBcInByb3BlcnR5IG5hbWUgbXVzdCBiZSB2YWxpZFwiLFxuICAgIHBhcmFtczogKHsgcGFyYW1zIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtwcm9wZXJ0eU5hbWU6ICR7cGFyYW1zLnByb3BlcnR5TmFtZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJwcm9wZXJ0eU5hbWVzXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJib29sZWFuXCJdLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGRhdGEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICBnZW4uZm9ySW4oXCJrZXlcIiwgZGF0YSwgKGtleSkgPT4ge1xuICAgICAgICAgICAgY3h0LnNldFBhcmFtcyh7IHByb3BlcnR5TmFtZToga2V5IH0pO1xuICAgICAgICAgICAgY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgICAgICAgICAga2V5d29yZDogXCJwcm9wZXJ0eU5hbWVzXCIsXG4gICAgICAgICAgICAgICAgZGF0YToga2V5LFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlczogW1wic3RyaW5nXCJdLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZToga2V5LFxuICAgICAgICAgICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgICAgICAgICB9LCB2YWxpZCk7XG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGN4dC5lcnJvcih0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoIWl0LmFsbEVycm9ycylcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmJyZWFrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGN4dC5vayh2YWxpZCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0eU5hbWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/thenElse.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/thenElse.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst def = {\n    keyword: [\"then\", \"else\"],\n    schemaType: [\"object\", \"boolean\"],\n    code({ keyword, parentSchema, it }) {\n        if (parentSchema.if === undefined)\n            (0, util_1.checkStrictMode)(it, `\"${keyword}\" without \"if\" is ignored`);\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=thenElse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3RoZW5FbHNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsbUJBQU8sQ0FBQyxpSEFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsV0FBVywyQkFBMkI7QUFDdEM7QUFDQSxnREFBZ0QsUUFBUTtBQUN4RCxLQUFLO0FBQ0w7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvdGhlbkVsc2UuanM/NmRkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogW1widGhlblwiLCBcImVsc2VcIl0sXG4gICAgc2NoZW1hVHlwZTogW1wib2JqZWN0XCIsIFwiYm9vbGVhblwiXSxcbiAgICBjb2RlKHsga2V5d29yZCwgcGFyZW50U2NoZW1hLCBpdCB9KSB7XG4gICAgICAgIGlmIChwYXJlbnRTY2hlbWEuaWYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgYFwiJHtrZXl3b3JkfVwiIHdpdGhvdXQgXCJpZlwiIGlzIGlnbm9yZWRgKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRoZW5FbHNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/thenElse.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;\nconst codegen_1 = __webpack_require__(/*! ../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst names_1 = __webpack_require__(/*! ../compile/names */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/names.js\");\nconst util_2 = __webpack_require__(/*! ../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nfunction checkReportMissingProp(cxt, prop) {\n    const { gen, data, it } = cxt;\n    gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {\n        cxt.setParams({ missingProperty: (0, codegen_1._) `${prop}` }, true);\n        cxt.error();\n    });\n}\nexports.checkReportMissingProp = checkReportMissingProp;\nfunction checkMissingProp({ gen, data, it: { opts } }, properties, missing) {\n    return (0, codegen_1.or)(...properties.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._) `${missing} = ${prop}`)));\n}\nexports.checkMissingProp = checkMissingProp;\nfunction reportMissingProp(cxt, missing) {\n    cxt.setParams({ missingProperty: missing }, true);\n    cxt.error();\n}\nexports.reportMissingProp = reportMissingProp;\nfunction hasPropFunc(gen) {\n    return gen.scopeValue(\"func\", {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        ref: Object.prototype.hasOwnProperty,\n        code: (0, codegen_1._) `Object.prototype.hasOwnProperty`,\n    });\n}\nexports.hasPropFunc = hasPropFunc;\nfunction isOwnProperty(gen, data, property) {\n    return (0, codegen_1._) `${hasPropFunc(gen)}.call(${data}, ${property})`;\n}\nexports.isOwnProperty = isOwnProperty;\nfunction propertyInData(gen, data, property, ownProperties) {\n    const cond = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(property)} !== undefined`;\n    return ownProperties ? (0, codegen_1._) `${cond} && ${isOwnProperty(gen, data, property)}` : cond;\n}\nexports.propertyInData = propertyInData;\nfunction noPropertyInData(gen, data, property, ownProperties) {\n    const cond = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(property)} === undefined`;\n    return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;\n}\nexports.noPropertyInData = noPropertyInData;\nfunction allSchemaProperties(schemaMap) {\n    return schemaMap ? Object.keys(schemaMap).filter((p) => p !== \"__proto__\") : [];\n}\nexports.allSchemaProperties = allSchemaProperties;\nfunction schemaProperties(it, schemaMap) {\n    return allSchemaProperties(schemaMap).filter((p) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));\n}\nexports.schemaProperties = schemaProperties;\nfunction callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {\n    const dataAndSchema = passSchema ? (0, codegen_1._) `${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;\n    const valCxt = [\n        [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],\n        [names_1.default.parentData, it.parentData],\n        [names_1.default.parentDataProperty, it.parentDataProperty],\n        [names_1.default.rootData, names_1.default.rootData],\n    ];\n    if (it.opts.dynamicRef)\n        valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);\n    const args = (0, codegen_1._) `${dataAndSchema}, ${gen.object(...valCxt)}`;\n    return context !== codegen_1.nil ? (0, codegen_1._) `${func}.call(${context}, ${args})` : (0, codegen_1._) `${func}(${args})`;\n}\nexports.callValidateCode = callValidateCode;\nconst newRegExp = (0, codegen_1._) `new RegExp`;\nfunction usePattern({ gen, it: { opts } }, pattern) {\n    const u = opts.unicodeRegExp ? \"u\" : \"\";\n    const { regExp } = opts.code;\n    const rx = regExp(pattern, u);\n    return gen.scopeValue(\"pattern\", {\n        key: rx.toString(),\n        ref: rx,\n        code: (0, codegen_1._) `${regExp.code === \"new RegExp\" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`,\n    });\n}\nexports.usePattern = usePattern;\nfunction validateArray(cxt) {\n    const { gen, data, keyword, it } = cxt;\n    const valid = gen.name(\"valid\");\n    if (it.allErrors) {\n        const validArr = gen.let(\"valid\", true);\n        validateItems(() => gen.assign(validArr, false));\n        return validArr;\n    }\n    gen.var(valid, true);\n    validateItems(() => gen.break());\n    return valid;\n    function validateItems(notValid) {\n        const len = gen.const(\"len\", (0, codegen_1._) `${data}.length`);\n        gen.forRange(\"i\", 0, len, (i) => {\n            cxt.subschema({\n                keyword,\n                dataProp: i,\n                dataPropType: util_1.Type.Num,\n            }, valid);\n            gen.if((0, codegen_1.not)(valid), notValid);\n        });\n    }\n}\nexports.validateArray = validateArray;\nfunction validateUnion(cxt) {\n    const { gen, schema, keyword, it } = cxt;\n    /* istanbul ignore if */\n    if (!Array.isArray(schema))\n        throw new Error(\"ajv implementation error\");\n    const alwaysValid = schema.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));\n    if (alwaysValid && !it.opts.unevaluated)\n        return;\n    const valid = gen.let(\"valid\", false);\n    const schValid = gen.name(\"_valid\");\n    gen.block(() => schema.forEach((_sch, i) => {\n        const schCxt = cxt.subschema({\n            keyword,\n            schemaProp: i,\n            compositeRule: true,\n        }, schValid);\n        gen.assign(valid, (0, codegen_1._) `${valid} || ${schValid}`);\n        const merged = cxt.mergeValidEvaluated(schCxt, schValid);\n        // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)\n        // or if all properties and items were evaluated (it.props === true && it.items === true)\n        if (!merged)\n            gen.if((0, codegen_1.not)(valid));\n    }));\n    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));\n}\nexports.validateUnion = validateUnion;\n//# sourceMappingURL=code.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/id.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/id.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst def = {\n    keyword: \"id\",\n    code() {\n        throw new Error('NOT SUPPORTED: keyword \"id\", use \"$id\" for schema ID');\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=id.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9jb3JlL2lkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9jb3JlL2lkLmpzPzcyNDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJpZFwiLFxuICAgIGNvZGUoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTk9UIFNVUFBPUlRFRDoga2V5d29yZCBcImlkXCIsIHVzZSBcIiRpZFwiIGZvciBzY2hlbWEgSUQnKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/id.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst id_1 = __webpack_require__(/*! ./id */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/id.js\");\nconst ref_1 = __webpack_require__(/*! ./ref */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/ref.js\");\nconst core = [\n    \"$schema\",\n    \"$id\",\n    \"$defs\",\n    \"$vocabulary\",\n    { keyword: \"$comment\" },\n    \"definitions\",\n    id_1.default,\n    ref_1.default,\n];\nexports[\"default\"] = core;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9jb3JlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQywyR0FBTTtBQUMzQixjQUFjLG1CQUFPLENBQUMsNkdBQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0scUJBQXFCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9jb3JlL2luZGV4LmpzPzUxYmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpZF8xID0gcmVxdWlyZShcIi4vaWRcIik7XG5jb25zdCByZWZfMSA9IHJlcXVpcmUoXCIuL3JlZlwiKTtcbmNvbnN0IGNvcmUgPSBbXG4gICAgXCIkc2NoZW1hXCIsXG4gICAgXCIkaWRcIixcbiAgICBcIiRkZWZzXCIsXG4gICAgXCIkdm9jYWJ1bGFyeVwiLFxuICAgIHsga2V5d29yZDogXCIkY29tbWVudFwiIH0sXG4gICAgXCJkZWZpbml0aW9uc1wiLFxuICAgIGlkXzEuZGVmYXVsdCxcbiAgICByZWZfMS5kZWZhdWx0LFxuXTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNvcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/ref.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/ref.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.callRef = exports.getValidate = void 0;\nconst ref_error_1 = __webpack_require__(/*! ../../compile/ref_error */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/ref_error.js\");\nconst code_1 = __webpack_require__(/*! ../code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names_1 = __webpack_require__(/*! ../../compile/names */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/names.js\");\nconst compile_1 = __webpack_require__(/*! ../../compile */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst def = {\n    keyword: \"$ref\",\n    schemaType: \"string\",\n    code(cxt) {\n        const { gen, schema: $ref, it } = cxt;\n        const { baseId, schemaEnv: env, validateName, opts, self } = it;\n        const { root } = env;\n        if (($ref === \"#\" || $ref === \"#/\") && baseId === root.baseId)\n            return callRootRef();\n        const schOrEnv = compile_1.resolveRef.call(self, root, baseId, $ref);\n        if (schOrEnv === undefined)\n            throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);\n        if (schOrEnv instanceof compile_1.SchemaEnv)\n            return callValidate(schOrEnv);\n        return inlineRefSchema(schOrEnv);\n        function callRootRef() {\n            if (env === root)\n                return callRef(cxt, validateName, env, env.$async);\n            const rootName = gen.scopeValue(\"root\", { ref: root });\n            return callRef(cxt, (0, codegen_1._) `${rootName}.validate`, root, root.$async);\n        }\n        function callValidate(sch) {\n            const v = getValidate(cxt, sch);\n            callRef(cxt, v, sch, sch.$async);\n        }\n        function inlineRefSchema(sch) {\n            const schName = gen.scopeValue(\"schema\", opts.code.source === true ? { ref: sch, code: (0, codegen_1.stringify)(sch) } : { ref: sch });\n            const valid = gen.name(\"valid\");\n            const schCxt = cxt.subschema({\n                schema: sch,\n                dataTypes: [],\n                schemaPath: codegen_1.nil,\n                topSchemaRef: schName,\n                errSchemaPath: $ref,\n            }, valid);\n            cxt.mergeEvaluated(schCxt);\n            cxt.ok(valid);\n        }\n    },\n};\nfunction getValidate(cxt, sch) {\n    const { gen } = cxt;\n    return sch.validate\n        ? gen.scopeValue(\"validate\", { ref: sch.validate })\n        : (0, codegen_1._) `${gen.scopeValue(\"wrapper\", { ref: sch })}.validate`;\n}\nexports.getValidate = getValidate;\nfunction callRef(cxt, v, sch, $async) {\n    const { gen, it } = cxt;\n    const { allErrors, schemaEnv: env, opts } = it;\n    const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;\n    if ($async)\n        callAsyncRef();\n    else\n        callSyncRef();\n    function callAsyncRef() {\n        if (!env.$async)\n            throw new Error(\"async schema referenced by sync schema\");\n        const valid = gen.let(\"valid\");\n        gen.try(() => {\n            gen.code((0, codegen_1._) `await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);\n            addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result\n            if (!allErrors)\n                gen.assign(valid, true);\n        }, (e) => {\n            gen.if((0, codegen_1._) `!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));\n            addErrorsFrom(e);\n            if (!allErrors)\n                gen.assign(valid, false);\n        });\n        cxt.ok(valid);\n    }\n    function callSyncRef() {\n        cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));\n    }\n    function addErrorsFrom(source) {\n        const errs = (0, codegen_1._) `${source}.errors`;\n        gen.assign(names_1.default.vErrors, (0, codegen_1._) `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`); // TODO tagged\n        gen.assign(names_1.default.errors, (0, codegen_1._) `${names_1.default.vErrors}.length`);\n    }\n    function addEvaluatedFrom(source) {\n        var _a;\n        if (!it.opts.unevaluated)\n            return;\n        const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;\n        // TODO refactor\n        if (it.props !== true) {\n            if (schEvaluated && !schEvaluated.dynamicProps) {\n                if (schEvaluated.props !== undefined) {\n                    it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);\n                }\n            }\n            else {\n                const props = gen.var(\"props\", (0, codegen_1._) `${source}.evaluated.props`);\n                it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);\n            }\n        }\n        if (it.items !== true) {\n            if (schEvaluated && !schEvaluated.dynamicItems) {\n                if (schEvaluated.items !== undefined) {\n                    it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);\n                }\n            }\n            else {\n                const items = gen.var(\"items\", (0, codegen_1._) `${source}.evaluated.items`);\n                it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);\n            }\n        }\n    }\n}\nexports.callRef = callRef;\nexports[\"default\"] = def;\n//# sourceMappingURL=ref.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/ref.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/discriminator/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/discriminator/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst types_1 = __webpack_require__(/*! ../discriminator/types */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/discriminator/types.js\");\nconst compile_1 = __webpack_require__(/*! ../../compile */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/index.js\");\nconst ref_error_1 = __webpack_require__(/*! ../../compile/ref_error */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/ref_error.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag\n        ? `tag \"${tagName}\" must be string`\n        : `value of tag \"${tagName}\" must be in oneOf`,\n    params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._) `{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,\n};\nconst def = {\n    keyword: \"discriminator\",\n    type: \"object\",\n    schemaType: \"object\",\n    error,\n    code(cxt) {\n        const { gen, data, schema, parentSchema, it } = cxt;\n        const { oneOf } = parentSchema;\n        if (!it.opts.discriminator) {\n            throw new Error(\"discriminator: requires discriminator option\");\n        }\n        const tagName = schema.propertyName;\n        if (typeof tagName != \"string\")\n            throw new Error(\"discriminator: requires propertyName\");\n        if (schema.mapping)\n            throw new Error(\"discriminator: mapping is not supported\");\n        if (!oneOf)\n            throw new Error(\"discriminator: requires oneOf keyword\");\n        const valid = gen.let(\"valid\", false);\n        const tag = gen.const(\"tag\", (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(tagName)}`);\n        gen.if((0, codegen_1._) `typeof ${tag} == \"string\"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));\n        cxt.ok(valid);\n        function validateMapping() {\n            const mapping = getMapping();\n            gen.if(false);\n            for (const tagValue in mapping) {\n                gen.elseIf((0, codegen_1._) `${tag} === ${tagValue}`);\n                gen.assign(valid, applyTagSchema(mapping[tagValue]));\n            }\n            gen.else();\n            cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });\n            gen.endIf();\n        }\n        function applyTagSchema(schemaProp) {\n            const _valid = gen.name(\"valid\");\n            const schCxt = cxt.subschema({ keyword: \"oneOf\", schemaProp }, _valid);\n            cxt.mergeEvaluated(schCxt, codegen_1.Name);\n            return _valid;\n        }\n        function getMapping() {\n            var _a;\n            const oneOfMapping = {};\n            const topRequired = hasRequired(parentSchema);\n            let tagRequired = true;\n            for (let i = 0; i < oneOf.length; i++) {\n                let sch = oneOf[i];\n                if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {\n                    const ref = sch.$ref;\n                    sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref);\n                    if (sch instanceof compile_1.SchemaEnv)\n                        sch = sch.schema;\n                    if (sch === undefined)\n                        throw new ref_error_1.default(it.opts.uriResolver, it.baseId, ref);\n                }\n                const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];\n                if (typeof propSch != \"object\") {\n                    throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have \"properties/${tagName}\"`);\n                }\n                tagRequired = tagRequired && (topRequired || hasRequired(sch));\n                addMappings(propSch, i);\n            }\n            if (!tagRequired)\n                throw new Error(`discriminator: \"${tagName}\" must be required`);\n            return oneOfMapping;\n            function hasRequired({ required }) {\n                return Array.isArray(required) && required.includes(tagName);\n            }\n            function addMappings(sch, i) {\n                if (sch.const) {\n                    addMapping(sch.const, i);\n                }\n                else if (sch.enum) {\n                    for (const tagValue of sch.enum) {\n                        addMapping(tagValue, i);\n                    }\n                }\n                else {\n                    throw new Error(`discriminator: \"properties/${tagName}\" must have \"const\" or \"enum\"`);\n                }\n            }\n            function addMapping(tagValue, i) {\n                if (typeof tagValue != \"string\" || tagValue in oneOfMapping) {\n                    throw new Error(`discriminator: \"${tagName}\" values must be unique strings`);\n                }\n                oneOfMapping[tagValue] = i;\n            }\n        }\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/discriminator/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/discriminator/types.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/discriminator/types.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DiscrError = void 0;\nvar DiscrError;\n(function (DiscrError) {\n    DiscrError[\"Tag\"] = \"tag\";\n    DiscrError[\"Mapping\"] = \"mapping\";\n})(DiscrError || (exports.DiscrError = DiscrError = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9kaXNjcmltaW5hdG9yL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsaUJBQWlCLGtCQUFrQixrQkFBa0I7QUFDdEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvZGlzY3JpbWluYXRvci90eXBlcy5qcz9lMzVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EaXNjckVycm9yID0gdm9pZCAwO1xudmFyIERpc2NyRXJyb3I7XG4oZnVuY3Rpb24gKERpc2NyRXJyb3IpIHtcbiAgICBEaXNjckVycm9yW1wiVGFnXCJdID0gXCJ0YWdcIjtcbiAgICBEaXNjckVycm9yW1wiTWFwcGluZ1wiXSA9IFwibWFwcGluZ1wiO1xufSkoRGlzY3JFcnJvciB8fCAoZXhwb3J0cy5EaXNjckVycm9yID0gRGlzY3JFcnJvciA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/discriminator/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/draft7.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/draft7.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst core_1 = __webpack_require__(/*! ./core */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/core/index.js\");\nconst validation_1 = __webpack_require__(/*! ./validation */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/index.js\");\nconst applicator_1 = __webpack_require__(/*! ./applicator */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/applicator/index.js\");\nconst format_1 = __webpack_require__(/*! ./format */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/format/index.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/metadata.js\");\nconst draft7Vocabularies = [\n    core_1.default,\n    validation_1.default,\n    (0, applicator_1.default)(),\n    format_1.default,\n    metadata_1.metadataVocabulary,\n    metadata_1.contentVocabulary,\n];\nexports[\"default\"] = draft7Vocabularies;\n//# sourceMappingURL=draft7.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9kcmFmdDcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxtQkFBTyxDQUFDLGdIQUFRO0FBQy9CLHFCQUFxQixtQkFBTyxDQUFDLDRIQUFjO0FBQzNDLHFCQUFxQixtQkFBTyxDQUFDLDRIQUFjO0FBQzNDLGlCQUFpQixtQkFBTyxDQUFDLG9IQUFVO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLGtIQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2RyYWZ0Ny5qcz85Y2I5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIi4vY29yZVwiKTtcbmNvbnN0IHZhbGlkYXRpb25fMSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRpb25cIik7XG5jb25zdCBhcHBsaWNhdG9yXzEgPSByZXF1aXJlKFwiLi9hcHBsaWNhdG9yXCIpO1xuY29uc3QgZm9ybWF0XzEgPSByZXF1aXJlKFwiLi9mb3JtYXRcIik7XG5jb25zdCBtZXRhZGF0YV8xID0gcmVxdWlyZShcIi4vbWV0YWRhdGFcIik7XG5jb25zdCBkcmFmdDdWb2NhYnVsYXJpZXMgPSBbXG4gICAgY29yZV8xLmRlZmF1bHQsXG4gICAgdmFsaWRhdGlvbl8xLmRlZmF1bHQsXG4gICAgKDAsIGFwcGxpY2F0b3JfMS5kZWZhdWx0KSgpLFxuICAgIGZvcm1hdF8xLmRlZmF1bHQsXG4gICAgbWV0YWRhdGFfMS5tZXRhZGF0YVZvY2FidWxhcnksXG4gICAgbWV0YWRhdGFfMS5jb250ZW50Vm9jYWJ1bGFyeSxcbl07XG5leHBvcnRzLmRlZmF1bHQgPSBkcmFmdDdWb2NhYnVsYXJpZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcmFmdDcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/draft7.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/format/format.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/format/format.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must match format \"${schemaCode}\"`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{format: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"format\",\n    type: [\"number\", \"string\"],\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt, ruleType) {\n        const { gen, data, $data, schema, schemaCode, it } = cxt;\n        const { opts, errSchemaPath, schemaEnv, self } = it;\n        if (!opts.validateFormats)\n            return;\n        if ($data)\n            validate$DataFormat();\n        else\n            validateFormat();\n        function validate$DataFormat() {\n            const fmts = gen.scopeValue(\"formats\", {\n                ref: self.formats,\n                code: opts.code.formats,\n            });\n            const fDef = gen.const(\"fDef\", (0, codegen_1._) `${fmts}[${schemaCode}]`);\n            const fType = gen.let(\"fType\");\n            const format = gen.let(\"format\");\n            // TODO simplify\n            gen.if((0, codegen_1._) `typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._) `${fDef}.type || \"string\"`).assign(format, (0, codegen_1._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._) `\"string\"`).assign(format, fDef));\n            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));\n            function unknownFmt() {\n                if (opts.strictSchema === false)\n                    return codegen_1.nil;\n                return (0, codegen_1._) `${schemaCode} && !${format}`;\n            }\n            function invalidFmt() {\n                const callFormat = schemaEnv.$async\n                    ? (0, codegen_1._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`\n                    : (0, codegen_1._) `${format}(${data})`;\n                const validData = (0, codegen_1._) `(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`;\n                return (0, codegen_1._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;\n            }\n        }\n        function validateFormat() {\n            const formatDef = self.formats[schema];\n            if (!formatDef) {\n                unknownFormat();\n                return;\n            }\n            if (formatDef === true)\n                return;\n            const [fmtType, format, fmtRef] = getFormat(formatDef);\n            if (fmtType === ruleType)\n                cxt.pass(validCondition());\n            function unknownFormat() {\n                if (opts.strictSchema === false) {\n                    self.logger.warn(unknownMsg());\n                    return;\n                }\n                throw new Error(unknownMsg());\n                function unknownMsg() {\n                    return `unknown format \"${schema}\" ignored in schema at path \"${errSchemaPath}\"`;\n                }\n            }\n            function getFormat(fmtDef) {\n                const code = fmtDef instanceof RegExp\n                    ? (0, codegen_1.regexpCode)(fmtDef)\n                    : opts.code.formats\n                        ? (0, codegen_1._) `${opts.code.formats}${(0, codegen_1.getProperty)(schema)}`\n                        : undefined;\n                const fmt = gen.scopeValue(\"formats\", { key: schema, ref: fmtDef, code });\n                if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n                    return [fmtDef.type || \"string\", fmtDef.validate, (0, codegen_1._) `${fmt}.validate`];\n                }\n                return [\"string\", fmtDef, fmt];\n            }\n            function validCondition() {\n                if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n                    if (!schemaEnv.$async)\n                        throw new Error(\"async format in sync schema\");\n                    return (0, codegen_1._) `await ${fmtRef}(${data})`;\n                }\n                return typeof format == \"function\" ? (0, codegen_1._) `${fmtRef}(${data})` : (0, codegen_1._) `${fmtRef}.test(${data})`;\n            }\n        }\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=format.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9mb3JtYXQvZm9ybWF0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixtQkFBTyxDQUFDLDZIQUF1QjtBQUNqRDtBQUNBLGdCQUFnQixZQUFZLDhDQUE4QyxXQUFXO0FBQ3JGLGVBQWUsWUFBWSx3QkFBd0IsVUFBVSxZQUFZO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMkNBQTJDO0FBQzNELGdCQUFnQix1Q0FBdUM7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsK0RBQStELEtBQUssR0FBRyxXQUFXO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxNQUFNLG1CQUFtQixNQUFNLGlFQUFpRSxLQUFLLHVEQUF1RCxLQUFLO0FBQy9NO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFlBQVksTUFBTSxPQUFPO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxLQUFLLGlCQUFpQixPQUFPLEdBQUcsS0FBSyxNQUFNLE9BQU8sR0FBRyxLQUFLO0FBQ3JHLDBDQUEwQyxPQUFPLEdBQUcsS0FBSztBQUN6RCw4REFBOEQsUUFBUSxrQkFBa0IsWUFBWSxJQUFJLE9BQU8sUUFBUSxLQUFLO0FBQzVILDJDQUEyQyxRQUFRLEtBQUssUUFBUSxjQUFjLE9BQU8sTUFBTSxVQUFVLE1BQU0sVUFBVTtBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLE9BQU8sK0JBQStCLGNBQWM7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGtCQUFrQixFQUFFLG1DQUFtQztBQUNyRztBQUNBLHdEQUF3RCxnQ0FBZ0M7QUFDeEY7QUFDQSwwRkFBMEYsSUFBSTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxPQUFPLEdBQUcsS0FBSztBQUNwRTtBQUNBLHlFQUF5RSxPQUFPLEdBQUcsS0FBSyx5QkFBeUIsT0FBTyxRQUFRLEtBQUs7QUFDckk7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvZm9ybWF0L2Zvcm1hdC5qcz82ZmI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IG1hdGNoIGZvcm1hdCBcIiR7c2NoZW1hQ29kZX1cImAsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtmb3JtYXQ6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJmb3JtYXRcIixcbiAgICB0eXBlOiBbXCJudW1iZXJcIiwgXCJzdHJpbmdcIl0sXG4gICAgc2NoZW1hVHlwZTogXCJzdHJpbmdcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCwgcnVsZVR5cGUpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIGRhdGEsICRkYXRhLCBzY2hlbWEsIHNjaGVtYUNvZGUsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGNvbnN0IHsgb3B0cywgZXJyU2NoZW1hUGF0aCwgc2NoZW1hRW52LCBzZWxmIH0gPSBpdDtcbiAgICAgICAgaWYgKCFvcHRzLnZhbGlkYXRlRm9ybWF0cylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKCRkYXRhKVxuICAgICAgICAgICAgdmFsaWRhdGUkRGF0YUZvcm1hdCgpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB2YWxpZGF0ZUZvcm1hdCgpO1xuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZSREYXRhRm9ybWF0KCkge1xuICAgICAgICAgICAgY29uc3QgZm10cyA9IGdlbi5zY29wZVZhbHVlKFwiZm9ybWF0c1wiLCB7XG4gICAgICAgICAgICAgICAgcmVmOiBzZWxmLmZvcm1hdHMsXG4gICAgICAgICAgICAgICAgY29kZTogb3B0cy5jb2RlLmZvcm1hdHMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGZEZWYgPSBnZW4uY29uc3QoXCJmRGVmXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7Zm10c31bJHtzY2hlbWFDb2RlfV1gKTtcbiAgICAgICAgICAgIGNvbnN0IGZUeXBlID0gZ2VuLmxldChcImZUeXBlXCIpO1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gZ2VuLmxldChcImZvcm1hdFwiKTtcbiAgICAgICAgICAgIC8vIFRPRE8gc2ltcGxpZnlcbiAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGB0eXBlb2YgJHtmRGVmfSA9PSBcIm9iamVjdFwiICYmICEoJHtmRGVmfSBpbnN0YW5jZW9mIFJlZ0V4cClgLCAoKSA9PiBnZW4uYXNzaWduKGZUeXBlLCAoMCwgY29kZWdlbl8xLl8pIGAke2ZEZWZ9LnR5cGUgfHwgXCJzdHJpbmdcImApLmFzc2lnbihmb3JtYXQsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZkRlZn0udmFsaWRhdGVgKSwgKCkgPT4gZ2VuLmFzc2lnbihmVHlwZSwgKDAsIGNvZGVnZW5fMS5fKSBgXCJzdHJpbmdcImApLmFzc2lnbihmb3JtYXQsIGZEZWYpKTtcbiAgICAgICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5vcikodW5rbm93bkZtdCgpLCBpbnZhbGlkRm10KCkpKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVua25vd25GbXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuc3RyaWN0U2NoZW1hID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvZGVnZW5fMS5uaWw7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCR7c2NoZW1hQ29kZX0gJiYgISR7Zm9ybWF0fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpbnZhbGlkRm10KCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxGb3JtYXQgPSBzY2hlbWFFbnYuJGFzeW5jXG4gICAgICAgICAgICAgICAgICAgID8gKDAsIGNvZGVnZW5fMS5fKSBgKCR7ZkRlZn0uYXN5bmMgPyBhd2FpdCAke2Zvcm1hdH0oJHtkYXRhfSkgOiAke2Zvcm1hdH0oJHtkYXRhfSkpYFxuICAgICAgICAgICAgICAgICAgICA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7Zm9ybWF0fSgke2RhdGF9KWA7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWREYXRhID0gKDAsIGNvZGVnZW5fMS5fKSBgKHR5cGVvZiAke2Zvcm1hdH0gPT0gXCJmdW5jdGlvblwiID8gJHtjYWxsRm9ybWF0fSA6ICR7Zm9ybWF0fS50ZXN0KCR7ZGF0YX0pKWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCR7Zm9ybWF0fSAmJiAke2Zvcm1hdH0gIT09IHRydWUgJiYgJHtmVHlwZX0gPT09ICR7cnVsZVR5cGV9ICYmICEke3ZhbGlkRGF0YX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KCkge1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0RGVmID0gc2VsZi5mb3JtYXRzW3NjaGVtYV07XG4gICAgICAgICAgICBpZiAoIWZvcm1hdERlZikge1xuICAgICAgICAgICAgICAgIHVua25vd25Gb3JtYXQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm9ybWF0RGVmID09PSB0cnVlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IFtmbXRUeXBlLCBmb3JtYXQsIGZtdFJlZl0gPSBnZXRGb3JtYXQoZm9ybWF0RGVmKTtcbiAgICAgICAgICAgIGlmIChmbXRUeXBlID09PSBydWxlVHlwZSlcbiAgICAgICAgICAgICAgICBjeHQucGFzcyh2YWxpZENvbmRpdGlvbigpKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVua25vd25Gb3JtYXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuc3RyaWN0U2NoZW1hID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuKHVua25vd25Nc2coKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHVua25vd25Nc2coKSk7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdW5rbm93bk1zZygpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB1bmtub3duIGZvcm1hdCBcIiR7c2NoZW1hfVwiIGlnbm9yZWQgaW4gc2NoZW1hIGF0IHBhdGggXCIke2VyclNjaGVtYVBhdGh9XCJgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEZvcm1hdChmbXREZWYpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0gZm10RGVmIGluc3RhbmNlb2YgUmVnRXhwXG4gICAgICAgICAgICAgICAgICAgID8gKDAsIGNvZGVnZW5fMS5yZWdleHBDb2RlKShmbXREZWYpXG4gICAgICAgICAgICAgICAgICAgIDogb3B0cy5jb2RlLmZvcm1hdHNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKDAsIGNvZGVnZW5fMS5fKSBgJHtvcHRzLmNvZGUuZm9ybWF0c30keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKHNjaGVtYSl9YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgZm10ID0gZ2VuLnNjb3BlVmFsdWUoXCJmb3JtYXRzXCIsIHsga2V5OiBzY2hlbWEsIHJlZjogZm10RGVmLCBjb2RlIH0pO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZm10RGVmID09IFwib2JqZWN0XCIgJiYgIShmbXREZWYgaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZm10RGVmLnR5cGUgfHwgXCJzdHJpbmdcIiwgZm10RGVmLnZhbGlkYXRlLCAoMCwgY29kZWdlbl8xLl8pIGAke2ZtdH0udmFsaWRhdGVgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcInN0cmluZ1wiLCBmbXREZWYsIGZtdF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB2YWxpZENvbmRpdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZvcm1hdERlZiA9PSBcIm9iamVjdFwiICYmICEoZm9ybWF0RGVmIGluc3RhbmNlb2YgUmVnRXhwKSAmJiBmb3JtYXREZWYuYXN5bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2hlbWFFbnYuJGFzeW5jKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXN5bmMgZm9ybWF0IGluIHN5bmMgc2NoZW1hXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5fKSBgYXdhaXQgJHtmbXRSZWZ9KCR7ZGF0YX0pYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBmb3JtYXQgPT0gXCJmdW5jdGlvblwiID8gKDAsIGNvZGVnZW5fMS5fKSBgJHtmbXRSZWZ9KCR7ZGF0YX0pYCA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7Zm10UmVmfS50ZXN0KCR7ZGF0YX0pYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/format/format.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/format/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/format/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst format_1 = __webpack_require__(/*! ./format */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/format/format.js\");\nconst format = [format_1.default];\nexports[\"default\"] = format;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9mb3JtYXQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLG1CQUFPLENBQUMscUhBQVU7QUFDbkM7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2Zvcm1hdC9pbmRleC5qcz9jOTRmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZm9ybWF0XzEgPSByZXF1aXJlKFwiLi9mb3JtYXRcIik7XG5jb25zdCBmb3JtYXQgPSBbZm9ybWF0XzEuZGVmYXVsdF07XG5leHBvcnRzLmRlZmF1bHQgPSBmb3JtYXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/format/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/metadata.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/metadata.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.contentVocabulary = exports.metadataVocabulary = void 0;\nexports.metadataVocabulary = [\n    \"title\",\n    \"description\",\n    \"default\",\n    \"deprecated\",\n    \"readOnly\",\n    \"writeOnly\",\n    \"examples\",\n];\nexports.contentVocabulary = [\n    \"contentMediaType\",\n    \"contentEncoding\",\n    \"contentSchema\",\n];\n//# sourceMappingURL=metadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9tZXRhZGF0YS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRywwQkFBMEI7QUFDdEQsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9tZXRhZGF0YS5qcz8zMDNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb250ZW50Vm9jYWJ1bGFyeSA9IGV4cG9ydHMubWV0YWRhdGFWb2NhYnVsYXJ5ID0gdm9pZCAwO1xuZXhwb3J0cy5tZXRhZGF0YVZvY2FidWxhcnkgPSBbXG4gICAgXCJ0aXRsZVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIixcbiAgICBcImRlZmF1bHRcIixcbiAgICBcImRlcHJlY2F0ZWRcIixcbiAgICBcInJlYWRPbmx5XCIsXG4gICAgXCJ3cml0ZU9ubHlcIixcbiAgICBcImV4YW1wbGVzXCIsXG5dO1xuZXhwb3J0cy5jb250ZW50Vm9jYWJ1bGFyeSA9IFtcbiAgICBcImNvbnRlbnRNZWRpYVR5cGVcIixcbiAgICBcImNvbnRlbnRFbmNvZGluZ1wiLFxuICAgIFwiY29udGVudFNjaGVtYVwiLFxuXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldGFkYXRhLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/metadata.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/const.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/const.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst equal_1 = __webpack_require__(/*! ../../runtime/equal */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/equal.js\");\nconst error = {\n    message: \"must be equal to constant\",\n    params: ({ schemaCode }) => (0, codegen_1._) `{allowedValue: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"const\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, $data, schemaCode, schema } = cxt;\n        if ($data || (schema && typeof schema == \"object\")) {\n            cxt.fail$data((0, codegen_1._) `!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);\n        }\n        else {\n            cxt.fail((0, codegen_1._) `${schema} !== ${data}`);\n        }\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=const.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2NvbnN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixtQkFBTyxDQUFDLDZIQUF1QjtBQUNqRCxlQUFlLG1CQUFPLENBQUMsaUhBQW9CO0FBQzNDLGdCQUFnQixtQkFBTyxDQUFDLG1IQUFxQjtBQUM3QztBQUNBO0FBQ0EsZUFBZSxZQUFZLHdCQUF3QixnQkFBZ0IsWUFBWTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUNBQXVDO0FBQ3ZEO0FBQ0EsK0NBQStDLDBDQUEwQyxHQUFHLEtBQUssSUFBSSxXQUFXO0FBQ2hIO0FBQ0E7QUFDQSx5Q0FBeUMsUUFBUSxNQUFNLEtBQUs7QUFDNUQ7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vY29uc3QuanM/N2EwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZXF1YWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL2VxdWFsXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogXCJtdXN0IGJlIGVxdWFsIHRvIGNvbnN0YW50XCIsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHthbGxvd2VkVmFsdWU6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJjb25zdFwiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCAkZGF0YSwgc2NoZW1hQ29kZSwgc2NoZW1hIH0gPSBjeHQ7XG4gICAgICAgIGlmICgkZGF0YSB8fCAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIikpIHtcbiAgICAgICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5fKSBgISR7KDAsIHV0aWxfMS51c2VGdW5jKShnZW4sIGVxdWFsXzEuZGVmYXVsdCl9KCR7ZGF0YX0sICR7c2NoZW1hQ29kZX0pYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjeHQuZmFpbCgoMCwgY29kZWdlbl8xLl8pIGAke3NjaGVtYX0gIT09ICR7ZGF0YX1gKTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/const.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/enum.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/enum.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst equal_1 = __webpack_require__(/*! ../../runtime/equal */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/equal.js\");\nconst error = {\n    message: \"must be equal to one of the allowed values\",\n    params: ({ schemaCode }) => (0, codegen_1._) `{allowedValues: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"enum\",\n    schemaType: \"array\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, $data, schema, schemaCode, it } = cxt;\n        if (!$data && schema.length === 0)\n            throw new Error(\"enum must have non-empty array\");\n        const useLoop = schema.length >= it.opts.loopEnum;\n        let eql;\n        const getEql = () => (eql !== null && eql !== void 0 ? eql : (eql = (0, util_1.useFunc)(gen, equal_1.default)));\n        let valid;\n        if (useLoop || $data) {\n            valid = gen.let(\"valid\");\n            cxt.block$data(valid, loopEnum);\n        }\n        else {\n            /* istanbul ignore if */\n            if (!Array.isArray(schema))\n                throw new Error(\"ajv implementation error\");\n            const vSchema = gen.const(\"vSchema\", schemaCode);\n            valid = (0, codegen_1.or)(...schema.map((_x, i) => equalCode(vSchema, i)));\n        }\n        cxt.pass(valid);\n        function loopEnum() {\n            gen.assign(valid, false);\n            gen.forOf(\"v\", schemaCode, (v) => gen.if((0, codegen_1._) `${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));\n        }\n        function equalCode(vSchema, i) {\n            const sch = schema[i];\n            return typeof sch === \"object\" && sch !== null\n                ? (0, codegen_1._) `${getEql()}(${data}, ${vSchema}[${i}])`\n                : (0, codegen_1._) `${data} === ${sch}`;\n        }\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=enum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2VudW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLG1CQUFPLENBQUMsNkhBQXVCO0FBQ2pELGVBQWUsbUJBQU8sQ0FBQyxpSEFBb0I7QUFDM0MsZ0JBQWdCLG1CQUFPLENBQUMsbUhBQXFCO0FBQzdDO0FBQ0E7QUFDQSxlQUFlLFlBQVksd0JBQXdCLGlCQUFpQixZQUFZO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDJDQUEyQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLFNBQVMsR0FBRyxLQUFLLElBQUksRUFBRTtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxTQUFTLEdBQUcsS0FBSyxJQUFJLFFBQVEsR0FBRyxFQUFFO0FBQ3hFLHNDQUFzQyxNQUFNLE1BQU0sSUFBSTtBQUN0RDtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9lbnVtLmpzPzY5MjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVxdWFsXzEgPSByZXF1aXJlKFwiLi4vLi4vcnVudGltZS9lcXVhbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6IFwibXVzdCBiZSBlcXVhbCB0byBvbmUgb2YgdGhlIGFsbG93ZWQgdmFsdWVzXCIsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHthbGxvd2VkVmFsdWVzOiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiZW51bVwiLFxuICAgIHNjaGVtYVR5cGU6IFwiYXJyYXlcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgZGF0YSwgJGRhdGEsIHNjaGVtYSwgc2NoZW1hQ29kZSwgaXQgfSA9IGN4dDtcbiAgICAgICAgaWYgKCEkZGF0YSAmJiBzY2hlbWEubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZW51bSBtdXN0IGhhdmUgbm9uLWVtcHR5IGFycmF5XCIpO1xuICAgICAgICBjb25zdCB1c2VMb29wID0gc2NoZW1hLmxlbmd0aCA+PSBpdC5vcHRzLmxvb3BFbnVtO1xuICAgICAgICBsZXQgZXFsO1xuICAgICAgICBjb25zdCBnZXRFcWwgPSAoKSA9PiAoZXFsICE9PSBudWxsICYmIGVxbCAhPT0gdm9pZCAwID8gZXFsIDogKGVxbCA9ICgwLCB1dGlsXzEudXNlRnVuYykoZ2VuLCBlcXVhbF8xLmRlZmF1bHQpKSk7XG4gICAgICAgIGxldCB2YWxpZDtcbiAgICAgICAgaWYgKHVzZUxvb3AgfHwgJGRhdGEpIHtcbiAgICAgICAgICAgIHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIpO1xuICAgICAgICAgICAgY3h0LmJsb2NrJGRhdGEodmFsaWQsIGxvb3BFbnVtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHNjaGVtYSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICAgICAgY29uc3QgdlNjaGVtYSA9IGdlbi5jb25zdChcInZTY2hlbWFcIiwgc2NoZW1hQ29kZSk7XG4gICAgICAgICAgICB2YWxpZCA9ICgwLCBjb2RlZ2VuXzEub3IpKC4uLnNjaGVtYS5tYXAoKF94LCBpKSA9PiBlcXVhbENvZGUodlNjaGVtYSwgaSkpKTtcbiAgICAgICAgfVxuICAgICAgICBjeHQucGFzcyh2YWxpZCk7XG4gICAgICAgIGZ1bmN0aW9uIGxvb3BFbnVtKCkge1xuICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgZmFsc2UpO1xuICAgICAgICAgICAgZ2VuLmZvck9mKFwidlwiLCBzY2hlbWFDb2RlLCAodikgPT4gZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7Z2V0RXFsKCl9KCR7ZGF0YX0sICR7dn0pYCwgKCkgPT4gZ2VuLmFzc2lnbih2YWxpZCwgdHJ1ZSkuYnJlYWsoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGVxdWFsQ29kZSh2U2NoZW1hLCBpKSB7XG4gICAgICAgICAgICBjb25zdCBzY2ggPSBzY2hlbWFbaV07XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHNjaCA9PT0gXCJvYmplY3RcIiAmJiBzY2ggIT09IG51bGxcbiAgICAgICAgICAgICAgICA/ICgwLCBjb2RlZ2VuXzEuXykgYCR7Z2V0RXFsKCl9KCR7ZGF0YX0sICR7dlNjaGVtYX1bJHtpfV0pYFxuICAgICAgICAgICAgICAgIDogKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSA9PT0gJHtzY2h9YDtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW51bS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/enum.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst limitNumber_1 = __webpack_require__(/*! ./limitNumber */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitNumber.js\");\nconst multipleOf_1 = __webpack_require__(/*! ./multipleOf */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/multipleOf.js\");\nconst limitLength_1 = __webpack_require__(/*! ./limitLength */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitLength.js\");\nconst pattern_1 = __webpack_require__(/*! ./pattern */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/pattern.js\");\nconst limitProperties_1 = __webpack_require__(/*! ./limitProperties */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitProperties.js\");\nconst required_1 = __webpack_require__(/*! ./required */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/required.js\");\nconst limitItems_1 = __webpack_require__(/*! ./limitItems */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitItems.js\");\nconst uniqueItems_1 = __webpack_require__(/*! ./uniqueItems */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js\");\nconst const_1 = __webpack_require__(/*! ./const */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/const.js\");\nconst enum_1 = __webpack_require__(/*! ./enum */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/enum.js\");\nconst validation = [\n    // number\n    limitNumber_1.default,\n    multipleOf_1.default,\n    // string\n    limitLength_1.default,\n    pattern_1.default,\n    // object\n    limitProperties_1.default,\n    required_1.default,\n    // array\n    limitItems_1.default,\n    uniqueItems_1.default,\n    // any\n    { keyword: \"type\", schemaType: [\"string\", \"array\"] },\n    { keyword: \"nullable\", schemaType: \"boolean\" },\n    const_1.default,\n    enum_1.default,\n];\nexports[\"default\"] = validation;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixtQkFBTyxDQUFDLG1JQUFlO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLGlJQUFjO0FBQzNDLHNCQUFzQixtQkFBTyxDQUFDLG1JQUFlO0FBQzdDLGtCQUFrQixtQkFBTyxDQUFDLDJIQUFXO0FBQ3JDLDBCQUEwQixtQkFBTyxDQUFDLDJJQUFtQjtBQUNyRCxtQkFBbUIsbUJBQU8sQ0FBQyw2SEFBWTtBQUN2QyxxQkFBcUIsbUJBQU8sQ0FBQyxpSUFBYztBQUMzQyxzQkFBc0IsbUJBQU8sQ0FBQyxtSUFBZTtBQUM3QyxnQkFBZ0IsbUJBQU8sQ0FBQyx1SEFBUztBQUNqQyxlQUFlLG1CQUFPLENBQUMscUhBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sa0RBQWtEO0FBQ3hELE1BQU0sNENBQTRDO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9pbmRleC5qcz9kZDlkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbGltaXROdW1iZXJfMSA9IHJlcXVpcmUoXCIuL2xpbWl0TnVtYmVyXCIpO1xuY29uc3QgbXVsdGlwbGVPZl8xID0gcmVxdWlyZShcIi4vbXVsdGlwbGVPZlwiKTtcbmNvbnN0IGxpbWl0TGVuZ3RoXzEgPSByZXF1aXJlKFwiLi9saW1pdExlbmd0aFwiKTtcbmNvbnN0IHBhdHRlcm5fMSA9IHJlcXVpcmUoXCIuL3BhdHRlcm5cIik7XG5jb25zdCBsaW1pdFByb3BlcnRpZXNfMSA9IHJlcXVpcmUoXCIuL2xpbWl0UHJvcGVydGllc1wiKTtcbmNvbnN0IHJlcXVpcmVkXzEgPSByZXF1aXJlKFwiLi9yZXF1aXJlZFwiKTtcbmNvbnN0IGxpbWl0SXRlbXNfMSA9IHJlcXVpcmUoXCIuL2xpbWl0SXRlbXNcIik7XG5jb25zdCB1bmlxdWVJdGVtc18xID0gcmVxdWlyZShcIi4vdW5pcXVlSXRlbXNcIik7XG5jb25zdCBjb25zdF8xID0gcmVxdWlyZShcIi4vY29uc3RcIik7XG5jb25zdCBlbnVtXzEgPSByZXF1aXJlKFwiLi9lbnVtXCIpO1xuY29uc3QgdmFsaWRhdGlvbiA9IFtcbiAgICAvLyBudW1iZXJcbiAgICBsaW1pdE51bWJlcl8xLmRlZmF1bHQsXG4gICAgbXVsdGlwbGVPZl8xLmRlZmF1bHQsXG4gICAgLy8gc3RyaW5nXG4gICAgbGltaXRMZW5ndGhfMS5kZWZhdWx0LFxuICAgIHBhdHRlcm5fMS5kZWZhdWx0LFxuICAgIC8vIG9iamVjdFxuICAgIGxpbWl0UHJvcGVydGllc18xLmRlZmF1bHQsXG4gICAgcmVxdWlyZWRfMS5kZWZhdWx0LFxuICAgIC8vIGFycmF5XG4gICAgbGltaXRJdGVtc18xLmRlZmF1bHQsXG4gICAgdW5pcXVlSXRlbXNfMS5kZWZhdWx0LFxuICAgIC8vIGFueVxuICAgIHsga2V5d29yZDogXCJ0eXBlXCIsIHNjaGVtYVR5cGU6IFtcInN0cmluZ1wiLCBcImFycmF5XCJdIH0sXG4gICAgeyBrZXl3b3JkOiBcIm51bGxhYmxlXCIsIHNjaGVtYVR5cGU6IFwiYm9vbGVhblwiIH0sXG4gICAgY29uc3RfMS5kZWZhdWx0LFxuICAgIGVudW1fMS5kZWZhdWx0LFxuXTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZhbGlkYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitItems.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitItems.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst error = {\n    message({ keyword, schemaCode }) {\n        const comp = keyword === \"maxItems\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} items`;\n    },\n    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: [\"maxItems\", \"minItems\"],\n    type: \"array\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        const op = keyword === \"maxItems\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        cxt.fail$data((0, codegen_1._) `${data}.length ${op} ${schemaCode}`);\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=limitItems.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0SXRlbXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLG1CQUFPLENBQUMsNkhBQXVCO0FBQ2pEO0FBQ0EsY0FBYyxxQkFBcUI7QUFDbkM7QUFDQSxtREFBbUQsTUFBTSxPQUFPLFlBQVk7QUFDNUUsS0FBSztBQUNMLGVBQWUsWUFBWSx3QkFBd0IsU0FBUyxZQUFZO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsNEJBQTRCO0FBQzVDO0FBQ0EsMENBQTBDLEtBQUssVUFBVSxJQUFJLEVBQUUsV0FBVztBQUMxRSxLQUFLO0FBQ0w7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vbGltaXRJdGVtcy5qcz9lN2E4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2UoeyBrZXl3b3JkLCBzY2hlbWFDb2RlIH0pIHtcbiAgICAgICAgY29uc3QgY29tcCA9IGtleXdvcmQgPT09IFwibWF4SXRlbXNcIiA/IFwibW9yZVwiIDogXCJmZXdlclwiO1xuICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IE5PVCBoYXZlICR7Y29tcH0gdGhhbiAke3NjaGVtYUNvZGV9IGl0ZW1zYDtcbiAgICB9LFxuICAgIHBhcmFtczogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bGltaXQ6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogW1wibWF4SXRlbXNcIiwgXCJtaW5JdGVtc1wiXSxcbiAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgc2NoZW1hVHlwZTogXCJudW1iZXJcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGtleXdvcmQsIGRhdGEsIHNjaGVtYUNvZGUgfSA9IGN4dDtcbiAgICAgICAgY29uc3Qgb3AgPSBrZXl3b3JkID09PSBcIm1heEl0ZW1zXCIgPyBjb2RlZ2VuXzEub3BlcmF0b3JzLkdUIDogY29kZWdlbl8xLm9wZXJhdG9ycy5MVDtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9Lmxlbmd0aCAke29wfSAke3NjaGVtYUNvZGV9YCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW1pdEl0ZW1zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitItems.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitLength.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitLength.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst ucs2length_1 = __webpack_require__(/*! ../../runtime/ucs2length */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/ucs2length.js\");\nconst error = {\n    message({ keyword, schemaCode }) {\n        const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} characters`;\n    },\n    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: [\"maxLength\", \"minLength\"],\n    type: \"string\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode, it } = cxt;\n        const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        const len = it.opts.unicode === false ? (0, codegen_1._) `${data}.length` : (0, codegen_1._) `${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;\n        cxt.fail$data((0, codegen_1._) `${len} ${op} ${schemaCode}`);\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=limitLength.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0TGVuZ3RoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixtQkFBTyxDQUFDLDZIQUF1QjtBQUNqRCxlQUFlLG1CQUFPLENBQUMsaUhBQW9CO0FBQzNDLHFCQUFxQixtQkFBTyxDQUFDLDZIQUEwQjtBQUN2RDtBQUNBLGNBQWMscUJBQXFCO0FBQ25DO0FBQ0EsbURBQW1ELE1BQU0sT0FBTyxZQUFZO0FBQzVFLEtBQUs7QUFDTCxlQUFlLFlBQVksd0JBQXdCLFNBQVMsWUFBWTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGdDQUFnQztBQUNoRDtBQUNBLG9FQUFvRSxLQUFLLCtCQUErQixtREFBbUQsR0FBRyxLQUFLO0FBQ25LLDBDQUEwQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFdBQVc7QUFDbEUsS0FBSztBQUNMO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0TGVuZ3RoLmpzP2E3N2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IHVjczJsZW5ndGhfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL3VjczJsZW5ndGhcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlKHsga2V5d29yZCwgc2NoZW1hQ29kZSB9KSB7XG4gICAgICAgIGNvbnN0IGNvbXAgPSBrZXl3b3JkID09PSBcIm1heExlbmd0aFwiID8gXCJtb3JlXCIgOiBcImZld2VyXCI7XG4gICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgTk9UIGhhdmUgJHtjb21wfSB0aGFuICR7c2NoZW1hQ29kZX0gY2hhcmFjdGVyc2A7XG4gICAgfSxcbiAgICBwYXJhbXM6ICh7IHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge2xpbWl0OiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFtcIm1heExlbmd0aFwiLCBcIm1pbkxlbmd0aFwiXSxcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHNjaGVtYVR5cGU6IFwibnVtYmVyXCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBrZXl3b3JkLCBkYXRhLCBzY2hlbWFDb2RlLCBpdCB9ID0gY3h0O1xuICAgICAgICBjb25zdCBvcCA9IGtleXdvcmQgPT09IFwibWF4TGVuZ3RoXCIgPyBjb2RlZ2VuXzEub3BlcmF0b3JzLkdUIDogY29kZWdlbl8xLm9wZXJhdG9ycy5MVDtcbiAgICAgICAgY29uc3QgbGVuID0gaXQub3B0cy51bmljb2RlID09PSBmYWxzZSA/ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0ubGVuZ3RoYCA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7KDAsIHV0aWxfMS51c2VGdW5jKShjeHQuZ2VuLCB1Y3MybGVuZ3RoXzEuZGVmYXVsdCl9KCR7ZGF0YX0pYDtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGAke2xlbn0gJHtvcH0gJHtzY2hlbWFDb2RlfWApO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGltaXRMZW5ndGguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitLength.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitNumber.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitNumber.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst ops = codegen_1.operators;\nconst KWDs = {\n    maximum: { okStr: \"<=\", ok: ops.LTE, fail: ops.GT },\n    minimum: { okStr: \">=\", ok: ops.GTE, fail: ops.LT },\n    exclusiveMaximum: { okStr: \"<\", ok: ops.LT, fail: ops.GTE },\n    exclusiveMinimum: { okStr: \">\", ok: ops.GT, fail: ops.LTE },\n};\nconst error = {\n    message: ({ keyword, schemaCode }) => (0, codegen_1.str) `must be ${KWDs[keyword].okStr} ${schemaCode}`,\n    params: ({ keyword, schemaCode }) => (0, codegen_1._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: Object.keys(KWDs),\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        cxt.fail$data((0, codegen_1._) `${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=limitNumber.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0TnVtYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixtQkFBTyxDQUFDLDZIQUF1QjtBQUNqRDtBQUNBO0FBQ0EsZUFBZSx3Q0FBd0M7QUFDdkQsZUFBZSx3Q0FBd0M7QUFDdkQsd0JBQXdCLHVDQUF1QztBQUMvRCx3QkFBd0IsdUNBQXVDO0FBQy9EO0FBQ0E7QUFDQSxnQkFBZ0IscUJBQXFCLG1DQUFtQyxxQkFBcUIsRUFBRSxXQUFXO0FBQzFHLGVBQWUscUJBQXFCLHdCQUF3QixjQUFjLG9CQUFvQixXQUFXLFlBQVk7QUFDckg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw0QkFBNEI7QUFDNUMsMENBQTBDLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxZQUFZLFdBQVcsS0FBSztBQUNwRyxLQUFLO0FBQ0w7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vbGltaXROdW1iZXIuanM/YjQ0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCBvcHMgPSBjb2RlZ2VuXzEub3BlcmF0b3JzO1xuY29uc3QgS1dEcyA9IHtcbiAgICBtYXhpbXVtOiB7IG9rU3RyOiBcIjw9XCIsIG9rOiBvcHMuTFRFLCBmYWlsOiBvcHMuR1QgfSxcbiAgICBtaW5pbXVtOiB7IG9rU3RyOiBcIj49XCIsIG9rOiBvcHMuR1RFLCBmYWlsOiBvcHMuTFQgfSxcbiAgICBleGNsdXNpdmVNYXhpbXVtOiB7IG9rU3RyOiBcIjxcIiwgb2s6IG9wcy5MVCwgZmFpbDogb3BzLkdURSB9LFxuICAgIGV4Y2x1c2l2ZU1pbmltdW06IHsgb2tTdHI6IFwiPlwiLCBvazogb3BzLkdULCBmYWlsOiBvcHMuTFRFIH0sXG59O1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsga2V5d29yZCwgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgYmUgJHtLV0RzW2tleXdvcmRdLm9rU3RyfSAke3NjaGVtYUNvZGV9YCxcbiAgICBwYXJhbXM6ICh7IGtleXdvcmQsIHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge2NvbXBhcmlzb246ICR7S1dEc1trZXl3b3JkXS5va1N0cn0sIGxpbWl0OiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IE9iamVjdC5rZXlzKEtXRHMpLFxuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgc2NoZW1hVHlwZTogXCJudW1iZXJcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGtleXdvcmQsIGRhdGEsIHNjaGVtYUNvZGUgfSA9IGN4dDtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9ICR7S1dEc1trZXl3b3JkXS5mYWlsfSAke3NjaGVtYUNvZGV9IHx8IGlzTmFOKCR7ZGF0YX0pYCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW1pdE51bWJlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitNumber.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitProperties.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitProperties.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst error = {\n    message({ keyword, schemaCode }) {\n        const comp = keyword === \"maxProperties\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} properties`;\n    },\n    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: [\"maxProperties\", \"minProperties\"],\n    type: \"object\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        const op = keyword === \"maxProperties\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        cxt.fail$data((0, codegen_1._) `Object.keys(${data}).length ${op} ${schemaCode}`);\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=limitProperties.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0UHJvcGVydGllcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsbUJBQU8sQ0FBQyw2SEFBdUI7QUFDakQ7QUFDQSxjQUFjLHFCQUFxQjtBQUNuQztBQUNBLG1EQUFtRCxNQUFNLE9BQU8sWUFBWTtBQUM1RSxLQUFLO0FBQ0wsZUFBZSxZQUFZLHdCQUF3QixTQUFTLFlBQVk7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw0QkFBNEI7QUFDNUM7QUFDQSxzREFBc0QsS0FBSyxXQUFXLElBQUksRUFBRSxXQUFXO0FBQ3ZGLEtBQUs7QUFDTDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9saW1pdFByb3BlcnRpZXMuanM/ODExNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlKHsga2V5d29yZCwgc2NoZW1hQ29kZSB9KSB7XG4gICAgICAgIGNvbnN0IGNvbXAgPSBrZXl3b3JkID09PSBcIm1heFByb3BlcnRpZXNcIiA/IFwibW9yZVwiIDogXCJmZXdlclwiO1xuICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IE5PVCBoYXZlICR7Y29tcH0gdGhhbiAke3NjaGVtYUNvZGV9IHByb3BlcnRpZXNgO1xuICAgIH0sXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtsaW1pdDogJHtzY2hlbWFDb2RlfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBbXCJtYXhQcm9wZXJ0aWVzXCIsIFwibWluUHJvcGVydGllc1wiXSxcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIHNjaGVtYVR5cGU6IFwibnVtYmVyXCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBrZXl3b3JkLCBkYXRhLCBzY2hlbWFDb2RlIH0gPSBjeHQ7XG4gICAgICAgIGNvbnN0IG9wID0ga2V5d29yZCA9PT0gXCJtYXhQcm9wZXJ0aWVzXCIgPyBjb2RlZ2VuXzEub3BlcmF0b3JzLkdUIDogY29kZWdlbl8xLm9wZXJhdG9ycy5MVDtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGBPYmplY3Qua2V5cygke2RhdGF9KS5sZW5ndGggJHtvcH0gJHtzY2hlbWFDb2RlfWApO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGltaXRQcm9wZXJ0aWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/limitProperties.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/multipleOf.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/multipleOf.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must be multiple of ${schemaCode}`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{multipleOf: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"multipleOf\",\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, schemaCode, it } = cxt;\n        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n        const prec = it.opts.multipleOfPrecision;\n        const res = gen.let(\"res\");\n        const invalid = prec\n            ? (0, codegen_1._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`\n            : (0, codegen_1._) `${res} !== parseInt(${res})`;\n        cxt.fail$data((0, codegen_1._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=multipleOf.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL211bHRpcGxlT2YuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLG1CQUFPLENBQUMsNkhBQXVCO0FBQ2pEO0FBQ0EsZ0JBQWdCLFlBQVksK0NBQStDLFdBQVc7QUFDdEYsZUFBZSxZQUFZLHdCQUF3QixjQUFjLFlBQVk7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw0QkFBNEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsSUFBSSxNQUFNLElBQUksU0FBUyxLQUFLO0FBQ2xGLGtDQUFrQyxLQUFLLGVBQWUsSUFBSTtBQUMxRCwyQ0FBMkMsWUFBWSxZQUFZLEtBQUssSUFBSSxLQUFLLEdBQUcsV0FBVyxJQUFJLFFBQVE7QUFDM0csS0FBSztBQUNMO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL211bHRpcGxlT2YuanM/NGJhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBiZSBtdWx0aXBsZSBvZiAke3NjaGVtYUNvZGV9YCxcbiAgICBwYXJhbXM6ICh7IHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge211bHRpcGxlT2Y6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJtdWx0aXBsZU9mXCIsXG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICBzY2hlbWFUeXBlOiBcIm51bWJlclwiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBzY2hlbWFDb2RlLCBpdCB9ID0gY3h0O1xuICAgICAgICAvLyBjb25zdCBiZHQgPSBiYWQkRGF0YVR5cGUoc2NoZW1hQ29kZSwgPHN0cmluZz5kZWYuc2NoZW1hVHlwZSwgJGRhdGEpXG4gICAgICAgIGNvbnN0IHByZWMgPSBpdC5vcHRzLm11bHRpcGxlT2ZQcmVjaXNpb247XG4gICAgICAgIGNvbnN0IHJlcyA9IGdlbi5sZXQoXCJyZXNcIik7XG4gICAgICAgIGNvbnN0IGludmFsaWQgPSBwcmVjXG4gICAgICAgICAgICA/ICgwLCBjb2RlZ2VuXzEuXykgYE1hdGguYWJzKE1hdGgucm91bmQoJHtyZXN9KSAtICR7cmVzfSkgPiAxZS0ke3ByZWN9YFxuICAgICAgICAgICAgOiAoMCwgY29kZWdlbl8xLl8pIGAke3Jlc30gIT09IHBhcnNlSW50KCR7cmVzfSlgO1xuICAgICAgICBjeHQuZmFpbCRkYXRhKCgwLCBjb2RlZ2VuXzEuXykgYCgke3NjaGVtYUNvZGV9ID09PSAwIHx8ICgke3Jlc30gPSAke2RhdGF9LyR7c2NoZW1hQ29kZX0sICR7aW52YWxpZH0pKWApO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXVsdGlwbGVPZi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/multipleOf.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/pattern.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/pattern.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst code_1 = __webpack_require__(/*! ../code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must match pattern \"${schemaCode}\"`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{pattern: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"pattern\",\n    type: \"string\",\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { data, $data, schema, schemaCode, it } = cxt;\n        // TODO regexp should be wrapped in try/catchs\n        const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n        const regExp = $data ? (0, codegen_1._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);\n        cxt.fail$data((0, codegen_1._) `!${regExp}.test(${data})`);\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=pattern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL3BhdHRlcm4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxtQkFBTyxDQUFDLDJHQUFTO0FBQ2hDLGtCQUFrQixtQkFBTyxDQUFDLDZIQUF1QjtBQUNqRDtBQUNBLGdCQUFnQixZQUFZLCtDQUErQyxXQUFXO0FBQ3RGLGVBQWUsWUFBWSx3QkFBd0IsV0FBVyxZQUFZO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isc0NBQXNDO0FBQ3REO0FBQ0E7QUFDQSwrREFBK0QsV0FBVyxJQUFJLEVBQUU7QUFDaEYsMkNBQTJDLE9BQU8sUUFBUSxLQUFLO0FBQy9ELEtBQUs7QUFDTDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9wYXR0ZXJuLmpzPzljZWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBtYXRjaCBwYXR0ZXJuIFwiJHtzY2hlbWFDb2RlfVwiYCxcbiAgICBwYXJhbXM6ICh7IHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge3BhdHRlcm46ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJwYXR0ZXJuXCIsXG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBzY2hlbWFUeXBlOiBcInN0cmluZ1wiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSwgJGRhdGEsIHNjaGVtYSwgc2NoZW1hQ29kZSwgaXQgfSA9IGN4dDtcbiAgICAgICAgLy8gVE9ETyByZWdleHAgc2hvdWxkIGJlIHdyYXBwZWQgaW4gdHJ5L2NhdGNoc1xuICAgICAgICBjb25zdCB1ID0gaXQub3B0cy51bmljb2RlUmVnRXhwID8gXCJ1XCIgOiBcIlwiO1xuICAgICAgICBjb25zdCByZWdFeHAgPSAkZGF0YSA/ICgwLCBjb2RlZ2VuXzEuXykgYChuZXcgUmVnRXhwKCR7c2NoZW1hQ29kZX0sICR7dX0pKWAgOiAoMCwgY29kZV8xLnVzZVBhdHRlcm4pKGN4dCwgc2NoZW1hKTtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGAhJHtyZWdFeHB9LnRlc3QoJHtkYXRhfSlgKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdHRlcm4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/pattern.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/required.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/required.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst code_1 = __webpack_require__(/*! ../code */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/code.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: ({ params: { missingProperty } }) => (0, codegen_1.str) `must have required property '${missingProperty}'`,\n    params: ({ params: { missingProperty } }) => (0, codegen_1._) `{missingProperty: ${missingProperty}}`,\n};\nconst def = {\n    keyword: \"required\",\n    type: \"object\",\n    schemaType: \"array\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, schema, schemaCode, data, $data, it } = cxt;\n        const { opts } = it;\n        if (!$data && schema.length === 0)\n            return;\n        const useLoop = schema.length >= opts.loopRequired;\n        if (it.allErrors)\n            allErrorsMode();\n        else\n            exitOnErrorMode();\n        if (opts.strictRequired) {\n            const props = cxt.parentSchema.properties;\n            const { definedProperties } = cxt.it;\n            for (const requiredKey of schema) {\n                if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {\n                    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;\n                    const msg = `required property \"${requiredKey}\" is not defined at \"${schemaPath}\" (strictRequired)`;\n                    (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);\n                }\n            }\n        }\n        function allErrorsMode() {\n            if (useLoop || $data) {\n                cxt.block$data(codegen_1.nil, loopAllRequired);\n            }\n            else {\n                for (const prop of schema) {\n                    (0, code_1.checkReportMissingProp)(cxt, prop);\n                }\n            }\n        }\n        function exitOnErrorMode() {\n            const missing = gen.let(\"missing\");\n            if (useLoop || $data) {\n                const valid = gen.let(\"valid\", true);\n                cxt.block$data(valid, () => loopUntilMissing(missing, valid));\n                cxt.ok(valid);\n            }\n            else {\n                gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));\n                (0, code_1.reportMissingProp)(cxt, missing);\n                gen.else();\n            }\n        }\n        function loopAllRequired() {\n            gen.forOf(\"prop\", schemaCode, (prop) => {\n                cxt.setParams({ missingProperty: prop });\n                gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());\n            });\n        }\n        function loopUntilMissing(missing, valid) {\n            cxt.setParams({ missingProperty: missing });\n            gen.forOf(missing, schemaCode, () => {\n                gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));\n                gen.if((0, codegen_1.not)(valid), () => {\n                    cxt.error();\n                    gen.break();\n                });\n            }, codegen_1.nil);\n        }\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=required.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL3JlcXVpcmVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsbUJBQU8sQ0FBQywyR0FBUztBQUNoQyxrQkFBa0IsbUJBQU8sQ0FBQyw2SEFBdUI7QUFDakQsZUFBZSxtQkFBTyxDQUFDLGlIQUFvQjtBQUMzQztBQUNBLGdCQUFnQixVQUFVLG1CQUFtQix3REFBd0QsZ0JBQWdCO0FBQ3JILGVBQWUsVUFBVSxtQkFBbUIsd0JBQXdCLG1CQUFtQixpQkFBaUI7QUFDeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwyQ0FBMkM7QUFDM0QsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxzREFBc0QsWUFBWSx1QkFBdUIsV0FBVztBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHVCQUF1QjtBQUN2RDtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsNEJBQTRCLDBCQUEwQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9yZXF1aXJlZC5qcz9iMjZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHBhcmFtczogeyBtaXNzaW5nUHJvcGVydHkgfSB9KSA9PiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgaGF2ZSByZXF1aXJlZCBwcm9wZXJ0eSAnJHttaXNzaW5nUHJvcGVydHl9J2AsXG4gICAgcGFyYW1zOiAoeyBwYXJhbXM6IHsgbWlzc2luZ1Byb3BlcnR5IH0gfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge21pc3NpbmdQcm9wZXJ0eTogJHttaXNzaW5nUHJvcGVydHl9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwicmVxdWlyZWRcIixcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIHNjaGVtYVR5cGU6IFwiYXJyYXlcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCBzY2hlbWFDb2RlLCBkYXRhLCAkZGF0YSwgaXQgfSA9IGN4dDtcbiAgICAgICAgY29uc3QgeyBvcHRzIH0gPSBpdDtcbiAgICAgICAgaWYgKCEkZGF0YSAmJiBzY2hlbWEubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB1c2VMb29wID0gc2NoZW1hLmxlbmd0aCA+PSBvcHRzLmxvb3BSZXF1aXJlZDtcbiAgICAgICAgaWYgKGl0LmFsbEVycm9ycylcbiAgICAgICAgICAgIGFsbEVycm9yc01vZGUoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZXhpdE9uRXJyb3JNb2RlKCk7XG4gICAgICAgIGlmIChvcHRzLnN0cmljdFJlcXVpcmVkKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IGN4dC5wYXJlbnRTY2hlbWEucHJvcGVydGllcztcbiAgICAgICAgICAgIGNvbnN0IHsgZGVmaW5lZFByb3BlcnRpZXMgfSA9IGN4dC5pdDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVxdWlyZWRLZXkgb2Ygc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9wcyA9PT0gbnVsbCB8fCBwcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvcHNbcmVxdWlyZWRLZXldKSA9PT0gdW5kZWZpbmVkICYmICFkZWZpbmVkUHJvcGVydGllcy5oYXMocmVxdWlyZWRLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjaGVtYVBhdGggPSBpdC5zY2hlbWFFbnYuYmFzZUlkICsgaXQuZXJyU2NoZW1hUGF0aDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnID0gYHJlcXVpcmVkIHByb3BlcnR5IFwiJHtyZXF1aXJlZEtleX1cIiBpcyBub3QgZGVmaW5lZCBhdCBcIiR7c2NoZW1hUGF0aH1cIiAoc3RyaWN0UmVxdWlyZWQpYDtcbiAgICAgICAgICAgICAgICAgICAgKDAsIHV0aWxfMS5jaGVja1N0cmljdE1vZGUpKGl0LCBtc2csIGl0Lm9wdHMuc3RyaWN0UmVxdWlyZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhbGxFcnJvcnNNb2RlKCkge1xuICAgICAgICAgICAgaWYgKHVzZUxvb3AgfHwgJGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjeHQuYmxvY2skZGF0YShjb2RlZ2VuXzEubmlsLCBsb29wQWxsUmVxdWlyZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIHNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAoMCwgY29kZV8xLmNoZWNrUmVwb3J0TWlzc2luZ1Byb3ApKGN4dCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGV4aXRPbkVycm9yTW9kZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pc3NpbmcgPSBnZW4ubGV0KFwibWlzc2luZ1wiKTtcbiAgICAgICAgICAgIGlmICh1c2VMb29wIHx8ICRkYXRhKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubGV0KFwidmFsaWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgY3h0LmJsb2NrJGRhdGEodmFsaWQsICgpID0+IGxvb3BVbnRpbE1pc3NpbmcobWlzc2luZywgdmFsaWQpKTtcbiAgICAgICAgICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlXzEuY2hlY2tNaXNzaW5nUHJvcCkoY3h0LCBzY2hlbWEsIG1pc3NpbmcpKTtcbiAgICAgICAgICAgICAgICAoMCwgY29kZV8xLnJlcG9ydE1pc3NpbmdQcm9wKShjeHQsIG1pc3NpbmcpO1xuICAgICAgICAgICAgICAgIGdlbi5lbHNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbG9vcEFsbFJlcXVpcmVkKCkge1xuICAgICAgICAgICAgZ2VuLmZvck9mKFwicHJvcFwiLCBzY2hlbWFDb2RlLCAocHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgIGN4dC5zZXRQYXJhbXMoeyBtaXNzaW5nUHJvcGVydHk6IHByb3AgfSk7XG4gICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlXzEubm9Qcm9wZXJ0eUluRGF0YSkoZ2VuLCBkYXRhLCBwcm9wLCBvcHRzLm93blByb3BlcnRpZXMpLCAoKSA9PiBjeHQuZXJyb3IoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsb29wVW50aWxNaXNzaW5nKG1pc3NpbmcsIHZhbGlkKSB7XG4gICAgICAgICAgICBjeHQuc2V0UGFyYW1zKHsgbWlzc2luZ1Byb3BlcnR5OiBtaXNzaW5nIH0pO1xuICAgICAgICAgICAgZ2VuLmZvck9mKG1pc3NpbmcsIHNjaGVtYUNvZGUsICgpID0+IHtcbiAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCAoMCwgY29kZV8xLnByb3BlcnR5SW5EYXRhKShnZW4sIGRhdGEsIG1pc3NpbmcsIG9wdHMub3duUHJvcGVydGllcykpO1xuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLm5vdCkodmFsaWQpLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGN4dC5lcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICBnZW4uYnJlYWsoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGNvZGVnZW5fMS5uaWwpO1xuICAgICAgICB9XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1aXJlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/required.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst dataType_1 = __webpack_require__(/*! ../../compile/validate/dataType */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/validate/dataType.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/compile/util.js\");\nconst equal_1 = __webpack_require__(/*! ../../runtime/equal */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/runtime/equal.js\");\nconst error = {\n    message: ({ params: { i, j } }) => (0, codegen_1.str) `must NOT have duplicate items (items ## ${j} and ${i} are identical)`,\n    params: ({ params: { i, j } }) => (0, codegen_1._) `{i: ${i}, j: ${j}}`,\n};\nconst def = {\n    keyword: \"uniqueItems\",\n    type: \"array\",\n    schemaType: \"boolean\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;\n        if (!$data && !schema)\n            return;\n        const valid = gen.let(\"valid\");\n        const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];\n        cxt.block$data(valid, validateUniqueItems, (0, codegen_1._) `${schemaCode} === false`);\n        cxt.ok(valid);\n        function validateUniqueItems() {\n            const i = gen.let(\"i\", (0, codegen_1._) `${data}.length`);\n            const j = gen.let(\"j\");\n            cxt.setParams({ i, j });\n            gen.assign(valid, true);\n            gen.if((0, codegen_1._) `${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));\n        }\n        function canOptimize() {\n            return itemTypes.length > 0 && !itemTypes.some((t) => t === \"object\" || t === \"array\");\n        }\n        function loopN(i, j) {\n            const item = gen.name(\"item\");\n            const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);\n            const indices = gen.const(\"indices\", (0, codegen_1._) `{}`);\n            gen.for((0, codegen_1._) `;${i}--;`, () => {\n                gen.let(item, (0, codegen_1._) `${data}[${i}]`);\n                gen.if(wrongType, (0, codegen_1._) `continue`);\n                if (itemTypes.length > 1)\n                    gen.if((0, codegen_1._) `typeof ${item} == \"string\"`, (0, codegen_1._) `${item} += \"_\"`);\n                gen\n                    .if((0, codegen_1._) `typeof ${indices}[${item}] == \"number\"`, () => {\n                    gen.assign(j, (0, codegen_1._) `${indices}[${item}]`);\n                    cxt.error();\n                    gen.assign(valid, false).break();\n                })\n                    .code((0, codegen_1._) `${indices}[${item}] = ${i}`);\n            });\n        }\n        function loopN2(i, j) {\n            const eql = (0, util_1.useFunc)(gen, equal_1.default);\n            const outer = gen.name(\"outer\");\n            gen.label(outer).for((0, codegen_1._) `;${i}--;`, () => gen.for((0, codegen_1._) `${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._) `${eql}(${data}[${i}], ${data}[${j}])`, () => {\n                cxt.error();\n                gen.assign(valid, false).break(outer);\n            })));\n        }\n    },\n};\nexports[\"default\"] = def;\n//# sourceMappingURL=uniqueItems.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL3VuaXF1ZUl0ZW1zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixtQkFBTyxDQUFDLDJJQUFpQztBQUM1RCxrQkFBa0IsbUJBQU8sQ0FBQyw2SEFBdUI7QUFDakQsZUFBZSxtQkFBTyxDQUFDLGlIQUFvQjtBQUMzQyxnQkFBZ0IsbUJBQU8sQ0FBQyxtSEFBcUI7QUFDN0M7QUFDQSxnQkFBZ0IsVUFBVSxRQUFRLG1FQUFtRSxHQUFHLE1BQU0sR0FBRztBQUNqSCxlQUFlLFVBQVUsUUFBUSx3QkFBd0IsS0FBSyxFQUFFLE9BQU8sR0FBRztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHlEQUF5RDtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxZQUFZO0FBQ25GO0FBQ0E7QUFDQSx1REFBdUQsS0FBSztBQUM1RDtBQUNBLDRCQUE0QixNQUFNO0FBQ2xDO0FBQ0EsdUNBQXVDLEdBQUc7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUU7QUFDckUsdUNBQXVDLEVBQUUsRUFBRSxHQUFHO0FBQzlDLGtEQUFrRCxLQUFLLEdBQUcsRUFBRTtBQUM1RDtBQUNBO0FBQ0Esc0RBQXNELE1BQU0sa0NBQWtDLE1BQU07QUFDcEc7QUFDQSxtREFBbUQsUUFBUSxHQUFHLEtBQUs7QUFDbkUsc0RBQXNELFFBQVEsR0FBRyxLQUFLO0FBQ3RFO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsOENBQThDLFFBQVEsR0FBRyxLQUFLLE1BQU0sRUFBRTtBQUN0RSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsRUFBRSxFQUFFLEdBQUcscUNBQXFDLEdBQUcsSUFBSSxJQUFJLEVBQUUsRUFBRSxHQUFHLG9DQUFvQyxJQUFJLEdBQUcsS0FBSyxHQUFHLEVBQUUsS0FBSyxLQUFLLEdBQUcsRUFBRTtBQUN0TDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL3VuaXF1ZUl0ZW1zLmpzPzA4NDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkYXRhVHlwZV8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdmFsaWRhdGUvZGF0YVR5cGVcIik7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVxdWFsXzEgPSByZXF1aXJlKFwiLi4vLi4vcnVudGltZS9lcXVhbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHBhcmFtczogeyBpLCBqIH0gfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IE5PVCBoYXZlIGR1cGxpY2F0ZSBpdGVtcyAoaXRlbXMgIyMgJHtqfSBhbmQgJHtpfSBhcmUgaWRlbnRpY2FsKWAsXG4gICAgcGFyYW1zOiAoeyBwYXJhbXM6IHsgaSwgaiB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtpOiAke2l9LCBqOiAke2p9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwidW5pcXVlSXRlbXNcIixcbiAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgc2NoZW1hVHlwZTogXCJib29sZWFuXCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIGRhdGEsICRkYXRhLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgc2NoZW1hQ29kZSwgaXQgfSA9IGN4dDtcbiAgICAgICAgaWYgKCEkZGF0YSAmJiAhc2NoZW1hKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5sZXQoXCJ2YWxpZFwiKTtcbiAgICAgICAgY29uc3QgaXRlbVR5cGVzID0gcGFyZW50U2NoZW1hLml0ZW1zID8gKDAsIGRhdGFUeXBlXzEuZ2V0U2NoZW1hVHlwZXMpKHBhcmVudFNjaGVtYS5pdGVtcykgOiBbXTtcbiAgICAgICAgY3h0LmJsb2NrJGRhdGEodmFsaWQsIHZhbGlkYXRlVW5pcXVlSXRlbXMsICgwLCBjb2RlZ2VuXzEuXykgYCR7c2NoZW1hQ29kZX0gPT09IGZhbHNlYCk7XG4gICAgICAgIGN4dC5vayh2YWxpZCk7XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlVW5pcXVlSXRlbXMoKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gZ2VuLmxldChcImlcIiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfS5sZW5ndGhgKTtcbiAgICAgICAgICAgIGNvbnN0IGogPSBnZW4ubGV0KFwialwiKTtcbiAgICAgICAgICAgIGN4dC5zZXRQYXJhbXMoeyBpLCBqIH0pO1xuICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgdHJ1ZSk7XG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtpfSA+IDFgLCAoKSA9PiAoY2FuT3B0aW1pemUoKSA/IGxvb3BOIDogbG9vcE4yKShpLCBqKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2FuT3B0aW1pemUoKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbVR5cGVzLmxlbmd0aCA+IDAgJiYgIWl0ZW1UeXBlcy5zb21lKCh0KSA9PiB0ID09PSBcIm9iamVjdFwiIHx8IHQgPT09IFwiYXJyYXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbG9vcE4oaSwgaikge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGdlbi5uYW1lKFwiaXRlbVwiKTtcbiAgICAgICAgICAgIGNvbnN0IHdyb25nVHlwZSA9ICgwLCBkYXRhVHlwZV8xLmNoZWNrRGF0YVR5cGVzKShpdGVtVHlwZXMsIGl0ZW0sIGl0Lm9wdHMuc3RyaWN0TnVtYmVycywgZGF0YVR5cGVfMS5EYXRhVHlwZS5Xcm9uZyk7XG4gICAgICAgICAgICBjb25zdCBpbmRpY2VzID0gZ2VuLmNvbnN0KFwiaW5kaWNlc1wiLCAoMCwgY29kZWdlbl8xLl8pIGB7fWApO1xuICAgICAgICAgICAgZ2VuLmZvcigoMCwgY29kZWdlbl8xLl8pIGA7JHtpfS0tO2AsICgpID0+IHtcbiAgICAgICAgICAgICAgICBnZW4ubGV0KGl0ZW0sICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX1bJHtpfV1gKTtcbiAgICAgICAgICAgICAgICBnZW4uaWYod3JvbmdUeXBlLCAoMCwgY29kZWdlbl8xLl8pIGBjb250aW51ZWApO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtVHlwZXMubGVuZ3RoID4gMSlcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYHR5cGVvZiAke2l0ZW19ID09IFwic3RyaW5nXCJgLCAoMCwgY29kZWdlbl8xLl8pIGAke2l0ZW19ICs9IFwiX1wiYCk7XG4gICAgICAgICAgICAgICAgZ2VuXG4gICAgICAgICAgICAgICAgICAgIC5pZigoMCwgY29kZWdlbl8xLl8pIGB0eXBlb2YgJHtpbmRpY2VzfVske2l0ZW19XSA9PSBcIm51bWJlclwiYCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKGosICgwLCBjb2RlZ2VuXzEuXykgYCR7aW5kaWNlc31bJHtpdGVtfV1gKTtcbiAgICAgICAgICAgICAgICAgICAgY3h0LmVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsIGZhbHNlKS5icmVhaygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jb2RlKCgwLCBjb2RlZ2VuXzEuXykgYCR7aW5kaWNlc31bJHtpdGVtfV0gPSAke2l9YCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsb29wTjIoaSwgaikge1xuICAgICAgICAgICAgY29uc3QgZXFsID0gKDAsIHV0aWxfMS51c2VGdW5jKShnZW4sIGVxdWFsXzEuZGVmYXVsdCk7XG4gICAgICAgICAgICBjb25zdCBvdXRlciA9IGdlbi5uYW1lKFwib3V0ZXJcIik7XG4gICAgICAgICAgICBnZW4ubGFiZWwob3V0ZXIpLmZvcigoMCwgY29kZWdlbl8xLl8pIGA7JHtpfS0tO2AsICgpID0+IGdlbi5mb3IoKDAsIGNvZGVnZW5fMS5fKSBgJHtqfSA9ICR7aX07ICR7an0tLTtgLCAoKSA9PiBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtlcWx9KCR7ZGF0YX1bJHtpfV0sICR7ZGF0YX1bJHtqfV0pYCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGN4dC5lcnJvcigpO1xuICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsIGZhbHNlKS5icmVhayhvdXRlcik7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmlxdWVJdGVtcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/json-schema-traverse/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/json-schema-traverse/index.js ***!
  \*********************************************************************************/
/***/ ((module) => {

eval("\n\nvar traverse = module.exports = function (schema, opts, cb) {\n  // Legacy support for v0.3.1 and earlier.\n  if (typeof opts == 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  cb = opts.cb || cb;\n  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};\n  var post = cb.post || function() {};\n\n  _traverse(opts, pre, post, schema, '', schema);\n};\n\n\ntraverse.keywords = {\n  additionalItems: true,\n  items: true,\n  contains: true,\n  additionalProperties: true,\n  propertyNames: true,\n  not: true,\n  if: true,\n  then: true,\n  else: true\n};\n\ntraverse.arrayKeywords = {\n  items: true,\n  allOf: true,\n  anyOf: true,\n  oneOf: true\n};\n\ntraverse.propsKeywords = {\n  $defs: true,\n  definitions: true,\n  properties: true,\n  patternProperties: true,\n  dependencies: true\n};\n\ntraverse.skipKeywords = {\n  default: true,\n  enum: true,\n  const: true,\n  required: true,\n  maximum: true,\n  minimum: true,\n  exclusiveMaximum: true,\n  exclusiveMinimum: true,\n  multipleOf: true,\n  maxLength: true,\n  minLength: true,\n  pattern: true,\n  format: true,\n  maxItems: true,\n  minItems: true,\n  uniqueItems: true,\n  maxProperties: true,\n  minProperties: true\n};\n\n\nfunction _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {\n    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n    for (var key in schema) {\n      var sch = schema[key];\n      if (Array.isArray(sch)) {\n        if (key in traverse.arrayKeywords) {\n          for (var i=0; i<sch.length; i++)\n            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);\n        }\n      } else if (key in traverse.propsKeywords) {\n        if (sch && typeof sch == 'object') {\n          for (var prop in sch)\n            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);\n        }\n      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {\n        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);\n      }\n    }\n    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n  }\n}\n\n\nfunction escapeJsonPtr(str) {\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXRyYXZlcnNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsY0FBYztBQUN0QztBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9ub2RlX21vZHVsZXMvanNvbi1zY2hlbWEtdHJhdmVyc2UvaW5kZXguanM/ZGYwYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB0cmF2ZXJzZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNjaGVtYSwgb3B0cywgY2IpIHtcbiAgLy8gTGVnYWN5IHN1cHBvcnQgZm9yIHYwLjMuMSBhbmQgZWFybGllci5cbiAgaWYgKHR5cGVvZiBvcHRzID09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG5cbiAgY2IgPSBvcHRzLmNiIHx8IGNiO1xuICB2YXIgcHJlID0gKHR5cGVvZiBjYiA9PSAnZnVuY3Rpb24nKSA/IGNiIDogY2IucHJlIHx8IGZ1bmN0aW9uKCkge307XG4gIHZhciBwb3N0ID0gY2IucG9zdCB8fCBmdW5jdGlvbigpIHt9O1xuXG4gIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaGVtYSwgJycsIHNjaGVtYSk7XG59O1xuXG5cbnRyYXZlcnNlLmtleXdvcmRzID0ge1xuICBhZGRpdGlvbmFsSXRlbXM6IHRydWUsXG4gIGl0ZW1zOiB0cnVlLFxuICBjb250YWluczogdHJ1ZSxcbiAgYWRkaXRpb25hbFByb3BlcnRpZXM6IHRydWUsXG4gIHByb3BlcnR5TmFtZXM6IHRydWUsXG4gIG5vdDogdHJ1ZSxcbiAgaWY6IHRydWUsXG4gIHRoZW46IHRydWUsXG4gIGVsc2U6IHRydWVcbn07XG5cbnRyYXZlcnNlLmFycmF5S2V5d29yZHMgPSB7XG4gIGl0ZW1zOiB0cnVlLFxuICBhbGxPZjogdHJ1ZSxcbiAgYW55T2Y6IHRydWUsXG4gIG9uZU9mOiB0cnVlXG59O1xuXG50cmF2ZXJzZS5wcm9wc0tleXdvcmRzID0ge1xuICAkZGVmczogdHJ1ZSxcbiAgZGVmaW5pdGlvbnM6IHRydWUsXG4gIHByb3BlcnRpZXM6IHRydWUsXG4gIHBhdHRlcm5Qcm9wZXJ0aWVzOiB0cnVlLFxuICBkZXBlbmRlbmNpZXM6IHRydWVcbn07XG5cbnRyYXZlcnNlLnNraXBLZXl3b3JkcyA9IHtcbiAgZGVmYXVsdDogdHJ1ZSxcbiAgZW51bTogdHJ1ZSxcbiAgY29uc3Q6IHRydWUsXG4gIHJlcXVpcmVkOiB0cnVlLFxuICBtYXhpbXVtOiB0cnVlLFxuICBtaW5pbXVtOiB0cnVlLFxuICBleGNsdXNpdmVNYXhpbXVtOiB0cnVlLFxuICBleGNsdXNpdmVNaW5pbXVtOiB0cnVlLFxuICBtdWx0aXBsZU9mOiB0cnVlLFxuICBtYXhMZW5ndGg6IHRydWUsXG4gIG1pbkxlbmd0aDogdHJ1ZSxcbiAgcGF0dGVybjogdHJ1ZSxcbiAgZm9ybWF0OiB0cnVlLFxuICBtYXhJdGVtczogdHJ1ZSxcbiAgbWluSXRlbXM6IHRydWUsXG4gIHVuaXF1ZUl0ZW1zOiB0cnVlLFxuICBtYXhQcm9wZXJ0aWVzOiB0cnVlLFxuICBtaW5Qcm9wZXJ0aWVzOiB0cnVlXG59O1xuXG5cbmZ1bmN0aW9uIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaGVtYSwganNvblB0ciwgcm9vdFNjaGVtYSwgcGFyZW50SnNvblB0ciwgcGFyZW50S2V5d29yZCwgcGFyZW50U2NoZW1hLCBrZXlJbmRleCkge1xuICBpZiAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoc2NoZW1hKSkge1xuICAgIHByZShzY2hlbWEsIGpzb25QdHIsIHJvb3RTY2hlbWEsIHBhcmVudEpzb25QdHIsIHBhcmVudEtleXdvcmQsIHBhcmVudFNjaGVtYSwga2V5SW5kZXgpO1xuICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHtcbiAgICAgIHZhciBzY2ggPSBzY2hlbWFba2V5XTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0cmF2ZXJzZS5hcnJheUtleXdvcmRzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaT0wOyBpPHNjaC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaFtpXSwganNvblB0ciArICcvJyArIGtleSArICcvJyArIGksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hLCBpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgaW4gdHJhdmVyc2UucHJvcHNLZXl3b3Jkcykge1xuICAgICAgICBpZiAoc2NoICYmIHR5cGVvZiBzY2ggPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNjaClcbiAgICAgICAgICAgIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaFtwcm9wXSwganNvblB0ciArICcvJyArIGtleSArICcvJyArIGVzY2FwZUpzb25QdHIocHJvcCksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hLCBwcm9wKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgaW4gdHJhdmVyc2Uua2V5d29yZHMgfHwgKG9wdHMuYWxsS2V5cyAmJiAhKGtleSBpbiB0cmF2ZXJzZS5za2lwS2V5d29yZHMpKSkge1xuICAgICAgICBfdHJhdmVyc2Uob3B0cywgcHJlLCBwb3N0LCBzY2gsIGpzb25QdHIgKyAnLycgKyBrZXksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcG9zdChzY2hlbWEsIGpzb25QdHIsIHJvb3RTY2hlbWEsIHBhcmVudEpzb25QdHIsIHBhcmVudEtleXdvcmQsIHBhcmVudFNjaGVtYSwga2V5SW5kZXgpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gZXNjYXBlSnNvblB0cihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9+L2csICd+MCcpLnJlcGxhY2UoL1xcLy9nLCAnfjEnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/node_modules/json-schema-traverse/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js":
/*!************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/chat.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar chat_exports = {};\n__export(chat_exports, {\n  Chat: () => Chat,\n  MAIN_THREAD: () => MAIN_THREAD,\n  SESSION_ID_ATTR: () => SESSION_ID_ATTR,\n  THREAD_NAME_ATTR: () => THREAD_NAME_ATTR\n});\nmodule.exports = __toCommonJS(chat_exports);\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\");\nvar import_session = __webpack_require__(/*! ./session.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\");\nconst MAIN_THREAD = \"main\";\nconst SESSION_ID_ATTR = `${import_tracing.ATTR_PREFIX}:sessionId`;\nconst THREAD_NAME_ATTR = `${import_tracing.ATTR_PREFIX}:threadName`;\nclass Chat {\n  constructor(session, requestBase, options) {\n    this.session = session;\n    this.sessionId = options.id;\n    this.threadName = options.thread;\n    this.requestBase = requestBase?.then((rb) => {\n      const requestBase2 = { ...rb };\n      if (requestBase2 && requestBase2[\"prompt\"]) {\n        const basePrompt = requestBase2[\"prompt\"];\n        let promptMessage;\n        if (typeof basePrompt === \"string\") {\n          promptMessage = {\n            role: \"user\",\n            content: [{ text: basePrompt }]\n          };\n        } else if (Array.isArray(basePrompt)) {\n          promptMessage = {\n            role: \"user\",\n            content: basePrompt\n          };\n        } else {\n          promptMessage = {\n            role: \"user\",\n            content: [basePrompt]\n          };\n        }\n        requestBase2.messages = [...requestBase2.messages ?? [], promptMessage];\n      }\n      if (hasPreamble(requestBase2.messages)) {\n        requestBase2.messages = [\n          // if request base contains a preamble, always put it first\n          ...getPreamble(requestBase2.messages) ?? [],\n          // strip out the preamble from history\n          ...stripPreamble(options.messages) ?? [],\n          // add whatever non-preamble remains from request\n          ...stripPreamble(requestBase2.messages) ?? []\n        ];\n      } else {\n        requestBase2.messages = [\n          ...options.messages ?? [],\n          ...requestBase2.messages ?? []\n        ];\n      }\n      this._messages = requestBase2.messages;\n      return requestBase2;\n    });\n    this._messages = options.messages;\n  }\n  requestBase;\n  sessionId;\n  _messages;\n  threadName;\n  async send(options) {\n    return (0, import_session.runWithSession)(\n      this.session.registry,\n      this.session,\n      () => (0, import_tracing.runInNewSpan)(\n        this.session.registry,\n        {\n          metadata: {\n            name: \"send\"\n          },\n          labels: {\n            [import_tracing.SPAN_TYPE_ATTR]: \"helper\",\n            [SESSION_ID_ATTR]: this.session.id,\n            [THREAD_NAME_ATTR]: this.threadName\n          }\n        },\n        async (metadata) => {\n          const resolvedOptions = resolveSendOptions(options);\n          let streamingCallback = void 0;\n          if (resolvedOptions.onChunk || resolvedOptions.streamingCallback) {\n            streamingCallback = resolvedOptions.onChunk ?? resolvedOptions.streamingCallback;\n          }\n          const request = {\n            ...await this.requestBase,\n            messages: this.messages,\n            ...resolvedOptions\n          };\n          metadata.input = resolvedOptions;\n          const response = await (0, import_index.generate)(this.session.registry, {\n            ...request,\n            onChunk: streamingCallback\n          });\n          this.requestBase = Promise.resolve({\n            ...await this.requestBase,\n            // these things may get changed by tools calling within generate.\n            tools: response?.request?.tools?.map((td) => td.name),\n            toolChoice: response?.request?.toolChoice,\n            config: response?.request?.config\n          });\n          await this.updateMessages(response.messages);\n          metadata.output = JSON.stringify(response);\n          return response;\n        }\n      )\n    );\n  }\n  sendStream(options) {\n    const channel = new import_async.Channel();\n    const resolvedOptions = resolveSendOptions(options);\n    const sent = this.send({\n      ...resolvedOptions,\n      onChunk: (chunk) => channel.send(chunk)\n    });\n    sent.then(\n      () => channel.close(),\n      (err) => channel.error(err)\n    );\n    return {\n      response: sent,\n      stream: channel\n    };\n  }\n  get messages() {\n    return this._messages ?? [];\n  }\n  async updateMessages(messages) {\n    this._messages = messages;\n    await this.session.updateMessages(this.threadName, messages);\n  }\n}\nfunction hasPreamble(msgs) {\n  return !!msgs?.find((m) => m.metadata?.preamble);\n}\nfunction getPreamble(msgs) {\n  return msgs?.filter((m) => m.metadata?.preamble);\n}\nfunction stripPreamble(msgs) {\n  return msgs?.filter((m) => !m.metadata?.preamble);\n}\nfunction resolveSendOptions(options) {\n  let resolvedOptions;\n  if (typeof options === \"string\") {\n    resolvedOptions = {\n      prompt: options\n    };\n  } else if (Array.isArray(options)) {\n    resolvedOptions = {\n      prompt: options\n    };\n  } else {\n    resolvedOptions = options;\n  }\n  return resolvedOptions;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=chat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/check-operation.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/check-operation.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar check_operation_exports = {};\n__export(check_operation_exports, {\n  checkOperation: () => checkOperation\n});\nmodule.exports = __toCommonJS(check_operation_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nasync function checkOperation(registry, operation) {\n  if (!operation.action) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"Provided operation is missing original request information\"\n    });\n  }\n  const backgroundAction = await registry.lookupBackgroundAction(\n    operation.action\n  );\n  if (!backgroundAction) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Failed to resolve background action from original request: ${operation.action}`\n    });\n  }\n  return await backgroundAction.check(operation);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=check-operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9jaGVjay1vcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxpQkFBaUI7QUFDOUYsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvY2hlY2stb3BlcmF0aW9uLmpzPzkyN2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGNoZWNrX29wZXJhdGlvbl9leHBvcnRzID0ge307XG5fX2V4cG9ydChjaGVja19vcGVyYXRpb25fZXhwb3J0cywge1xuICBjaGVja09wZXJhdGlvbjogKCkgPT4gY2hlY2tPcGVyYXRpb25cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoY2hlY2tfb3BlcmF0aW9uX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrT3BlcmF0aW9uKHJlZ2lzdHJ5LCBvcGVyYXRpb24pIHtcbiAgaWYgKCFvcGVyYXRpb24uYWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICBtZXNzYWdlOiBcIlByb3ZpZGVkIG9wZXJhdGlvbiBpcyBtaXNzaW5nIG9yaWdpbmFsIHJlcXVlc3QgaW5mb3JtYXRpb25cIlxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGJhY2tncm91bmRBY3Rpb24gPSBhd2FpdCByZWdpc3RyeS5sb29rdXBCYWNrZ3JvdW5kQWN0aW9uKFxuICAgIG9wZXJhdGlvbi5hY3Rpb25cbiAgKTtcbiAgaWYgKCFiYWNrZ3JvdW5kQWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICBtZXNzYWdlOiBgRmFpbGVkIHRvIHJlc29sdmUgYmFja2dyb3VuZCBhY3Rpb24gZnJvbSBvcmlnaW5hbCByZXF1ZXN0OiAke29wZXJhdGlvbi5hY3Rpb259YFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBhd2FpdCBiYWNrZ3JvdW5kQWN0aW9uLmNoZWNrKG9wZXJhdGlvbik7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2hlY2tPcGVyYXRpb25cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2stb3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/check-operation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/document.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar document_exports = {};\n__export(document_exports, {\n  CustomPartSchema: () => CustomPartSchema,\n  DataPartSchema: () => DataPartSchema,\n  Document: () => Document,\n  DocumentDataSchema: () => DocumentDataSchema,\n  MediaPartSchema: () => MediaPartSchema,\n  MediaSchema: () => MediaSchema,\n  PartSchema: () => PartSchema,\n  ReasoningPartSchema: () => ReasoningPartSchema,\n  ResourcePartSchema: () => ResourcePartSchema,\n  TextPartSchema: () => TextPartSchema,\n  ToolRequestPartSchema: () => ToolRequestPartSchema,\n  ToolRequestSchema: () => ToolRequestSchema,\n  ToolResponsePartSchema: () => ToolResponsePartSchema,\n  ToolResponseSchema: () => ToolResponseSchema,\n  checkUniqueDocuments: () => checkUniqueDocuments\n});\nmodule.exports = __toCommonJS(document_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nconst EmptyPartSchema = import_core.z.object({\n  text: import_core.z.never().optional(),\n  media: import_core.z.never().optional(),\n  toolRequest: import_core.z.never().optional(),\n  toolResponse: import_core.z.never().optional(),\n  data: import_core.z.unknown().optional(),\n  metadata: import_core.z.record(import_core.z.unknown()).optional(),\n  custom: import_core.z.record(import_core.z.unknown()).optional(),\n  reasoning: import_core.z.never().optional(),\n  resource: import_core.z.never().optional()\n});\nconst TextPartSchema = EmptyPartSchema.extend({\n  /** The text of the message. */\n  text: import_core.z.string()\n});\nconst ReasoningPartSchema = EmptyPartSchema.extend({\n  /** The reasoning text of the message. */\n  reasoning: import_core.z.string()\n});\nconst MediaSchema = import_core.z.object({\n  /** The media content type. Inferred from data uri if not provided. */\n  contentType: import_core.z.string().optional(),\n  /** A `data:` or `https:` uri containing the media content.  */\n  url: import_core.z.string()\n});\nconst MediaPartSchema = EmptyPartSchema.extend({\n  media: MediaSchema\n});\nconst ToolRequestSchema = import_core.z.object({\n  /** The call id or reference for a specific request. */\n  ref: import_core.z.string().optional(),\n  /** The name of the tool to call. */\n  name: import_core.z.string(),\n  /** The input parameters for the tool, usually a JSON object. */\n  input: import_core.z.unknown().optional()\n});\nconst ToolRequestPartSchema = EmptyPartSchema.extend({\n  /** A request for a tool to be executed, usually provided by a model. */\n  toolRequest: ToolRequestSchema\n});\nconst ToolResponseSchema = import_core.z.object({\n  /** The call id or reference for a specific request. */\n  ref: import_core.z.string().optional(),\n  /** The name of the tool. */\n  name: import_core.z.string(),\n  /** The output data returned from the tool, usually a JSON object. */\n  output: import_core.z.unknown().optional()\n});\nconst ToolResponsePartSchema = EmptyPartSchema.extend({\n  /** A provided response to a tool call. */\n  toolResponse: ToolResponseSchema\n});\nconst DataPartSchema = EmptyPartSchema.extend({\n  data: import_core.z.unknown()\n});\nconst CustomPartSchema = EmptyPartSchema.extend({\n  custom: import_core.z.record(import_core.z.any())\n});\nconst ResourcePartSchema = EmptyPartSchema.extend({\n  resource: import_core.z.object({\n    uri: import_core.z.string()\n  })\n});\nconst PartSchema = import_core.z.union([TextPartSchema, MediaPartSchema]);\nconst DocumentDataSchema = import_core.z.object({\n  content: import_core.z.array(PartSchema),\n  metadata: import_core.z.record(import_core.z.string(), import_core.z.any()).optional()\n});\nfunction deepCopy(value) {\n  if (value === void 0) {\n    return value;\n  }\n  return JSON.parse(JSON.stringify(value));\n}\nclass Document {\n  content;\n  metadata;\n  constructor(data) {\n    this.content = deepCopy(data.content);\n    this.metadata = deepCopy(data.metadata);\n  }\n  static fromText(text, metadata) {\n    return new Document({\n      content: [{ text }],\n      metadata\n    });\n  }\n  // Construct a Document from a single media item\n  static fromMedia(url, contentType, metadata) {\n    return new Document({\n      content: [\n        {\n          media: {\n            contentType,\n            url\n          }\n        }\n      ],\n      metadata\n    });\n  }\n  // Construct a Document from content\n  static fromData(data, dataType, metadata) {\n    if (dataType === \"text\") {\n      return this.fromText(data, metadata);\n    }\n    return this.fromMedia(data, dataType, metadata);\n  }\n  /**\n   * Concatenates all `text` parts present in the document with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Media array getter.\n   * @returns the array of media parts.\n   */\n  get media() {\n    return this.content.filter((part) => part.media && !part.text).map((part) => part.media);\n  }\n  /**\n   * Gets the first item in the document. Either text or media url.\n   */\n  get data() {\n    if (this.text) {\n      return this.text;\n    }\n    if (this.media) {\n      return this.media[0].url;\n    }\n    return \"\";\n  }\n  /**\n   * Gets the contentType of the data that is returned by data()\n   */\n  get dataType() {\n    if (this.text) {\n      return \"text\";\n    }\n    if (this.media && this.media[0].contentType) {\n      return this.media[0].contentType;\n    }\n    return void 0;\n  }\n  toJSON() {\n    return {\n      content: deepCopy(this.content),\n      metadata: deepCopy(this.metadata)\n    };\n  }\n  /**\n   * Embedders may return multiple embeddings for a single document.\n   * But storage still requires a 1:1 relationship. So we create an\n   * array of Documents from a single document - one per embedding.\n   * @param embeddings The embeddings to create the documents from.\n   * @returns an array of documents based on this document and the embeddings.\n   */\n  getEmbeddingDocuments(embeddings) {\n    const documents = [];\n    for (const embedding of embeddings) {\n      const jsonDoc = this.toJSON();\n      if (embedding.metadata) {\n        if (!jsonDoc.metadata) {\n          jsonDoc.metadata = {};\n        }\n        jsonDoc.metadata.embedMetadata = embedding.metadata;\n      }\n      documents.push(new Document(jsonDoc));\n    }\n    checkUniqueDocuments(documents);\n    return documents;\n  }\n}\nfunction checkUniqueDocuments(documents) {\n  const seen = /* @__PURE__ */ new Set();\n  for (const doc of documents) {\n    const serialized = JSON.stringify(doc);\n    if (seen.has(serialized)) {\n      console.warn(\n        \"Warning: embedding documents are not unique. Are you missing embed metadata?\"\n      );\n      return false;\n    }\n    seen.add(serialized);\n  }\n  return true;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=document.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/embedder.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar embedder_exports = {};\n__export(embedder_exports, {\n  EmbedderInfoSchema: () => EmbedderInfoSchema,\n  EmbeddingSchema: () => EmbeddingSchema,\n  defineEmbedder: () => defineEmbedder,\n  embed: () => embed,\n  embedMany: () => embedMany,\n  embedder: () => embedder,\n  embedderActionMetadata: () => embedderActionMetadata,\n  embedderRef: () => embedderRef\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst EmbeddingSchema = import_core.z.object({\n  embedding: import_core.z.array(import_core.z.number()),\n  metadata: import_core.z.record(import_core.z.string(), import_core.z.unknown()).optional()\n});\nconst EmbedRequestSchema = import_core.z.object({\n  input: import_core.z.array(import_document.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst EmbedResponseSchema = import_core.z.object({\n  embeddings: import_core.z.array(EmbeddingSchema)\n  // TODO: stats, etc.\n});\nfunction withMetadata(embedder2, configSchema) {\n  const withMeta = embedder2;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction embedder(options, runner) {\n  const embedder2 = (0, import_core.action)(\n    embedderActionOptions(options),\n    (i, opts) => runner(\n      {\n        input: i.input.map((dd) => new import_document.Document(dd)),\n        options: i.options\n      },\n      opts\n    )\n  );\n  const ewm = withMetadata(\n    embedder2,\n    options.configSchema\n  );\n  return ewm;\n}\nfunction embedderActionOptions(options) {\n  return {\n    actionType: \"embedder\",\n    name: options.name,\n    inputSchema: EmbedRequestSchema,\n    outputSchema: EmbedResponseSchema,\n    metadata: {\n      type: \"embedder\",\n      info: options.info,\n      embedder: {\n        customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n      }\n    }\n  };\n}\nfunction defineEmbedder(registry, options, runner) {\n  const embedder2 = (0, import_core.defineAction)(\n    registry,\n    embedderActionOptions(options),\n    (i) => runner(\n      i.input.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const ewm = withMetadata(\n    embedder2,\n    options.configSchema\n  );\n  return ewm;\n}\nasync function embed(registry, params) {\n  const embedder2 = await resolveEmbedder(registry, params);\n  if (!embedder2.embedderAction) {\n    let embedderId;\n    if (typeof params.embedder === \"string\") {\n      embedderId = params.embedder;\n    } else if (params.embedder?.__action?.name) {\n      embedderId = params.embedder.__action.name;\n    } else {\n      embedderId = params.embedder.name;\n    }\n    throw new Error(`Unable to resolve embedder ${embedderId}`);\n  }\n  const response = await embedder2.embedderAction({\n    input: typeof params.content === \"string\" ? [import_document.Document.fromText(params.content, params.metadata)] : [params.content],\n    options: {\n      version: embedder2.version,\n      ...embedder2.config,\n      ...params.options\n    }\n  });\n  return response.embeddings;\n}\nasync function resolveEmbedder(registry, params) {\n  if (typeof params.embedder === \"string\") {\n    return {\n      embedderAction: await registry.lookupAction(\n        `/embedder/${params.embedder}`\n      )\n    };\n  } else if (Object.hasOwnProperty.call(params.embedder, \"__action\")) {\n    return {\n      embedderAction: params.embedder\n    };\n  } else if (Object.hasOwnProperty.call(params.embedder, \"name\")) {\n    const ref = params.embedder;\n    return {\n      embedderAction: await registry.lookupAction(\n        `/embedder/${params.embedder.name}`\n      ),\n      config: {\n        ...ref.config\n      },\n      version: ref.version\n    };\n  }\n  throw new Error(`failed to resolve embedder ${params.embedder}`);\n}\nasync function embedMany(registry, params) {\n  let embedder2;\n  if (typeof params.embedder === \"string\") {\n    embedder2 = await registry.lookupAction(`/embedder/${params.embedder}`);\n  } else if (Object.hasOwnProperty.call(params.embedder, \"info\")) {\n    embedder2 = await registry.lookupAction(\n      `/embedder/${params.embedder.name}`\n    );\n  } else {\n    embedder2 = params.embedder;\n  }\n  if (!embedder2) {\n    throw new Error(\"Unable to utilize the provided embedder\");\n  }\n  const response = await embedder2({\n    input: params.content.map(\n      (i) => typeof i === \"string\" ? import_document.Document.fromText(i, params.metadata) : i\n    ),\n    options: params.options\n  });\n  return response.embeddings;\n}\nconst EmbedderInfoSchema = import_core.z.object({\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can input this type of data. */\n    input: import_core.z.array(import_core.z.enum([\"text\", \"image\", \"video\"])).optional(),\n    /** Model can support multiple languages */\n    multilingual: import_core.z.boolean().optional()\n  }).optional(),\n  /** Embedding dimension */\n  dimensions: import_core.z.number().optional()\n});\nfunction embedderRef(options) {\n  let name = options.name;\n  if (options.namespace && !name.startsWith(options.namespace + \"/\")) {\n    name = `${options.namespace}/${name}`;\n  }\n  return { ...options, name };\n}\nfunction embedderActionMetadata({\n  name,\n  info,\n  configSchema\n}) {\n  return {\n    actionType: \"embedder\",\n    name,\n    inputJsonSchema: (0, import_schema.toJsonSchema)({ schema: EmbedRequestSchema }),\n    outputJsonSchema: (0, import_schema.toJsonSchema)({ schema: EmbedResponseSchema }),\n    metadata: {\n      embedder: {\n        ...info,\n        customOptions: configSchema ? (0, import_schema.toJsonSchema)({ schema: configSchema }) : void 0\n      }\n    }\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/evaluator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar evaluator_exports = {};\n__export(evaluator_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  BaseDataPointSchema: () => BaseDataPointSchema,\n  BaseEvalDataPointSchema: () => BaseEvalDataPointSchema,\n  EVALUATOR_METADATA_KEY_DEFINITION: () => EVALUATOR_METADATA_KEY_DEFINITION,\n  EVALUATOR_METADATA_KEY_DISPLAY_NAME: () => EVALUATOR_METADATA_KEY_DISPLAY_NAME,\n  EVALUATOR_METADATA_KEY_IS_BILLED: () => EVALUATOR_METADATA_KEY_IS_BILLED,\n  EvalResponseSchema: () => EvalResponseSchema,\n  EvalResponsesSchema: () => EvalResponsesSchema,\n  EvalStatusEnum: () => EvalStatusEnum,\n  EvaluatorInfoSchema: () => EvaluatorInfoSchema,\n  SPAN_STATE_ATTR: () => SPAN_STATE_ATTR,\n  ScoreSchema: () => ScoreSchema,\n  defineEvaluator: () => defineEvaluator,\n  evaluate: () => evaluate,\n  evaluator: () => evaluator,\n  evaluatorRef: () => evaluatorRef\n});\nmodule.exports = __toCommonJS(evaluator_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_STATE_ATTR = ATTR_PREFIX + \":state\";\nconst BaseDataPointSchema = import_core.z.object({\n  input: import_core.z.unknown(),\n  output: import_core.z.unknown().optional(),\n  context: import_core.z.array(import_core.z.unknown()).optional(),\n  reference: import_core.z.unknown().optional(),\n  testCaseId: import_core.z.string().optional(),\n  traceIds: import_core.z.array(import_core.z.string()).optional()\n});\nconst BaseEvalDataPointSchema = BaseDataPointSchema.extend({\n  testCaseId: import_core.z.string()\n});\nconst EvalStatusEnumSchema = import_core.z.enum([\"UNKNOWN\", \"PASS\", \"FAIL\"]);\nvar EvalStatusEnum = /* @__PURE__ */ ((EvalStatusEnum2) => {\n  EvalStatusEnum2[\"UNKNOWN\"] = \"UNKNOWN\";\n  EvalStatusEnum2[\"PASS\"] = \"PASS\";\n  EvalStatusEnum2[\"FAIL\"] = \"FAIL\";\n  return EvalStatusEnum2;\n})(EvalStatusEnum || {});\nconst ScoreSchema = import_core.z.object({\n  id: import_core.z.string().describe(\n    \"Optional ID to differentiate different scores if applying in a single evaluation\"\n  ).optional(),\n  score: import_core.z.union([import_core.z.number(), import_core.z.string(), import_core.z.boolean()]).optional(),\n  status: EvalStatusEnumSchema.optional(),\n  error: import_core.z.string().optional(),\n  details: import_core.z.object({\n    reasoning: import_core.z.string().optional()\n  }).passthrough().optional()\n});\nconst EVALUATOR_METADATA_KEY_DISPLAY_NAME = \"evaluatorDisplayName\";\nconst EVALUATOR_METADATA_KEY_DEFINITION = \"evaluatorDefinition\";\nconst EVALUATOR_METADATA_KEY_IS_BILLED = \"evaluatorIsBilled\";\nconst EvalResponseSchema = import_core.z.object({\n  sampleIndex: import_core.z.number().optional(),\n  testCaseId: import_core.z.string(),\n  traceId: import_core.z.string().optional(),\n  spanId: import_core.z.string().optional(),\n  evaluation: import_core.z.union([ScoreSchema, import_core.z.array(ScoreSchema)])\n});\nconst EvalResponsesSchema = import_core.z.array(EvalResponseSchema);\nfunction withMetadata(evaluator2, dataPointType, configSchema) {\n  const withMeta = evaluator2;\n  withMeta.__dataPointType = dataPointType;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nconst EvalRequestSchema = import_core.z.object({\n  dataset: import_core.z.array(BaseDataPointSchema),\n  evalRunId: import_core.z.string(),\n  options: import_core.z.unknown()\n});\nfunction defineEvaluator(registry, options, runner) {\n  const e = evaluator(options, runner);\n  registry.registerAction(\"evaluator\", e);\n  return e;\n}\nfunction evaluator(options, runner) {\n  const evalMetadata = {};\n  evalMetadata[EVALUATOR_METADATA_KEY_IS_BILLED] = options.isBilled == void 0 ? true : options.isBilled;\n  evalMetadata[EVALUATOR_METADATA_KEY_DISPLAY_NAME] = options.displayName;\n  evalMetadata[EVALUATOR_METADATA_KEY_DEFINITION] = options.definition;\n  if (options.configSchema) {\n    evalMetadata[\"customOptions\"] = (0, import_schema.toJsonSchema)({\n      schema: options.configSchema\n    });\n  }\n  const evaluator2 = (0, import_core.action)(\n    {\n      actionType: \"evaluator\",\n      name: options.name,\n      inputSchema: EvalRequestSchema.extend({\n        dataset: options.dataPointType ? import_core.z.array(options.dataPointType) : import_core.z.array(BaseDataPointSchema),\n        options: options.configSchema ?? import_core.z.unknown(),\n        evalRunId: import_core.z.string(),\n        batchSize: import_core.z.number().optional()\n      }),\n      outputSchema: EvalResponsesSchema,\n      metadata: {\n        type: \"evaluator\",\n        evaluator: evalMetadata\n      }\n    },\n    async (i) => {\n      const evalResponses = [];\n      const batches = getBatchedArray(i.dataset, i.batchSize);\n      for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {\n        const batch = batches[batchIndex];\n        try {\n          await (0, import_tracing.runInNewSpan)(\n            {\n              metadata: {\n                name: i.batchSize ? `Batch ${batchIndex}` : `Test Case ${batch[0].testCaseId}`,\n                metadata: { \"evaluator:evalRunId\": i.evalRunId }\n              },\n              labels: {\n                [import_tracing.SPAN_TYPE_ATTR]: \"evaluator\"\n              }\n            },\n            async (metadata, otSpan) => {\n              const spanId = otSpan.spanContext().spanId;\n              const traceId = otSpan.spanContext().traceId;\n              const evalRunPromises = batch.map((d, index) => {\n                const sampleIndex = i.batchSize ? i.batchSize * batchIndex + index : batchIndex;\n                const datapoint = d;\n                metadata.input = {\n                  input: datapoint.input,\n                  output: datapoint.output,\n                  context: datapoint.context\n                };\n                const evalOutputPromise = runner(datapoint, i.options).then((result) => ({\n                  ...result,\n                  traceId,\n                  spanId,\n                  sampleIndex\n                })).catch((error) => {\n                  return {\n                    sampleIndex,\n                    spanId,\n                    traceId,\n                    testCaseId: datapoint.testCaseId,\n                    evaluation: {\n                      error: `Evaluation of test case ${datapoint.testCaseId} failed: \n${error}`\n                    }\n                  };\n                });\n                return evalOutputPromise;\n              });\n              const allResults = await Promise.all(evalRunPromises);\n              metadata.output = allResults.length === 1 ? allResults[0] : allResults;\n              allResults.map((result) => {\n                evalResponses.push(result);\n              });\n            }\n          );\n        } catch (e) {\n          import_logging.logger.error(\n            `Evaluation of batch ${batchIndex} failed: \n${e.stack}`\n          );\n          continue;\n        }\n      }\n      return evalResponses;\n    }\n  );\n  const ewm = withMetadata(\n    evaluator2,\n    options.dataPointType,\n    options.configSchema\n  );\n  return ewm;\n}\nasync function evaluate(registry, params) {\n  let evaluator2;\n  if (typeof params.evaluator === \"string\") {\n    evaluator2 = await registry.lookupAction(`/evaluator/${params.evaluator}`);\n  } else if (Object.hasOwnProperty.call(params.evaluator, \"info\")) {\n    evaluator2 = await registry.lookupAction(\n      `/evaluator/${params.evaluator.name}`\n    );\n  } else {\n    evaluator2 = params.evaluator;\n  }\n  if (!evaluator2) {\n    throw new Error(\"Unable to utilize the provided evaluator\");\n  }\n  return await evaluator2({\n    dataset: params.dataset,\n    options: params.options,\n    evalRunId: params.evalRunId ?? (0, import_crypto.randomUUID)()\n  });\n}\nconst EvaluatorInfoSchema = import_core.z.object({\n  /** Friendly label for this evaluator */\n  label: import_core.z.string().optional(),\n  metrics: import_core.z.array(import_core.z.string())\n});\nfunction evaluatorRef(options) {\n  return { ...options };\n}\nfunction getBatchedArray(arr, batchSize) {\n  let size;\n  if (!batchSize) {\n    size = 1;\n  } else {\n    size = batchSize;\n  }\n  const batches = [];\n  for (var i = 0; i < arr.length; i += size) {\n    batches.push(\n      arr.slice(i, i + size).map((d) => ({\n        ...d,\n        testCaseId: d.testCaseId ?? (0, import_crypto.randomUUID)()\n      }))\n    );\n  }\n  return batches;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=evaluator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/extract.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar extract_exports = {};\n__export(extract_exports, {\n  extractItems: () => extractItems,\n  extractJson: () => extractJson,\n  parsePartialJson: () => parsePartialJson\n});\nmodule.exports = __toCommonJS(extract_exports);\nvar import_json5 = __toESM(__webpack_require__(/*! json5 */ \"(action-browser)/./node_modules/json5/dist/index.mjs\"));\nvar import_partial_json = __webpack_require__(/*! partial-json */ \"(action-browser)/./node_modules/partial-json/dist/index.js\");\nfunction parsePartialJson(jsonString) {\n  return import_json5.default.parse(JSON.stringify((0, import_partial_json.parse)(jsonString, import_partial_json.Allow.ALL)));\n}\nfunction extractJson(text, throwOnBadJson) {\n  let openingChar;\n  let closingChar;\n  let startPos;\n  let nestingCount = 0;\n  let inString = false;\n  let escapeNext = false;\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i].replace(/\\u00A0/g, \" \");\n    if (escapeNext) {\n      escapeNext = false;\n      continue;\n    }\n    if (char === \"\\\\\") {\n      escapeNext = true;\n      continue;\n    }\n    if (char === '\"') {\n      inString = !inString;\n      continue;\n    }\n    if (inString) {\n      continue;\n    }\n    if (!openingChar && (char === \"{\" || char === \"[\")) {\n      openingChar = char;\n      closingChar = char === \"{\" ? \"}\" : \"]\";\n      startPos = i;\n      nestingCount++;\n    } else if (char === openingChar) {\n      nestingCount++;\n    } else if (char === closingChar) {\n      nestingCount--;\n      if (!nestingCount) {\n        return import_json5.default.parse(text.substring(startPos || 0, i + 1));\n      }\n    }\n  }\n  if (startPos !== void 0 && nestingCount > 0) {\n    try {\n      return parsePartialJson(text.substring(startPos));\n    } catch {\n      if (throwOnBadJson) {\n        throw new Error(`Invalid JSON extracted from model output: ${text}`);\n      }\n      return null;\n    }\n  }\n  if (throwOnBadJson) {\n    throw new Error(`Invalid JSON extracted from model output: ${text}`);\n  }\n  return null;\n}\nfunction extractItems(text, cursor = 0) {\n  const items = [];\n  let currentCursor = cursor;\n  if (cursor === 0) {\n    const arrayStart = text.indexOf(\"[\");\n    if (arrayStart === -1) {\n      return { items: [], cursor: text.length };\n    }\n    currentCursor = arrayStart + 1;\n  }\n  let objectStart = -1;\n  let braceCount = 0;\n  let inString = false;\n  let escapeNext = false;\n  for (let i = currentCursor; i < text.length; i++) {\n    const char = text[i];\n    if (escapeNext) {\n      escapeNext = false;\n      continue;\n    }\n    if (char === \"\\\\\") {\n      escapeNext = true;\n      continue;\n    }\n    if (char === '\"') {\n      inString = !inString;\n      continue;\n    }\n    if (inString) {\n      continue;\n    }\n    if (char === \"{\") {\n      if (braceCount === 0) {\n        objectStart = i;\n      }\n      braceCount++;\n    } else if (char === \"}\") {\n      braceCount--;\n      if (braceCount === 0 && objectStart !== -1) {\n        try {\n          const obj = import_json5.default.parse(text.substring(objectStart, i + 1));\n          items.push(obj);\n          currentCursor = i + 1;\n          objectStart = -1;\n        } catch {\n        }\n      }\n    } else if (char === \"]\" && braceCount === 0) {\n      break;\n    }\n  }\n  return {\n    items,\n    cursor: currentCursor\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=extract.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/array.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar array_exports = {};\n__export(array_exports, {\n  arrayFormatter: () => arrayFormatter\n});\nmodule.exports = __toCommonJS(array_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nconst arrayFormatter = {\n  name: \"array\",\n  config: {\n    contentType: \"application/json\",\n    constrained: true\n  },\n  handler: (schema) => {\n    if (schema && schema.type !== \"array\") {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply an 'array' schema type when using the 'items' parser format.`\n      });\n    }\n    let instructions;\n    if (schema) {\n      instructions = `Output should be a JSON array conforming to the following schema:\n    \n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n    `;\n    }\n    return {\n      parseChunk: (chunk) => {\n        const cursor = chunk.previousChunks?.length ? (0, import_extract.extractItems)(chunk.previousText).cursor : 0;\n        const { items } = (0, import_extract.extractItems)(chunk.accumulatedText, cursor);\n        return items;\n      },\n      parseMessage: (message) => {\n        const { items } = (0, import_extract.extractItems)(message.text, 0);\n        return items;\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2FycmF5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMscUZBQWlCO0FBQzNDLHFCQUFxQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvZm9ybWF0cy9hcnJheS5qcz8yNDFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBhcnJheV9leHBvcnRzID0ge307XG5fX2V4cG9ydChhcnJheV9leHBvcnRzLCB7XG4gIGFycmF5Rm9ybWF0dGVyOiAoKSA9PiBhcnJheUZvcm1hdHRlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhhcnJheV9leHBvcnRzKTtcbnZhciBpbXBvcnRfY29yZSA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmVcIik7XG52YXIgaW1wb3J0X2V4dHJhY3QgPSByZXF1aXJlKFwiLi4vZXh0cmFjdFwiKTtcbmNvbnN0IGFycmF5Rm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImFycmF5XCIsXG4gIGNvbmZpZzoge1xuICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICBjb25zdHJhaW5lZDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiAoc2NoZW1hKSA9PiB7XG4gICAgaWYgKHNjaGVtYSAmJiBzY2hlbWEudHlwZSAhPT0gXCJhcnJheVwiKSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgICBzdGF0dXM6IFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuICAgICAgICBtZXNzYWdlOiBgTXVzdCBzdXBwbHkgYW4gJ2FycmF5JyBzY2hlbWEgdHlwZSB3aGVuIHVzaW5nIHRoZSAnaXRlbXMnIHBhcnNlciBmb3JtYXQuYFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBpbnN0cnVjdGlvbnM7XG4gICAgaWYgKHNjaGVtYSkge1xuICAgICAgaW5zdHJ1Y3Rpb25zID0gYE91dHB1dCBzaG91bGQgYmUgYSBKU09OIGFycmF5IGNvbmZvcm1pbmcgdG8gdGhlIGZvbGxvd2luZyBzY2hlbWE6XG4gICAgXG5cXGBcXGBcXGBcbiR7SlNPTi5zdHJpbmdpZnkoc2NoZW1hKX1cblxcYFxcYFxcYFxuICAgIGA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwYXJzZUNodW5rOiAoY2h1bmspID0+IHtcbiAgICAgICAgY29uc3QgY3Vyc29yID0gY2h1bmsucHJldmlvdXNDaHVua3M/Lmxlbmd0aCA/ICgwLCBpbXBvcnRfZXh0cmFjdC5leHRyYWN0SXRlbXMpKGNodW5rLnByZXZpb3VzVGV4dCkuY3Vyc29yIDogMDtcbiAgICAgICAgY29uc3QgeyBpdGVtcyB9ID0gKDAsIGltcG9ydF9leHRyYWN0LmV4dHJhY3RJdGVtcykoY2h1bmsuYWNjdW11bGF0ZWRUZXh0LCBjdXJzb3IpO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICB9LFxuICAgICAgcGFyc2VNZXNzYWdlOiAobWVzc2FnZSkgPT4ge1xuICAgICAgICBjb25zdCB7IGl0ZW1zIH0gPSAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEl0ZW1zKShtZXNzYWdlLnRleHQsIDApO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICB9LFxuICAgICAgaW5zdHJ1Y3Rpb25zXG4gICAgfTtcbiAgfVxufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBhcnJheUZvcm1hdHRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/enum.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar enum_exports = {};\n__export(enum_exports, {\n  enumFormatter: () => enumFormatter\n});\nmodule.exports = __toCommonJS(enum_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nconst enumFormatter = {\n  name: \"enum\",\n  config: {\n    contentType: \"text/enum\",\n    constrained: true\n  },\n  handler: (schema) => {\n    if (schema && schema.type !== \"string\" && schema.type !== \"enum\") {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply a 'string' or 'enum' schema type when using the enum parser format.`\n      });\n    }\n    let instructions;\n    if (schema?.enum) {\n      instructions = `Output should be ONLY one of the following enum values. Do not output any additional information or add quotes.\n\n${schema.enum.map((v) => v.toString()).join(\"\\n\")}`;\n    }\n    return {\n      parseMessage: (message) => {\n        return message.text.replace(/['\"]/g, \"\").trim();\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=enum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2VudW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUUsZ0RBQWdEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2VudW0uanM/Y2FiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZW51bV9leHBvcnRzID0ge307XG5fX2V4cG9ydChlbnVtX2V4cG9ydHMsIHtcbiAgZW51bUZvcm1hdHRlcjogKCkgPT4gZW51bUZvcm1hdHRlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhlbnVtX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbmNvbnN0IGVudW1Gb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwiZW51bVwiLFxuICBjb25maWc6IHtcbiAgICBjb250ZW50VHlwZTogXCJ0ZXh0L2VudW1cIixcbiAgICBjb25zdHJhaW5lZDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiAoc2NoZW1hKSA9PiB7XG4gICAgaWYgKHNjaGVtYSAmJiBzY2hlbWEudHlwZSAhPT0gXCJzdHJpbmdcIiAmJiBzY2hlbWEudHlwZSAhPT0gXCJlbnVtXCIpIHtcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfY29yZS5HZW5raXRFcnJvcih7XG4gICAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICAgIG1lc3NhZ2U6IGBNdXN0IHN1cHBseSBhICdzdHJpbmcnIG9yICdlbnVtJyBzY2hlbWEgdHlwZSB3aGVuIHVzaW5nIHRoZSBlbnVtIHBhcnNlciBmb3JtYXQuYFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBpbnN0cnVjdGlvbnM7XG4gICAgaWYgKHNjaGVtYT8uZW51bSkge1xuICAgICAgaW5zdHJ1Y3Rpb25zID0gYE91dHB1dCBzaG91bGQgYmUgT05MWSBvbmUgb2YgdGhlIGZvbGxvd2luZyBlbnVtIHZhbHVlcy4gRG8gbm90IG91dHB1dCBhbnkgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBvciBhZGQgcXVvdGVzLlxuXG4ke3NjaGVtYS5lbnVtLm1hcCgodikgPT4gdi50b1N0cmluZygpKS5qb2luKFwiXFxuXCIpfWA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwYXJzZU1lc3NhZ2U6IChtZXNzYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlLnRleHQucmVwbGFjZSgvWydcIl0vZywgXCJcIikudHJpbSgpO1xuICAgICAgfSxcbiAgICAgIGluc3RydWN0aW9uc1xuICAgIH07XG4gIH1cbn07XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZW51bUZvcm1hdHRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnVtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar formats_exports = {};\n__export(formats_exports, {\n  DEFAULT_FORMATS: () => DEFAULT_FORMATS,\n  configureFormats: () => configureFormats,\n  defineFormat: () => defineFormat,\n  injectInstructions: () => injectInstructions,\n  resolveFormat: () => resolveFormat,\n  resolveInstructions: () => resolveInstructions\n});\nmodule.exports = __toCommonJS(formats_exports);\nvar import_array = __webpack_require__(/*! ./array.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js\");\nvar import_enum = __webpack_require__(/*! ./enum.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js\");\nvar import_json = __webpack_require__(/*! ./json.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js\");\nvar import_jsonl = __webpack_require__(/*! ./jsonl.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js\");\nvar import_text = __webpack_require__(/*! ./text.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js\");\nfunction defineFormat(registry, options, handler) {\n  const { name, ...config } = options;\n  const formatter = { config, handler };\n  registry.registerValue(\"format\", name, formatter);\n  return formatter;\n}\nasync function resolveFormat(registry, outputOpts) {\n  if (!outputOpts) return void 0;\n  if ((outputOpts.jsonSchema || outputOpts.schema) && !outputOpts.format) {\n    return registry.lookupValue(\"format\", \"json\");\n  }\n  if (outputOpts.format) {\n    return registry.lookupValue(\"format\", outputOpts.format);\n  }\n  return void 0;\n}\nfunction resolveInstructions(format, schema, instructionsOption) {\n  if (typeof instructionsOption === \"string\") return instructionsOption;\n  if (instructionsOption === false) return void 0;\n  if (!format) return void 0;\n  return format.handler(schema).instructions;\n}\nfunction injectInstructions(messages, instructions) {\n  if (!instructions) return messages;\n  if (messages.find(\n    (m2) => m2.content.find(\n      (p) => p.metadata?.purpose === \"output\" && !p.metadata?.pending\n    )\n  )) {\n    return messages;\n  }\n  const newPart = {\n    text: instructions,\n    metadata: { purpose: \"output\" }\n  };\n  let targetIndex = messages.findIndex((m2) => m2.role === \"system\");\n  if (targetIndex < 0)\n    targetIndex = messages.map((m2) => m2.role).lastIndexOf(\"user\");\n  if (targetIndex < 0) return messages;\n  const m = {\n    ...messages[targetIndex],\n    content: [...messages[targetIndex].content]\n  };\n  const partIndex = m.content.findIndex(\n    (p) => p.metadata?.purpose === \"output\" && p.metadata?.pending\n  );\n  if (partIndex > 0) {\n    m.content.splice(partIndex, 1, newPart);\n  } else {\n    m.content.push(newPart);\n  }\n  const outMessages = [...messages];\n  outMessages.splice(targetIndex, 1, m);\n  return outMessages;\n}\nconst DEFAULT_FORMATS = [\n  import_json.jsonFormatter,\n  import_array.arrayFormatter,\n  import_text.textFormatter,\n  import_enum.enumFormatter,\n  import_jsonl.jsonlFormatter\n];\nfunction configureFormats(registry) {\n  for (const format of DEFAULT_FORMATS) {\n    defineFormat(\n      registry,\n      { name: format.name, ...format.config },\n      format.handler\n    );\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLHNGQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLHNGQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDO0FBQ0EsVUFBVSxrQkFBa0I7QUFDNUIsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHFDQUFxQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQU9MO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvZm9ybWF0cy9pbmRleC5qcz9iYTljIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBmb3JtYXRzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGZvcm1hdHNfZXhwb3J0cywge1xuICBERUZBVUxUX0ZPUk1BVFM6ICgpID0+IERFRkFVTFRfRk9STUFUUyxcbiAgY29uZmlndXJlRm9ybWF0czogKCkgPT4gY29uZmlndXJlRm9ybWF0cyxcbiAgZGVmaW5lRm9ybWF0OiAoKSA9PiBkZWZpbmVGb3JtYXQsXG4gIGluamVjdEluc3RydWN0aW9uczogKCkgPT4gaW5qZWN0SW5zdHJ1Y3Rpb25zLFxuICByZXNvbHZlRm9ybWF0OiAoKSA9PiByZXNvbHZlRm9ybWF0LFxuICByZXNvbHZlSW5zdHJ1Y3Rpb25zOiAoKSA9PiByZXNvbHZlSW5zdHJ1Y3Rpb25zXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGZvcm1hdHNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXkuanNcIik7XG52YXIgaW1wb3J0X2VudW0gPSByZXF1aXJlKFwiLi9lbnVtLmpzXCIpO1xudmFyIGltcG9ydF9qc29uID0gcmVxdWlyZShcIi4vanNvbi5qc1wiKTtcbnZhciBpbXBvcnRfanNvbmwgPSByZXF1aXJlKFwiLi9qc29ubC5qc1wiKTtcbnZhciBpbXBvcnRfdGV4dCA9IHJlcXVpcmUoXCIuL3RleHQuanNcIik7XG5mdW5jdGlvbiBkZWZpbmVGb3JtYXQocmVnaXN0cnksIG9wdGlvbnMsIGhhbmRsZXIpIHtcbiAgY29uc3QgeyBuYW1lLCAuLi5jb25maWcgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGZvcm1hdHRlciA9IHsgY29uZmlnLCBoYW5kbGVyIH07XG4gIHJlZ2lzdHJ5LnJlZ2lzdGVyVmFsdWUoXCJmb3JtYXRcIiwgbmFtZSwgZm9ybWF0dGVyKTtcbiAgcmV0dXJuIGZvcm1hdHRlcjtcbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVGb3JtYXQocmVnaXN0cnksIG91dHB1dE9wdHMpIHtcbiAgaWYgKCFvdXRwdXRPcHRzKSByZXR1cm4gdm9pZCAwO1xuICBpZiAoKG91dHB1dE9wdHMuanNvblNjaGVtYSB8fCBvdXRwdXRPcHRzLnNjaGVtYSkgJiYgIW91dHB1dE9wdHMuZm9ybWF0KSB7XG4gICAgcmV0dXJuIHJlZ2lzdHJ5Lmxvb2t1cFZhbHVlKFwiZm9ybWF0XCIsIFwianNvblwiKTtcbiAgfVxuICBpZiAob3V0cHV0T3B0cy5mb3JtYXQpIHtcbiAgICByZXR1cm4gcmVnaXN0cnkubG9va3VwVmFsdWUoXCJmb3JtYXRcIiwgb3V0cHV0T3B0cy5mb3JtYXQpO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiByZXNvbHZlSW5zdHJ1Y3Rpb25zKGZvcm1hdCwgc2NoZW1hLCBpbnN0cnVjdGlvbnNPcHRpb24pIHtcbiAgaWYgKHR5cGVvZiBpbnN0cnVjdGlvbnNPcHRpb24gPT09IFwic3RyaW5nXCIpIHJldHVybiBpbnN0cnVjdGlvbnNPcHRpb247XG4gIGlmIChpbnN0cnVjdGlvbnNPcHRpb24gPT09IGZhbHNlKSByZXR1cm4gdm9pZCAwO1xuICBpZiAoIWZvcm1hdCkgcmV0dXJuIHZvaWQgMDtcbiAgcmV0dXJuIGZvcm1hdC5oYW5kbGVyKHNjaGVtYSkuaW5zdHJ1Y3Rpb25zO1xufVxuZnVuY3Rpb24gaW5qZWN0SW5zdHJ1Y3Rpb25zKG1lc3NhZ2VzLCBpbnN0cnVjdGlvbnMpIHtcbiAgaWYgKCFpbnN0cnVjdGlvbnMpIHJldHVybiBtZXNzYWdlcztcbiAgaWYgKG1lc3NhZ2VzLmZpbmQoXG4gICAgKG0yKSA9PiBtMi5jb250ZW50LmZpbmQoXG4gICAgICAocCkgPT4gcC5tZXRhZGF0YT8ucHVycG9zZSA9PT0gXCJvdXRwdXRcIiAmJiAhcC5tZXRhZGF0YT8ucGVuZGluZ1xuICAgIClcbiAgKSkge1xuICAgIHJldHVybiBtZXNzYWdlcztcbiAgfVxuICBjb25zdCBuZXdQYXJ0ID0ge1xuICAgIHRleHQ6IGluc3RydWN0aW9ucyxcbiAgICBtZXRhZGF0YTogeyBwdXJwb3NlOiBcIm91dHB1dFwiIH1cbiAgfTtcbiAgbGV0IHRhcmdldEluZGV4ID0gbWVzc2FnZXMuZmluZEluZGV4KChtMikgPT4gbTIucm9sZSA9PT0gXCJzeXN0ZW1cIik7XG4gIGlmICh0YXJnZXRJbmRleCA8IDApXG4gICAgdGFyZ2V0SW5kZXggPSBtZXNzYWdlcy5tYXAoKG0yKSA9PiBtMi5yb2xlKS5sYXN0SW5kZXhPZihcInVzZXJcIik7XG4gIGlmICh0YXJnZXRJbmRleCA8IDApIHJldHVybiBtZXNzYWdlcztcbiAgY29uc3QgbSA9IHtcbiAgICAuLi5tZXNzYWdlc1t0YXJnZXRJbmRleF0sXG4gICAgY29udGVudDogWy4uLm1lc3NhZ2VzW3RhcmdldEluZGV4XS5jb250ZW50XVxuICB9O1xuICBjb25zdCBwYXJ0SW5kZXggPSBtLmNvbnRlbnQuZmluZEluZGV4KFxuICAgIChwKSA9PiBwLm1ldGFkYXRhPy5wdXJwb3NlID09PSBcIm91dHB1dFwiICYmIHAubWV0YWRhdGE/LnBlbmRpbmdcbiAgKTtcbiAgaWYgKHBhcnRJbmRleCA+IDApIHtcbiAgICBtLmNvbnRlbnQuc3BsaWNlKHBhcnRJbmRleCwgMSwgbmV3UGFydCk7XG4gIH0gZWxzZSB7XG4gICAgbS5jb250ZW50LnB1c2gobmV3UGFydCk7XG4gIH1cbiAgY29uc3Qgb3V0TWVzc2FnZXMgPSBbLi4ubWVzc2FnZXNdO1xuICBvdXRNZXNzYWdlcy5zcGxpY2UodGFyZ2V0SW5kZXgsIDEsIG0pO1xuICByZXR1cm4gb3V0TWVzc2FnZXM7XG59XG5jb25zdCBERUZBVUxUX0ZPUk1BVFMgPSBbXG4gIGltcG9ydF9qc29uLmpzb25Gb3JtYXR0ZXIsXG4gIGltcG9ydF9hcnJheS5hcnJheUZvcm1hdHRlcixcbiAgaW1wb3J0X3RleHQudGV4dEZvcm1hdHRlcixcbiAgaW1wb3J0X2VudW0uZW51bUZvcm1hdHRlcixcbiAgaW1wb3J0X2pzb25sLmpzb25sRm9ybWF0dGVyXG5dO1xuZnVuY3Rpb24gY29uZmlndXJlRm9ybWF0cyhyZWdpc3RyeSkge1xuICBmb3IgKGNvbnN0IGZvcm1hdCBvZiBERUZBVUxUX0ZPUk1BVFMpIHtcbiAgICBkZWZpbmVGb3JtYXQoXG4gICAgICByZWdpc3RyeSxcbiAgICAgIHsgbmFtZTogZm9ybWF0Lm5hbWUsIC4uLmZvcm1hdC5jb25maWcgfSxcbiAgICAgIGZvcm1hdC5oYW5kbGVyXG4gICAgKTtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIERFRkFVTFRfRk9STUFUUyxcbiAgY29uZmlndXJlRm9ybWF0cyxcbiAgZGVmaW5lRm9ybWF0LFxuICBpbmplY3RJbnN0cnVjdGlvbnMsXG4gIHJlc29sdmVGb3JtYXQsXG4gIHJlc29sdmVJbnN0cnVjdGlvbnNcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/json.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar json_exports = {};\n__export(json_exports, {\n  jsonFormatter: () => jsonFormatter\n});\nmodule.exports = __toCommonJS(json_exports);\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nconst jsonFormatter = {\n  name: \"json\",\n  config: {\n    format: \"json\",\n    contentType: \"application/json\",\n    constrained: true,\n    defaultInstructions: false\n  },\n  handler: (schema) => {\n    let instructions;\n    if (schema) {\n      instructions = `Output should be in JSON format and conform to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n`;\n    }\n    return {\n      parseChunk: (chunk) => {\n        return (0, import_extract.extractJson)(chunk.accumulatedText);\n      },\n      parseMessage: (message) => {\n        return (0, import_extract.extractJson)(message.text);\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=json.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2pzb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyxnRkFBWTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvZm9ybWF0cy9qc29uLmpzPzQ3MWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGpzb25fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoanNvbl9leHBvcnRzLCB7XG4gIGpzb25Gb3JtYXR0ZXI6ICgpID0+IGpzb25Gb3JtYXR0ZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoanNvbl9leHBvcnRzKTtcbnZhciBpbXBvcnRfZXh0cmFjdCA9IHJlcXVpcmUoXCIuLi9leHRyYWN0XCIpO1xuY29uc3QganNvbkZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJqc29uXCIsXG4gIGNvbmZpZzoge1xuICAgIGZvcm1hdDogXCJqc29uXCIsXG4gICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIGNvbnN0cmFpbmVkOiB0cnVlLFxuICAgIGRlZmF1bHRJbnN0cnVjdGlvbnM6IGZhbHNlXG4gIH0sXG4gIGhhbmRsZXI6IChzY2hlbWEpID0+IHtcbiAgICBsZXQgaW5zdHJ1Y3Rpb25zO1xuICAgIGlmIChzY2hlbWEpIHtcbiAgICAgIGluc3RydWN0aW9ucyA9IGBPdXRwdXQgc2hvdWxkIGJlIGluIEpTT04gZm9ybWF0IGFuZCBjb25mb3JtIHRvIHRoZSBmb2xsb3dpbmcgc2NoZW1hOlxuXG5cXGBcXGBcXGBcbiR7SlNPTi5zdHJpbmdpZnkoc2NoZW1hKX1cblxcYFxcYFxcYFxuYDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlQ2h1bms6IChjaHVuaykgPT4ge1xuICAgICAgICByZXR1cm4gKDAsIGltcG9ydF9leHRyYWN0LmV4dHJhY3RKc29uKShjaHVuay5hY2N1bXVsYXRlZFRleHQpO1xuICAgICAgfSxcbiAgICAgIHBhcnNlTWVzc2FnZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuICgwLCBpbXBvcnRfZXh0cmFjdC5leHRyYWN0SnNvbikobWVzc2FnZS50ZXh0KTtcbiAgICAgIH0sXG4gICAgICBpbnN0cnVjdGlvbnNcbiAgICB9O1xuICB9XG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGpzb25Gb3JtYXR0ZXJcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/jsonl.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar jsonl_exports = {};\n__export(jsonl_exports, {\n  jsonlFormatter: () => jsonlFormatter\n});\nmodule.exports = __toCommonJS(jsonl_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_json5 = __toESM(__webpack_require__(/*! json5 */ \"(action-browser)/./node_modules/json5/dist/index.mjs\"));\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nfunction objectLines(text) {\n  return text.split(\"\\n\").map((line) => line.trim()).filter((line) => line.startsWith(\"{\"));\n}\nconst jsonlFormatter = {\n  name: \"jsonl\",\n  config: {\n    contentType: \"application/jsonl\"\n  },\n  handler: (schema) => {\n    if (schema && (schema.type !== \"array\" || schema.items?.type !== \"object\")) {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply an 'array' schema type containing 'object' items when using the 'jsonl' parser format.`\n      });\n    }\n    let instructions;\n    if (schema?.items) {\n      instructions = `Output should be JSONL format, a sequence of JSON objects (one per line) separated by a newline \\`\\\\n\\` character. Each line should be a JSON object conforming to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema.items)}\n\\`\\`\\`\n    `;\n    }\n    return {\n      parseChunk: (chunk) => {\n        const results = [];\n        const text = chunk.accumulatedText;\n        let startIndex = 0;\n        if (chunk.previousChunks?.length) {\n          const lastNewline = chunk.previousText.lastIndexOf(\"\\n\");\n          if (lastNewline !== -1) {\n            startIndex = lastNewline + 1;\n          }\n        }\n        const lines = text.slice(startIndex).split(\"\\n\");\n        for (const line of lines) {\n          const trimmed = line.trim();\n          if (trimmed.startsWith(\"{\")) {\n            try {\n              const result = import_json5.default.parse(trimmed);\n              if (result) {\n                results.push(result);\n              }\n            } catch (e) {\n              break;\n            }\n          }\n        }\n        return results;\n      },\n      parseMessage: (message) => {\n        const items = objectLines(message.text).map((l) => (0, import_extract.extractJson)(l)).filter((l) => !!l);\n        return items;\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=jsonl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2pzb25sLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFpQjtBQUMzQywyQkFBMkIsbUJBQU8sQ0FBQyxtRUFBTztBQUMxQyxxQkFBcUIsbUJBQU8sQ0FBQyxnRkFBWTtBQUN6QztBQUNBLHdGQUF3RjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2pzb25sLmpzPzA5YmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGpzb25sX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGpzb25sX2V4cG9ydHMsIHtcbiAganNvbmxGb3JtYXR0ZXI6ICgpID0+IGpzb25sRm9ybWF0dGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGpzb25sX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbnZhciBpbXBvcnRfanNvbjUgPSBfX3RvRVNNKHJlcXVpcmUoXCJqc29uNVwiKSk7XG52YXIgaW1wb3J0X2V4dHJhY3QgPSByZXF1aXJlKFwiLi4vZXh0cmFjdFwiKTtcbmZ1bmN0aW9uIG9iamVjdExpbmVzKHRleHQpIHtcbiAgcmV0dXJuIHRleHQuc3BsaXQoXCJcXG5cIikubWFwKChsaW5lKSA9PiBsaW5lLnRyaW0oKSkuZmlsdGVyKChsaW5lKSA9PiBsaW5lLnN0YXJ0c1dpdGgoXCJ7XCIpKTtcbn1cbmNvbnN0IGpzb25sRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImpzb25sXCIsXG4gIGNvbmZpZzoge1xuICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25sXCJcbiAgfSxcbiAgaGFuZGxlcjogKHNjaGVtYSkgPT4ge1xuICAgIGlmIChzY2hlbWEgJiYgKHNjaGVtYS50eXBlICE9PSBcImFycmF5XCIgfHwgc2NoZW1hLml0ZW1zPy50eXBlICE9PSBcIm9iamVjdFwiKSkge1xuICAgICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgICAgc3RhdHVzOiBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgICAgICAgbWVzc2FnZTogYE11c3Qgc3VwcGx5IGFuICdhcnJheScgc2NoZW1hIHR5cGUgY29udGFpbmluZyAnb2JqZWN0JyBpdGVtcyB3aGVuIHVzaW5nIHRoZSAnanNvbmwnIHBhcnNlciBmb3JtYXQuYFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBpbnN0cnVjdGlvbnM7XG4gICAgaWYgKHNjaGVtYT8uaXRlbXMpIHtcbiAgICAgIGluc3RydWN0aW9ucyA9IGBPdXRwdXQgc2hvdWxkIGJlIEpTT05MIGZvcm1hdCwgYSBzZXF1ZW5jZSBvZiBKU09OIG9iamVjdHMgKG9uZSBwZXIgbGluZSkgc2VwYXJhdGVkIGJ5IGEgbmV3bGluZSBcXGBcXFxcblxcYCBjaGFyYWN0ZXIuIEVhY2ggbGluZSBzaG91bGQgYmUgYSBKU09OIG9iamVjdCBjb25mb3JtaW5nIHRvIHRoZSBmb2xsb3dpbmcgc2NoZW1hOlxuXG5cXGBcXGBcXGBcbiR7SlNPTi5zdHJpbmdpZnkoc2NoZW1hLml0ZW1zKX1cblxcYFxcYFxcYFxuICAgIGA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwYXJzZUNodW5rOiAoY2h1bmspID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgICAgICBjb25zdCB0ZXh0ID0gY2h1bmsuYWNjdW11bGF0ZWRUZXh0O1xuICAgICAgICBsZXQgc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIGlmIChjaHVuay5wcmV2aW91c0NodW5rcz8ubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgbGFzdE5ld2xpbmUgPSBjaHVuay5wcmV2aW91c1RleHQubGFzdEluZGV4T2YoXCJcXG5cIik7XG4gICAgICAgICAgaWYgKGxhc3ROZXdsaW5lICE9PSAtMSkge1xuICAgICAgICAgICAgc3RhcnRJbmRleCA9IGxhc3ROZXdsaW5lICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGluZXMgPSB0ZXh0LnNsaWNlKHN0YXJ0SW5kZXgpLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgICAgICBjb25zdCB0cmltbWVkID0gbGluZS50cmltKCk7XG4gICAgICAgICAgaWYgKHRyaW1tZWQuc3RhcnRzV2l0aChcIntcIikpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGltcG9ydF9qc29uNS5kZWZhdWx0LnBhcnNlKHRyaW1tZWQpO1xuICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSxcbiAgICAgIHBhcnNlTWVzc2FnZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBvYmplY3RMaW5lcyhtZXNzYWdlLnRleHQpLm1hcCgobCkgPT4gKDAsIGltcG9ydF9leHRyYWN0LmV4dHJhY3RKc29uKShsKSkuZmlsdGVyKChsKSA9PiAhIWwpO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICB9LFxuICAgICAgaW5zdHJ1Y3Rpb25zXG4gICAgfTtcbiAgfVxufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBqc29ubEZvcm1hdHRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29ubC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/text.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar text_exports = {};\n__export(text_exports, {\n  textFormatter: () => textFormatter\n});\nmodule.exports = __toCommonJS(text_exports);\nconst textFormatter = {\n  name: \"text\",\n  config: {\n    contentType: \"text/plain\"\n  },\n  handler: () => {\n    return {\n      parseChunk: (chunk) => {\n        return chunk.text;\n      },\n      parseMessage: (message) => {\n        return message.text;\n      }\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=text.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL3RleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2Zvcm1hdHMvdGV4dC5qcz8yOGU4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB0ZXh0X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHRleHRfZXhwb3J0cywge1xuICB0ZXh0Rm9ybWF0dGVyOiAoKSA9PiB0ZXh0Rm9ybWF0dGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHRleHRfZXhwb3J0cyk7XG5jb25zdCB0ZXh0Rm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInRleHRcIixcbiAgY29uZmlnOiB7XG4gICAgY29udGVudFR5cGU6IFwidGV4dC9wbGFpblwiXG4gIH0sXG4gIGhhbmRsZXI6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFyc2VDaHVuazogKGNodW5rKSA9PiB7XG4gICAgICAgIHJldHVybiBjaHVuay50ZXh0O1xuICAgICAgfSxcbiAgICAgIHBhcnNlTWVzc2FnZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UudGV4dDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRleHRGb3JtYXR0ZXJcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar generate_exports = {};\n__export(generate_exports, {\n  GenerateResponse: () => import_response.GenerateResponse,\n  GenerateResponseChunk: () => import_chunk.GenerateResponseChunk,\n  GenerationBlockedError: () => GenerationBlockedError,\n  GenerationResponseError: () => GenerationResponseError,\n  generate: () => generate,\n  generateOperation: () => generateOperation,\n  generateStream: () => generateStream,\n  tagAsPreamble: () => tagAsPreamble,\n  toGenerateActionOptions: () => toGenerateActionOptions,\n  toGenerateRequest: () => toGenerateRequest\n});\nmodule.exports = __toCommonJS(generate_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_registry = __webpack_require__(/*! @genkit-ai/core/registry */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_formats = __webpack_require__(/*! ./formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nvar import_action = __webpack_require__(/*! ./generate/action.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\");\nvar import_chunk = __webpack_require__(/*! ./generate/chunk.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js\");\nvar import_response = __webpack_require__(/*! ./generate/response.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_resource = __webpack_require__(/*! ./resource.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/resource.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nasync function toGenerateRequest(registry, options) {\n  const messages = [];\n  if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: import_message.Message.parseContent(options.system)\n    });\n  }\n  if (options.messages) {\n    messages.push(...options.messages.map((m) => import_message.Message.parseData(m)));\n  }\n  if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: import_message.Message.parseContent(options.prompt)\n    });\n  }\n  if (messages.length === 0) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"at least one message is required in generate request\"\n    });\n  }\n  if (options.resume && !(messages.at(-1)?.role === \"model\" && messages.at(-1)?.content.find((p) => !!p.toolRequest))) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Last message must be a 'model' role with at least one tool request to 'resume' generation.`,\n      detail: messages.at(-1)\n    });\n  }\n  let tools;\n  if (options.tools) {\n    tools = await (0, import_tool.resolveTools)(registry, options.tools);\n  }\n  let resources;\n  if (options.resources) {\n    resources = await (0, import_resource.resolveResources)(registry, options.resources);\n  }\n  const resolvedSchema = (0, import_schema.toJsonSchema)({\n    schema: options.output?.schema,\n    jsonSchema: options.output?.jsonSchema\n  });\n  const resolvedFormat = await (0, import_formats.resolveFormat)(registry, options.output);\n  const instructions = (0, import_formats.resolveInstructions)(\n    resolvedFormat,\n    resolvedSchema,\n    options?.output?.instructions\n  );\n  const out = {\n    messages: (0, import_action.shouldInjectFormatInstructions)(\n      resolvedFormat?.config,\n      options.output\n    ) ? (0, import_formats.injectInstructions)(messages, instructions) : messages,\n    config: options.config,\n    docs: options.docs,\n    tools: tools?.map(import_tool.toToolDefinition) || [],\n    resources: resources?.map((a) => a.__action) || [],\n    output: {\n      ...resolvedFormat?.config || {},\n      ...options.output,\n      schema: resolvedSchema\n    }\n  };\n  if (!out?.output?.schema) delete out?.output?.schema;\n  return out;\n}\nclass GenerationResponseError extends import_core.GenkitError {\n  detail;\n  constructor(response, message, status, detail) {\n    super({\n      status: status || \"FAILED_PRECONDITION\",\n      message\n    });\n    this.detail = { response, ...detail };\n  }\n}\nasync function toolsToActionRefs(registry, toolOpt) {\n  if (!toolOpt) return;\n  const tools = [];\n  for (const t of toolOpt) {\n    if (typeof t === \"string\") {\n      const names = await resolveFullToolNames(registry, t);\n      tools.push(...names);\n    } else if ((0, import_core.isAction)(t) || (0, import_tool.isDynamicTool)(t)) {\n      tools.push(`/${t.__action.metadata?.type}/${t.__action.name}`);\n    } else if ((0, import_prompt.isExecutablePrompt)(t)) {\n      const promptToolAction = await t.asTool();\n      tools.push(`/prompt/${promptToolAction.__action.name}`);\n    } else {\n      throw new Error(`Unable to determine type of tool: ${JSON.stringify(t)}`);\n    }\n  }\n  return tools;\n}\nasync function resourcesToActionRefs(registry, resOpt) {\n  if (!resOpt) return;\n  const resources = [];\n  for (const r of resOpt) {\n    if (typeof r === \"string\") {\n      const names = await resolveFullResourceNames(registry, r);\n      resources.push(...names);\n    } else if ((0, import_core.isAction)(r)) {\n      resources.push(`/resource/${r.__action.name}`);\n    } else {\n      throw new Error(`Unable to resolve resource: ${JSON.stringify(r)}`);\n    }\n  }\n  return resources;\n}\nfunction messagesFromOptions(options) {\n  const messages = [];\n  if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: import_message.Message.parseContent(options.system)\n    });\n  }\n  if (options.messages) {\n    messages.push(...options.messages);\n  }\n  if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: import_message.Message.parseContent(options.prompt)\n    });\n  }\n  if (messages.length === 0) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"at least one message is required in generate request\"\n    });\n  }\n  return messages;\n}\nclass GenerationBlockedError extends GenerationResponseError {\n}\nasync function generate(registry, options) {\n  const resolvedOptions = {\n    ...await Promise.resolve(options)\n  };\n  const resolvedFormat = await (0, import_formats.resolveFormat)(registry, resolvedOptions.output);\n  registry = maybeRegisterDynamicTools(registry, resolvedOptions);\n  registry = maybeRegisterDynamicResources(registry, resolvedOptions);\n  const params = await toGenerateActionOptions(registry, resolvedOptions);\n  const tools = await toolsToActionRefs(registry, resolvedOptions.tools);\n  const resources = await resourcesToActionRefs(\n    registry,\n    resolvedOptions.resources\n  );\n  const streamingCallback = stripNoop(\n    resolvedOptions.onChunk ?? resolvedOptions.streamingCallback\n  );\n  const response = await (0, import_core.runWithContext)(\n    resolvedOptions.context,\n    () => (0, import_action.generateHelper)(registry, {\n      rawRequest: params,\n      middleware: resolvedOptions.use,\n      abortSignal: resolvedOptions.abortSignal,\n      streamingCallback\n    })\n  );\n  const request = await toGenerateRequest(registry, {\n    ...resolvedOptions,\n    tools,\n    resources\n  });\n  return new import_response.GenerateResponse(response, {\n    request: response.request ?? request,\n    parser: resolvedFormat?.handler(request.output?.schema).parseMessage\n  });\n}\nasync function generateOperation(registry, options) {\n  (0, import_core.assertUnstable)(registry, \"beta\", \"generateOperation is a beta feature.\");\n  options = await options;\n  const resolvedModel = await (0, import_model.resolveModel)(registry, options.model);\n  if (!resolvedModel.modelAction.__action.metadata?.model.supports?.longRunning) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Model '${resolvedModel.modelAction.__action.name}' does not support long running operations.`\n    });\n  }\n  const { operation } = await generate(registry, options);\n  if (!operation) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Model '${resolvedModel.modelAction.__action.name}' did not return an operation.`\n    });\n  }\n  return operation;\n}\nfunction maybeRegisterDynamicTools(registry, options) {\n  let hasDynamicTools = false;\n  options?.tools?.forEach((t) => {\n    if ((0, import_tool.isDynamicTool)(t)) {\n      if (!hasDynamicTools) {\n        hasDynamicTools = true;\n        registry = import_registry.Registry.withParent(registry);\n      }\n      registry.registerAction(\"tool\", t);\n    }\n  });\n  return registry;\n}\nfunction maybeRegisterDynamicResources(registry, options) {\n  let hasDynamicResources = false;\n  options?.resources?.forEach((r) => {\n    if ((0, import_resource.isDynamicResourceAction)(r)) {\n      if (!hasDynamicResources) {\n        hasDynamicResources = true;\n        registry = import_registry.Registry.withParent(registry);\n      }\n      registry.registerAction(\"resource\", r);\n    }\n  });\n  return registry;\n}\nasync function toGenerateActionOptions(registry, options) {\n  const resolvedModel = await (0, import_model.resolveModel)(registry, options.model);\n  const tools = await toolsToActionRefs(registry, options.tools);\n  const resources = await resourcesToActionRefs(registry, options.resources);\n  const messages = messagesFromOptions(options);\n  const resolvedSchema = (0, import_schema.toJsonSchema)({\n    schema: options.output?.schema,\n    jsonSchema: options.output?.jsonSchema\n  });\n  if ((options.output?.schema || options.output?.jsonSchema) && !options.output?.format) {\n    options.output.format = \"json\";\n  }\n  const params = {\n    model: resolvedModel.modelAction.__action.name,\n    docs: options.docs,\n    messages,\n    tools,\n    resources,\n    toolChoice: options.toolChoice,\n    config: {\n      version: resolvedModel.version,\n      ...stripUndefinedOptions(resolvedModel.config),\n      ...stripUndefinedOptions(options.config)\n    },\n    output: options.output && {\n      ...options.output,\n      format: options.output.format,\n      jsonSchema: resolvedSchema\n    },\n    // coerce reply and restart into arrays for the action schema\n    resume: options.resume && {\n      respond: [options.resume.respond || []].flat(),\n      restart: [options.resume.restart || []].flat(),\n      metadata: options.resume.metadata\n    },\n    returnToolRequests: options.returnToolRequests,\n    maxTurns: options.maxTurns,\n    stepName: options.stepName\n  };\n  if (Object.keys(params.config).length === 0 && !options.config) {\n    delete params.config;\n  }\n  return params;\n}\nfunction stripNoop(callback) {\n  if (callback === import_core.sentinelNoopStreamingCallback) {\n    return void 0;\n  }\n  return callback;\n}\nfunction stripUndefinedOptions(input) {\n  if (!input) return input;\n  const copy = { ...input };\n  Object.keys(input).forEach((key) => {\n    if (copy[key] === void 0) {\n      delete copy[key];\n    }\n  });\n  return copy;\n}\nasync function resolveFullToolNames(registry, name) {\n  let names;\n  const parts = name.split(\":\");\n  if (parts.length > 1) {\n    names = await registry.resolveActionNames(\n      `/dynamic-action-provider/${name}`\n    );\n    if (names.length) {\n      return names;\n    }\n  }\n  if (await registry.lookupAction(`/tool/${name}`)) {\n    return [`/tool/${name}`];\n  }\n  if (await registry.lookupAction(`/prompt/${name}`)) {\n    return [`/prompt/${name}`];\n  }\n  throw new Error(`Unable to resolve tool: ${name}`);\n}\nasync function resolveFullResourceNames(registry, name) {\n  let names;\n  const parts = name.split(\":\");\n  if (parts.length > 1) {\n    names = await registry.resolveActionNames(\n      `/dynamic-action-provider/${name}`\n    );\n    if (names.length) {\n      return names;\n    }\n  }\n  if (await registry.lookupAction(`/resource/${name}`)) {\n    return [`/resource/${name}`];\n  }\n  throw new Error(`Unable to resolve resource: ${name}`);\n}\nfunction generateStream(registry, options) {\n  const channel = new import_async.Channel();\n  const generated = Promise.resolve(options).then(\n    (resolvedOptions) => generate(registry, {\n      ...resolvedOptions,\n      onChunk: (chunk) => channel.send(chunk)\n    })\n  );\n  generated.then(\n    () => channel.close(),\n    (err) => channel.error(err)\n  );\n  return {\n    response: generated,\n    stream: channel\n  };\n}\nfunction tagAsPreamble(msgs) {\n  if (!msgs) {\n    return void 0;\n  }\n  return msgs.map((m) => ({\n    ...m,\n    metadata: {\n      ...m.metadata,\n      preamble: true\n    }\n  }));\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=generate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/action.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar action_exports = {};\n__export(action_exports, {\n  defineGenerateAction: () => defineGenerateAction,\n  generateHelper: () => generateHelper,\n  inferRoleFromParts: () => inferRoleFromParts,\n  shouldInjectFormatInstructions: () => shouldInjectFormatInstructions\n});\nmodule.exports = __toCommonJS(action_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_formats = __webpack_require__(/*! ../formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nvar import_generate = __webpack_require__(/*! ../generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_chunk = __webpack_require__(/*! ../generate/chunk.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js\");\nvar import_model = __webpack_require__(/*! ../model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_resource = __webpack_require__(/*! ../resource.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/resource.js\");\nvar import_tool = __webpack_require__(/*! ../tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nvar import_resolve_tool_requests = __webpack_require__(/*! ./resolve-tool-requests.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js\");\nfunction defineGenerateAction(registry) {\n  return (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"util\",\n      name: \"generate\",\n      inputSchema: import_model.GenerateActionOptionsSchema,\n      outputSchema: import_model.GenerateResponseSchema,\n      streamSchema: import_model.GenerateResponseChunkSchema\n    },\n    async (request, { streamingRequested, sendChunk }) => {\n      const generateFn = (sendChunk2) => generate(registry, {\n        rawRequest: request,\n        currentTurn: 0,\n        messageIndex: 0,\n        // Generate util action does not support middleware. Maybe when we add named/registered middleware....\n        middleware: [],\n        streamingCallback: sendChunk2\n      });\n      return streamingRequested ? generateFn(\n        (c) => sendChunk(c.toJSON ? c.toJSON() : c)\n      ) : generateFn();\n    }\n  );\n}\nasync function generateHelper(registry, options) {\n  const currentTurn = options.currentTurn ?? 0;\n  const messageIndex = options.messageIndex ?? 0;\n  return await (0, import_tracing.runInNewSpan)(\n    registry,\n    {\n      metadata: {\n        name: options.rawRequest.stepName || \"generate\"\n      },\n      labels: {\n        [import_tracing.SPAN_TYPE_ATTR]: \"util\"\n      }\n    },\n    async (metadata) => {\n      metadata.name = options.rawRequest.stepName || \"generate\";\n      metadata.input = options.rawRequest;\n      const output = await generate(registry, {\n        rawRequest: options.rawRequest,\n        middleware: options.middleware,\n        currentTurn,\n        messageIndex,\n        abortSignal: options.abortSignal,\n        streamingCallback: options.streamingCallback\n      });\n      metadata.output = JSON.stringify(output);\n      return output;\n    }\n  );\n}\nasync function resolveParameters(registry, request) {\n  const [model, tools, resources, format] = await Promise.all([\n    (0, import_model.resolveModel)(registry, request.model, { warnDeprecated: true }).then(\n      (r) => r.modelAction\n    ),\n    (0, import_tool.resolveTools)(registry, request.tools),\n    (0, import_resource.resolveResources)(registry, request.resources),\n    (0, import_formats.resolveFormat)(registry, request.output)\n  ]);\n  return { model, tools, resources, format };\n}\nfunction applyFormat(rawRequest, resolvedFormat) {\n  const outRequest = { ...rawRequest };\n  if (rawRequest.output?.jsonSchema && !rawRequest.output?.format) {\n    outRequest.output = { ...rawRequest.output, format: \"json\" };\n  }\n  const instructions = (0, import_formats.resolveInstructions)(\n    resolvedFormat,\n    outRequest.output?.jsonSchema,\n    outRequest?.output?.instructions\n  );\n  if (resolvedFormat) {\n    if (shouldInjectFormatInstructions(resolvedFormat.config, rawRequest?.output)) {\n      outRequest.messages = (0, import_formats.injectInstructions)(\n        outRequest.messages,\n        instructions\n      );\n    }\n    outRequest.output = {\n      // use output config from the format\n      ...resolvedFormat.config,\n      // if anything is set explicitly, use that\n      ...outRequest.output\n    };\n  }\n  return outRequest;\n}\nfunction shouldInjectFormatInstructions(formatConfig, rawRequestConfig) {\n  return formatConfig?.defaultInstructions !== false || rawRequestConfig?.instructions;\n}\nfunction applyTransferPreamble(rawRequest, transferPreamble) {\n  if (!transferPreamble) {\n    return rawRequest;\n  }\n  return (0, import_core.stripUndefinedProps)({\n    ...rawRequest,\n    messages: [\n      ...(0, import_generate.tagAsPreamble)(transferPreamble.messages),\n      ...rawRequest.messages.filter((m) => !m.metadata?.preamble)\n    ],\n    toolChoice: transferPreamble.toolChoice || rawRequest.toolChoice,\n    tools: transferPreamble.tools || rawRequest.tools,\n    config: transferPreamble.config || rawRequest.config\n  });\n}\nasync function generate(registry, {\n  rawRequest,\n  middleware,\n  currentTurn,\n  messageIndex,\n  abortSignal,\n  streamingCallback\n}) {\n  const { model, tools, resources, format } = await resolveParameters(\n    registry,\n    rawRequest\n  );\n  rawRequest = applyFormat(rawRequest, format);\n  rawRequest = await applyResources(registry, rawRequest, resources);\n  await (0, import_resolve_tool_requests.assertValidToolNames)(tools);\n  const {\n    revisedRequest,\n    interruptedResponse,\n    toolMessage: resumedToolMessage\n  } = await (0, import_resolve_tool_requests.resolveResumeOption)(registry, rawRequest);\n  if (interruptedResponse) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: \"One or more tools triggered an interrupt during a restarted execution.\",\n      detail: { message: interruptedResponse.message }\n    });\n  }\n  rawRequest = revisedRequest;\n  const request = await actionToGenerateRequest(\n    rawRequest,\n    tools,\n    format,\n    model\n  );\n  const previousChunks = [];\n  let chunkRole = \"model\";\n  const makeChunk = (role, chunk) => {\n    if (role !== chunkRole && previousChunks.length) messageIndex++;\n    chunkRole = role;\n    const prevToSend = [...previousChunks];\n    previousChunks.push(chunk);\n    return new import_chunk.GenerateResponseChunk(chunk, {\n      index: messageIndex,\n      role,\n      previousChunks: prevToSend,\n      parser: format?.handler(request.output?.schema).parseChunk\n    });\n  };\n  if (resumedToolMessage && streamingCallback) {\n    streamingCallback(makeChunk(\"tool\", resumedToolMessage));\n  }\n  var response;\n  const dispatch = async (index, req) => {\n    if (!middleware || index === middleware.length) {\n      return await model(req, {\n        abortSignal,\n        onChunk: streamingCallback && ((chunk) => streamingCallback && streamingCallback(makeChunk(\"model\", chunk)))\n      });\n    }\n    const currentMiddleware = middleware[index];\n    return currentMiddleware(\n      req,\n      async (modifiedReq) => dispatch(index + 1, modifiedReq || req)\n    );\n  };\n  const modelResponse = await dispatch(0, request);\n  if (model.__action.actionType === \"background-model\") {\n    response = new import_generate.GenerateResponse(\n      { operation: modelResponse },\n      {\n        request,\n        parser: format?.handler(request.output?.schema).parseMessage\n      }\n    );\n  } else {\n    response = new import_generate.GenerateResponse(modelResponse, {\n      request,\n      parser: format?.handler(request.output?.schema).parseMessage\n    });\n  }\n  if (model.__action.actionType === \"background-model\") {\n    return response.toJSON();\n  }\n  response.assertValid();\n  const generatedMessage = response.message;\n  const toolRequests = generatedMessage.content.filter(\n    (part) => !!part.toolRequest\n  );\n  if (rawRequest.returnToolRequests || toolRequests.length === 0) {\n    if (toolRequests.length === 0) response.assertValidSchema(request);\n    return response.toJSON();\n  }\n  const maxIterations = rawRequest.maxTurns ?? 5;\n  if (currentTurn + 1 > maxIterations) {\n    throw new import_generate.GenerationResponseError(\n      response,\n      `Exceeded maximum tool call iterations (${maxIterations})`,\n      \"ABORTED\",\n      { request }\n    );\n  }\n  const { revisedModelMessage, toolMessage, transferPreamble } = await (0, import_resolve_tool_requests.resolveToolRequests)(registry, rawRequest, generatedMessage);\n  if (revisedModelMessage) {\n    return {\n      ...response.toJSON(),\n      finishReason: \"interrupted\",\n      finishMessage: \"One or more tool calls resulted in interrupts.\",\n      message: revisedModelMessage\n    };\n  }\n  streamingCallback?.(\n    makeChunk(\"tool\", {\n      content: toolMessage.content\n    })\n  );\n  let nextRequest = {\n    ...rawRequest,\n    messages: [...rawRequest.messages, generatedMessage.toJSON(), toolMessage]\n  };\n  nextRequest = applyTransferPreamble(nextRequest, transferPreamble);\n  return await generateHelper(registry, {\n    rawRequest: nextRequest,\n    middleware,\n    currentTurn: currentTurn + 1,\n    messageIndex: messageIndex + 1,\n    streamingCallback,\n    abortSignal\n  });\n}\nasync function actionToGenerateRequest(options, resolvedTools, resolvedFormat, model) {\n  const modelInfo = model.__action.metadata?.model;\n  if ((options.tools?.length ?? 0) > 0 && modelInfo?.supports && !modelInfo?.supports?.tools) {\n    import_logging.logger.warn(\n      `The model '${model.__action.name}' does not support tools (you set: ${options.tools?.length} tools). The model may not behave the way you expect.`\n    );\n  }\n  if (options.toolChoice && modelInfo?.supports && !modelInfo?.supports?.toolChoice) {\n    import_logging.logger.warn(\n      `The model '${model.__action.name}' does not support the 'toolChoice' option (you set: ${options.toolChoice}). The model may not behave the way you expect.`\n    );\n  }\n  const out = {\n    messages: options.messages,\n    config: options.config,\n    docs: options.docs,\n    tools: resolvedTools?.map(import_tool.toToolDefinition) || [],\n    output: (0, import_core.stripUndefinedProps)({\n      constrained: options.output?.constrained,\n      contentType: options.output?.contentType,\n      format: options.output?.format,\n      schema: options.output?.jsonSchema\n    })\n  };\n  if (options.toolChoice) {\n    out.toolChoice = options.toolChoice;\n  }\n  if (out.output && !out.output.schema) delete out.output.schema;\n  return out;\n}\nfunction inferRoleFromParts(parts) {\n  const uniqueRoles = /* @__PURE__ */ new Set();\n  for (const part of parts) {\n    const role = getRoleFromPart(part);\n    uniqueRoles.add(role);\n    if (uniqueRoles.size > 1) {\n      throw new Error(\"Contents contain mixed roles\");\n    }\n  }\n  return Array.from(uniqueRoles)[0];\n}\nfunction getRoleFromPart(part) {\n  if (part.toolRequest !== void 0) return \"model\";\n  if (part.toolResponse !== void 0) return \"tool\";\n  if (part.text !== void 0) return \"user\";\n  if (part.media !== void 0) return \"user\";\n  if (part.data !== void 0) return \"user\";\n  throw new Error(\"No recognized fields in content\");\n}\nasync function applyResources(registry, rawRequest, resources) {\n  if (!rawRequest.messages.find((m) => !!m.content.find((c) => c.resource))) {\n    return rawRequest;\n  }\n  const updatedMessages = [];\n  for (const m of rawRequest.messages) {\n    if (!m.content.find((c) => c.resource)) {\n      updatedMessages.push(m);\n      continue;\n    }\n    const updatedContent = [];\n    for (const p of m.content) {\n      if (!p.resource) {\n        updatedContent.push(p);\n        continue;\n      }\n      const resource = await (0, import_resource.findMatchingResource)(\n        registry,\n        resources,\n        p.resource\n      );\n      if (!resource) {\n        throw new import_core.GenkitError({\n          status: \"NOT_FOUND\",\n          message: `failed to find matching resource for ${p.resource.uri}`\n        });\n      }\n      const resourceParts = await resource(p.resource);\n      updatedContent.push(...resourceParts.content);\n    }\n    updatedMessages.push({\n      ...m,\n      content: updatedContent\n    });\n  }\n  return {\n    ...rawRequest,\n    messages: updatedMessages\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9nZW5lcmF0ZS9hY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDM0MscUJBQXFCLG1CQUFPLENBQUMsK0ZBQXlCO0FBQ3RELHFCQUFxQixtQkFBTyxDQUFDLCtGQUF5QjtBQUN0RCxxQkFBcUIsbUJBQU8sQ0FBQywrRkFBcUI7QUFDbEQsc0JBQXNCLG1CQUFPLENBQUMscUZBQWdCO0FBQzlDLG1CQUFtQixtQkFBTyxDQUFDLGlHQUFzQjtBQUNqRCxtQkFBbUIsbUJBQU8sQ0FBQywrRUFBYTtBQUN4QyxzQkFBc0IsbUJBQU8sQ0FBQyxxRkFBZ0I7QUFDOUMsa0JBQWtCLG1CQUFPLENBQUMsNkVBQVk7QUFDdEMsbUNBQW1DLG1CQUFPLENBQUMsdUhBQTRCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxzQkFBc0IsK0JBQStCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELHNCQUFzQjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsVUFBVSxrQ0FBa0M7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDBCQUEwQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGNBQWM7QUFDOUQ7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFVBQVUscURBQXFEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0IscUNBQXFDLHVCQUF1QjtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0IsdURBQXVELG1CQUFtQjtBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxlQUFlO0FBQzFFLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FLTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2dlbmVyYXRlL2FjdGlvbi5qcz80NWZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBhY3Rpb25fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoYWN0aW9uX2V4cG9ydHMsIHtcbiAgZGVmaW5lR2VuZXJhdGVBY3Rpb246ICgpID0+IGRlZmluZUdlbmVyYXRlQWN0aW9uLFxuICBnZW5lcmF0ZUhlbHBlcjogKCkgPT4gZ2VuZXJhdGVIZWxwZXIsXG4gIGluZmVyUm9sZUZyb21QYXJ0czogKCkgPT4gaW5mZXJSb2xlRnJvbVBhcnRzLFxuICBzaG91bGRJbmplY3RGb3JtYXRJbnN0cnVjdGlvbnM6ICgpID0+IHNob3VsZEluamVjdEZvcm1hdEluc3RydWN0aW9uc1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhhY3Rpb25fZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xudmFyIGltcG9ydF9sb2dnaW5nID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZS9sb2dnaW5nXCIpO1xudmFyIGltcG9ydF90cmFjaW5nID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZS90cmFjaW5nXCIpO1xudmFyIGltcG9ydF9mb3JtYXRzID0gcmVxdWlyZShcIi4uL2Zvcm1hdHMvaW5kZXguanNcIik7XG52YXIgaW1wb3J0X2dlbmVyYXRlID0gcmVxdWlyZShcIi4uL2dlbmVyYXRlLmpzXCIpO1xudmFyIGltcG9ydF9jaHVuayA9IHJlcXVpcmUoXCIuLi9nZW5lcmF0ZS9jaHVuay5qc1wiKTtcbnZhciBpbXBvcnRfbW9kZWwgPSByZXF1aXJlKFwiLi4vbW9kZWwuanNcIik7XG52YXIgaW1wb3J0X3Jlc291cmNlID0gcmVxdWlyZShcIi4uL3Jlc291cmNlLmpzXCIpO1xudmFyIGltcG9ydF90b29sID0gcmVxdWlyZShcIi4uL3Rvb2wuanNcIik7XG52YXIgaW1wb3J0X3Jlc29sdmVfdG9vbF9yZXF1ZXN0cyA9IHJlcXVpcmUoXCIuL3Jlc29sdmUtdG9vbC1yZXF1ZXN0cy5qc1wiKTtcbmZ1bmN0aW9uIGRlZmluZUdlbmVyYXRlQWN0aW9uKHJlZ2lzdHJ5KSB7XG4gIHJldHVybiAoMCwgaW1wb3J0X2NvcmUuZGVmaW5lQWN0aW9uKShcbiAgICByZWdpc3RyeSxcbiAgICB7XG4gICAgICBhY3Rpb25UeXBlOiBcInV0aWxcIixcbiAgICAgIG5hbWU6IFwiZ2VuZXJhdGVcIixcbiAgICAgIGlucHV0U2NoZW1hOiBpbXBvcnRfbW9kZWwuR2VuZXJhdGVBY3Rpb25PcHRpb25zU2NoZW1hLFxuICAgICAgb3V0cHV0U2NoZW1hOiBpbXBvcnRfbW9kZWwuR2VuZXJhdGVSZXNwb25zZVNjaGVtYSxcbiAgICAgIHN0cmVhbVNjaGVtYTogaW1wb3J0X21vZGVsLkdlbmVyYXRlUmVzcG9uc2VDaHVua1NjaGVtYVxuICAgIH0sXG4gICAgYXN5bmMgKHJlcXVlc3QsIHsgc3RyZWFtaW5nUmVxdWVzdGVkLCBzZW5kQ2h1bmsgfSkgPT4ge1xuICAgICAgY29uc3QgZ2VuZXJhdGVGbiA9IChzZW5kQ2h1bmsyKSA9PiBnZW5lcmF0ZShyZWdpc3RyeSwge1xuICAgICAgICByYXdSZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBjdXJyZW50VHVybjogMCxcbiAgICAgICAgbWVzc2FnZUluZGV4OiAwLFxuICAgICAgICAvLyBHZW5lcmF0ZSB1dGlsIGFjdGlvbiBkb2VzIG5vdCBzdXBwb3J0IG1pZGRsZXdhcmUuIE1heWJlIHdoZW4gd2UgYWRkIG5hbWVkL3JlZ2lzdGVyZWQgbWlkZGxld2FyZS4uLi5cbiAgICAgICAgbWlkZGxld2FyZTogW10sXG4gICAgICAgIHN0cmVhbWluZ0NhbGxiYWNrOiBzZW5kQ2h1bmsyXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdHJlYW1pbmdSZXF1ZXN0ZWQgPyBnZW5lcmF0ZUZuKFxuICAgICAgICAoYykgPT4gc2VuZENodW5rKGMudG9KU09OID8gYy50b0pTT04oKSA6IGMpXG4gICAgICApIDogZ2VuZXJhdGVGbigpO1xuICAgIH1cbiAgKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlSGVscGVyKHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGNvbnN0IGN1cnJlbnRUdXJuID0gb3B0aW9ucy5jdXJyZW50VHVybiA/PyAwO1xuICBjb25zdCBtZXNzYWdlSW5kZXggPSBvcHRpb25zLm1lc3NhZ2VJbmRleCA/PyAwO1xuICByZXR1cm4gYXdhaXQgKDAsIGltcG9ydF90cmFjaW5nLnJ1bkluTmV3U3BhbikoXG4gICAgcmVnaXN0cnksXG4gICAge1xuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgbmFtZTogb3B0aW9ucy5yYXdSZXF1ZXN0LnN0ZXBOYW1lIHx8IFwiZ2VuZXJhdGVcIlxuICAgICAgfSxcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBbaW1wb3J0X3RyYWNpbmcuU1BBTl9UWVBFX0FUVFJdOiBcInV0aWxcIlxuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgKG1ldGFkYXRhKSA9PiB7XG4gICAgICBtZXRhZGF0YS5uYW1lID0gb3B0aW9ucy5yYXdSZXF1ZXN0LnN0ZXBOYW1lIHx8IFwiZ2VuZXJhdGVcIjtcbiAgICAgIG1ldGFkYXRhLmlucHV0ID0gb3B0aW9ucy5yYXdSZXF1ZXN0O1xuICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgZ2VuZXJhdGUocmVnaXN0cnksIHtcbiAgICAgICAgcmF3UmVxdWVzdDogb3B0aW9ucy5yYXdSZXF1ZXN0LFxuICAgICAgICBtaWRkbGV3YXJlOiBvcHRpb25zLm1pZGRsZXdhcmUsXG4gICAgICAgIGN1cnJlbnRUdXJuLFxuICAgICAgICBtZXNzYWdlSW5kZXgsXG4gICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICBzdHJlYW1pbmdDYWxsYmFjazogb3B0aW9ucy5zdHJlYW1pbmdDYWxsYmFja1xuICAgICAgfSk7XG4gICAgICBtZXRhZGF0YS5vdXRwdXQgPSBKU09OLnN0cmluZ2lmeShvdXRwdXQpO1xuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG4gICk7XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlUGFyYW1ldGVycyhyZWdpc3RyeSwgcmVxdWVzdCkge1xuICBjb25zdCBbbW9kZWwsIHRvb2xzLCByZXNvdXJjZXMsIGZvcm1hdF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgKDAsIGltcG9ydF9tb2RlbC5yZXNvbHZlTW9kZWwpKHJlZ2lzdHJ5LCByZXF1ZXN0Lm1vZGVsLCB7IHdhcm5EZXByZWNhdGVkOiB0cnVlIH0pLnRoZW4oXG4gICAgICAocikgPT4gci5tb2RlbEFjdGlvblxuICAgICksXG4gICAgKDAsIGltcG9ydF90b29sLnJlc29sdmVUb29scykocmVnaXN0cnksIHJlcXVlc3QudG9vbHMpLFxuICAgICgwLCBpbXBvcnRfcmVzb3VyY2UucmVzb2x2ZVJlc291cmNlcykocmVnaXN0cnksIHJlcXVlc3QucmVzb3VyY2VzKSxcbiAgICAoMCwgaW1wb3J0X2Zvcm1hdHMucmVzb2x2ZUZvcm1hdCkocmVnaXN0cnksIHJlcXVlc3Qub3V0cHV0KVxuICBdKTtcbiAgcmV0dXJuIHsgbW9kZWwsIHRvb2xzLCByZXNvdXJjZXMsIGZvcm1hdCB9O1xufVxuZnVuY3Rpb24gYXBwbHlGb3JtYXQocmF3UmVxdWVzdCwgcmVzb2x2ZWRGb3JtYXQpIHtcbiAgY29uc3Qgb3V0UmVxdWVzdCA9IHsgLi4ucmF3UmVxdWVzdCB9O1xuICBpZiAocmF3UmVxdWVzdC5vdXRwdXQ/Lmpzb25TY2hlbWEgJiYgIXJhd1JlcXVlc3Qub3V0cHV0Py5mb3JtYXQpIHtcbiAgICBvdXRSZXF1ZXN0Lm91dHB1dCA9IHsgLi4ucmF3UmVxdWVzdC5vdXRwdXQsIGZvcm1hdDogXCJqc29uXCIgfTtcbiAgfVxuICBjb25zdCBpbnN0cnVjdGlvbnMgPSAoMCwgaW1wb3J0X2Zvcm1hdHMucmVzb2x2ZUluc3RydWN0aW9ucykoXG4gICAgcmVzb2x2ZWRGb3JtYXQsXG4gICAgb3V0UmVxdWVzdC5vdXRwdXQ/Lmpzb25TY2hlbWEsXG4gICAgb3V0UmVxdWVzdD8ub3V0cHV0Py5pbnN0cnVjdGlvbnNcbiAgKTtcbiAgaWYgKHJlc29sdmVkRm9ybWF0KSB7XG4gICAgaWYgKHNob3VsZEluamVjdEZvcm1hdEluc3RydWN0aW9ucyhyZXNvbHZlZEZvcm1hdC5jb25maWcsIHJhd1JlcXVlc3Q/Lm91dHB1dCkpIHtcbiAgICAgIG91dFJlcXVlc3QubWVzc2FnZXMgPSAoMCwgaW1wb3J0X2Zvcm1hdHMuaW5qZWN0SW5zdHJ1Y3Rpb25zKShcbiAgICAgICAgb3V0UmVxdWVzdC5tZXNzYWdlcyxcbiAgICAgICAgaW5zdHJ1Y3Rpb25zXG4gICAgICApO1xuICAgIH1cbiAgICBvdXRSZXF1ZXN0Lm91dHB1dCA9IHtcbiAgICAgIC8vIHVzZSBvdXRwdXQgY29uZmlnIGZyb20gdGhlIGZvcm1hdFxuICAgICAgLi4ucmVzb2x2ZWRGb3JtYXQuY29uZmlnLFxuICAgICAgLy8gaWYgYW55dGhpbmcgaXMgc2V0IGV4cGxpY2l0bHksIHVzZSB0aGF0XG4gICAgICAuLi5vdXRSZXF1ZXN0Lm91dHB1dFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIG91dFJlcXVlc3Q7XG59XG5mdW5jdGlvbiBzaG91bGRJbmplY3RGb3JtYXRJbnN0cnVjdGlvbnMoZm9ybWF0Q29uZmlnLCByYXdSZXF1ZXN0Q29uZmlnKSB7XG4gIHJldHVybiBmb3JtYXRDb25maWc/LmRlZmF1bHRJbnN0cnVjdGlvbnMgIT09IGZhbHNlIHx8IHJhd1JlcXVlc3RDb25maWc/Lmluc3RydWN0aW9ucztcbn1cbmZ1bmN0aW9uIGFwcGx5VHJhbnNmZXJQcmVhbWJsZShyYXdSZXF1ZXN0LCB0cmFuc2ZlclByZWFtYmxlKSB7XG4gIGlmICghdHJhbnNmZXJQcmVhbWJsZSkge1xuICAgIHJldHVybiByYXdSZXF1ZXN0O1xuICB9XG4gIHJldHVybiAoMCwgaW1wb3J0X2NvcmUuc3RyaXBVbmRlZmluZWRQcm9wcykoe1xuICAgIC4uLnJhd1JlcXVlc3QsXG4gICAgbWVzc2FnZXM6IFtcbiAgICAgIC4uLigwLCBpbXBvcnRfZ2VuZXJhdGUudGFnQXNQcmVhbWJsZSkodHJhbnNmZXJQcmVhbWJsZS5tZXNzYWdlcyksXG4gICAgICAuLi5yYXdSZXF1ZXN0Lm1lc3NhZ2VzLmZpbHRlcigobSkgPT4gIW0ubWV0YWRhdGE/LnByZWFtYmxlKVxuICAgIF0sXG4gICAgdG9vbENob2ljZTogdHJhbnNmZXJQcmVhbWJsZS50b29sQ2hvaWNlIHx8IHJhd1JlcXVlc3QudG9vbENob2ljZSxcbiAgICB0b29sczogdHJhbnNmZXJQcmVhbWJsZS50b29scyB8fCByYXdSZXF1ZXN0LnRvb2xzLFxuICAgIGNvbmZpZzogdHJhbnNmZXJQcmVhbWJsZS5jb25maWcgfHwgcmF3UmVxdWVzdC5jb25maWdcbiAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZShyZWdpc3RyeSwge1xuICByYXdSZXF1ZXN0LFxuICBtaWRkbGV3YXJlLFxuICBjdXJyZW50VHVybixcbiAgbWVzc2FnZUluZGV4LFxuICBhYm9ydFNpZ25hbCxcbiAgc3RyZWFtaW5nQ2FsbGJhY2tcbn0pIHtcbiAgY29uc3QgeyBtb2RlbCwgdG9vbHMsIHJlc291cmNlcywgZm9ybWF0IH0gPSBhd2FpdCByZXNvbHZlUGFyYW1ldGVycyhcbiAgICByZWdpc3RyeSxcbiAgICByYXdSZXF1ZXN0XG4gICk7XG4gIHJhd1JlcXVlc3QgPSBhcHBseUZvcm1hdChyYXdSZXF1ZXN0LCBmb3JtYXQpO1xuICByYXdSZXF1ZXN0ID0gYXdhaXQgYXBwbHlSZXNvdXJjZXMocmVnaXN0cnksIHJhd1JlcXVlc3QsIHJlc291cmNlcyk7XG4gIGF3YWl0ICgwLCBpbXBvcnRfcmVzb2x2ZV90b29sX3JlcXVlc3RzLmFzc2VydFZhbGlkVG9vbE5hbWVzKSh0b29scyk7XG4gIGNvbnN0IHtcbiAgICByZXZpc2VkUmVxdWVzdCxcbiAgICBpbnRlcnJ1cHRlZFJlc3BvbnNlLFxuICAgIHRvb2xNZXNzYWdlOiByZXN1bWVkVG9vbE1lc3NhZ2VcbiAgfSA9IGF3YWl0ICgwLCBpbXBvcnRfcmVzb2x2ZV90b29sX3JlcXVlc3RzLnJlc29sdmVSZXN1bWVPcHRpb24pKHJlZ2lzdHJ5LCByYXdSZXF1ZXN0KTtcbiAgaWYgKGludGVycnVwdGVkUmVzcG9uc2UpIHtcbiAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgc3RhdHVzOiBcIkZBSUxFRF9QUkVDT05ESVRJT05cIixcbiAgICAgIG1lc3NhZ2U6IFwiT25lIG9yIG1vcmUgdG9vbHMgdHJpZ2dlcmVkIGFuIGludGVycnVwdCBkdXJpbmcgYSByZXN0YXJ0ZWQgZXhlY3V0aW9uLlwiLFxuICAgICAgZGV0YWlsOiB7IG1lc3NhZ2U6IGludGVycnVwdGVkUmVzcG9uc2UubWVzc2FnZSB9XG4gICAgfSk7XG4gIH1cbiAgcmF3UmVxdWVzdCA9IHJldmlzZWRSZXF1ZXN0O1xuICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgYWN0aW9uVG9HZW5lcmF0ZVJlcXVlc3QoXG4gICAgcmF3UmVxdWVzdCxcbiAgICB0b29scyxcbiAgICBmb3JtYXQsXG4gICAgbW9kZWxcbiAgKTtcbiAgY29uc3QgcHJldmlvdXNDaHVua3MgPSBbXTtcbiAgbGV0IGNodW5rUm9sZSA9IFwibW9kZWxcIjtcbiAgY29uc3QgbWFrZUNodW5rID0gKHJvbGUsIGNodW5rKSA9PiB7XG4gICAgaWYgKHJvbGUgIT09IGNodW5rUm9sZSAmJiBwcmV2aW91c0NodW5rcy5sZW5ndGgpIG1lc3NhZ2VJbmRleCsrO1xuICAgIGNodW5rUm9sZSA9IHJvbGU7XG4gICAgY29uc3QgcHJldlRvU2VuZCA9IFsuLi5wcmV2aW91c0NodW5rc107XG4gICAgcHJldmlvdXNDaHVua3MucHVzaChjaHVuayk7XG4gICAgcmV0dXJuIG5ldyBpbXBvcnRfY2h1bmsuR2VuZXJhdGVSZXNwb25zZUNodW5rKGNodW5rLCB7XG4gICAgICBpbmRleDogbWVzc2FnZUluZGV4LFxuICAgICAgcm9sZSxcbiAgICAgIHByZXZpb3VzQ2h1bmtzOiBwcmV2VG9TZW5kLFxuICAgICAgcGFyc2VyOiBmb3JtYXQ/LmhhbmRsZXIocmVxdWVzdC5vdXRwdXQ/LnNjaGVtYSkucGFyc2VDaHVua1xuICAgIH0pO1xuICB9O1xuICBpZiAocmVzdW1lZFRvb2xNZXNzYWdlICYmIHN0cmVhbWluZ0NhbGxiYWNrKSB7XG4gICAgc3RyZWFtaW5nQ2FsbGJhY2sobWFrZUNodW5rKFwidG9vbFwiLCByZXN1bWVkVG9vbE1lc3NhZ2UpKTtcbiAgfVxuICB2YXIgcmVzcG9uc2U7XG4gIGNvbnN0IGRpc3BhdGNoID0gYXN5bmMgKGluZGV4LCByZXEpID0+IHtcbiAgICBpZiAoIW1pZGRsZXdhcmUgfHwgaW5kZXggPT09IG1pZGRsZXdhcmUubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYXdhaXQgbW9kZWwocmVxLCB7XG4gICAgICAgIGFib3J0U2lnbmFsLFxuICAgICAgICBvbkNodW5rOiBzdHJlYW1pbmdDYWxsYmFjayAmJiAoKGNodW5rKSA9PiBzdHJlYW1pbmdDYWxsYmFjayAmJiBzdHJlYW1pbmdDYWxsYmFjayhtYWtlQ2h1bmsoXCJtb2RlbFwiLCBjaHVuaykpKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnRNaWRkbGV3YXJlID0gbWlkZGxld2FyZVtpbmRleF07XG4gICAgcmV0dXJuIGN1cnJlbnRNaWRkbGV3YXJlKFxuICAgICAgcmVxLFxuICAgICAgYXN5bmMgKG1vZGlmaWVkUmVxKSA9PiBkaXNwYXRjaChpbmRleCArIDEsIG1vZGlmaWVkUmVxIHx8IHJlcSlcbiAgICApO1xuICB9O1xuICBjb25zdCBtb2RlbFJlc3BvbnNlID0gYXdhaXQgZGlzcGF0Y2goMCwgcmVxdWVzdCk7XG4gIGlmIChtb2RlbC5fX2FjdGlvbi5hY3Rpb25UeXBlID09PSBcImJhY2tncm91bmQtbW9kZWxcIikge1xuICAgIHJlc3BvbnNlID0gbmV3IGltcG9ydF9nZW5lcmF0ZS5HZW5lcmF0ZVJlc3BvbnNlKFxuICAgICAgeyBvcGVyYXRpb246IG1vZGVsUmVzcG9uc2UgfSxcbiAgICAgIHtcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgcGFyc2VyOiBmb3JtYXQ/LmhhbmRsZXIocmVxdWVzdC5vdXRwdXQ/LnNjaGVtYSkucGFyc2VNZXNzYWdlXG4gICAgICB9XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXNwb25zZSA9IG5ldyBpbXBvcnRfZ2VuZXJhdGUuR2VuZXJhdGVSZXNwb25zZShtb2RlbFJlc3BvbnNlLCB7XG4gICAgICByZXF1ZXN0LFxuICAgICAgcGFyc2VyOiBmb3JtYXQ/LmhhbmRsZXIocmVxdWVzdC5vdXRwdXQ/LnNjaGVtYSkucGFyc2VNZXNzYWdlXG4gICAgfSk7XG4gIH1cbiAgaWYgKG1vZGVsLl9fYWN0aW9uLmFjdGlvblR5cGUgPT09IFwiYmFja2dyb3VuZC1tb2RlbFwiKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnRvSlNPTigpO1xuICB9XG4gIHJlc3BvbnNlLmFzc2VydFZhbGlkKCk7XG4gIGNvbnN0IGdlbmVyYXRlZE1lc3NhZ2UgPSByZXNwb25zZS5tZXNzYWdlO1xuICBjb25zdCB0b29sUmVxdWVzdHMgPSBnZW5lcmF0ZWRNZXNzYWdlLmNvbnRlbnQuZmlsdGVyKFxuICAgIChwYXJ0KSA9PiAhIXBhcnQudG9vbFJlcXVlc3RcbiAgKTtcbiAgaWYgKHJhd1JlcXVlc3QucmV0dXJuVG9vbFJlcXVlc3RzIHx8IHRvb2xSZXF1ZXN0cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAodG9vbFJlcXVlc3RzLmxlbmd0aCA9PT0gMCkgcmVzcG9uc2UuYXNzZXJ0VmFsaWRTY2hlbWEocmVxdWVzdCk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnRvSlNPTigpO1xuICB9XG4gIGNvbnN0IG1heEl0ZXJhdGlvbnMgPSByYXdSZXF1ZXN0Lm1heFR1cm5zID8/IDU7XG4gIGlmIChjdXJyZW50VHVybiArIDEgPiBtYXhJdGVyYXRpb25zKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9nZW5lcmF0ZS5HZW5lcmF0aW9uUmVzcG9uc2VFcnJvcihcbiAgICAgIHJlc3BvbnNlLFxuICAgICAgYEV4Y2VlZGVkIG1heGltdW0gdG9vbCBjYWxsIGl0ZXJhdGlvbnMgKCR7bWF4SXRlcmF0aW9uc30pYCxcbiAgICAgIFwiQUJPUlRFRFwiLFxuICAgICAgeyByZXF1ZXN0IH1cbiAgICApO1xuICB9XG4gIGNvbnN0IHsgcmV2aXNlZE1vZGVsTWVzc2FnZSwgdG9vbE1lc3NhZ2UsIHRyYW5zZmVyUHJlYW1ibGUgfSA9IGF3YWl0ICgwLCBpbXBvcnRfcmVzb2x2ZV90b29sX3JlcXVlc3RzLnJlc29sdmVUb29sUmVxdWVzdHMpKHJlZ2lzdHJ5LCByYXdSZXF1ZXN0LCBnZW5lcmF0ZWRNZXNzYWdlKTtcbiAgaWYgKHJldmlzZWRNb2RlbE1lc3NhZ2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzcG9uc2UudG9KU09OKCksXG4gICAgICBmaW5pc2hSZWFzb246IFwiaW50ZXJydXB0ZWRcIixcbiAgICAgIGZpbmlzaE1lc3NhZ2U6IFwiT25lIG9yIG1vcmUgdG9vbCBjYWxscyByZXN1bHRlZCBpbiBpbnRlcnJ1cHRzLlwiLFxuICAgICAgbWVzc2FnZTogcmV2aXNlZE1vZGVsTWVzc2FnZVxuICAgIH07XG4gIH1cbiAgc3RyZWFtaW5nQ2FsbGJhY2s/LihcbiAgICBtYWtlQ2h1bmsoXCJ0b29sXCIsIHtcbiAgICAgIGNvbnRlbnQ6IHRvb2xNZXNzYWdlLmNvbnRlbnRcbiAgICB9KVxuICApO1xuICBsZXQgbmV4dFJlcXVlc3QgPSB7XG4gICAgLi4ucmF3UmVxdWVzdCxcbiAgICBtZXNzYWdlczogWy4uLnJhd1JlcXVlc3QubWVzc2FnZXMsIGdlbmVyYXRlZE1lc3NhZ2UudG9KU09OKCksIHRvb2xNZXNzYWdlXVxuICB9O1xuICBuZXh0UmVxdWVzdCA9IGFwcGx5VHJhbnNmZXJQcmVhbWJsZShuZXh0UmVxdWVzdCwgdHJhbnNmZXJQcmVhbWJsZSk7XG4gIHJldHVybiBhd2FpdCBnZW5lcmF0ZUhlbHBlcihyZWdpc3RyeSwge1xuICAgIHJhd1JlcXVlc3Q6IG5leHRSZXF1ZXN0LFxuICAgIG1pZGRsZXdhcmUsXG4gICAgY3VycmVudFR1cm46IGN1cnJlbnRUdXJuICsgMSxcbiAgICBtZXNzYWdlSW5kZXg6IG1lc3NhZ2VJbmRleCArIDEsXG4gICAgc3RyZWFtaW5nQ2FsbGJhY2ssXG4gICAgYWJvcnRTaWduYWxcbiAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiBhY3Rpb25Ub0dlbmVyYXRlUmVxdWVzdChvcHRpb25zLCByZXNvbHZlZFRvb2xzLCByZXNvbHZlZEZvcm1hdCwgbW9kZWwpIHtcbiAgY29uc3QgbW9kZWxJbmZvID0gbW9kZWwuX19hY3Rpb24ubWV0YWRhdGE/Lm1vZGVsO1xuICBpZiAoKG9wdGlvbnMudG9vbHM/Lmxlbmd0aCA/PyAwKSA+IDAgJiYgbW9kZWxJbmZvPy5zdXBwb3J0cyAmJiAhbW9kZWxJbmZvPy5zdXBwb3J0cz8udG9vbHMpIHtcbiAgICBpbXBvcnRfbG9nZ2luZy5sb2dnZXIud2FybihcbiAgICAgIGBUaGUgbW9kZWwgJyR7bW9kZWwuX19hY3Rpb24ubmFtZX0nIGRvZXMgbm90IHN1cHBvcnQgdG9vbHMgKHlvdSBzZXQ6ICR7b3B0aW9ucy50b29scz8ubGVuZ3RofSB0b29scykuIFRoZSBtb2RlbCBtYXkgbm90IGJlaGF2ZSB0aGUgd2F5IHlvdSBleHBlY3QuYFxuICAgICk7XG4gIH1cbiAgaWYgKG9wdGlvbnMudG9vbENob2ljZSAmJiBtb2RlbEluZm8/LnN1cHBvcnRzICYmICFtb2RlbEluZm8/LnN1cHBvcnRzPy50b29sQ2hvaWNlKSB7XG4gICAgaW1wb3J0X2xvZ2dpbmcubG9nZ2VyLndhcm4oXG4gICAgICBgVGhlIG1vZGVsICcke21vZGVsLl9fYWN0aW9uLm5hbWV9JyBkb2VzIG5vdCBzdXBwb3J0IHRoZSAndG9vbENob2ljZScgb3B0aW9uICh5b3Ugc2V0OiAke29wdGlvbnMudG9vbENob2ljZX0pLiBUaGUgbW9kZWwgbWF5IG5vdCBiZWhhdmUgdGhlIHdheSB5b3UgZXhwZWN0LmBcbiAgICApO1xuICB9XG4gIGNvbnN0IG91dCA9IHtcbiAgICBtZXNzYWdlczogb3B0aW9ucy5tZXNzYWdlcyxcbiAgICBjb25maWc6IG9wdGlvbnMuY29uZmlnLFxuICAgIGRvY3M6IG9wdGlvbnMuZG9jcyxcbiAgICB0b29sczogcmVzb2x2ZWRUb29scz8ubWFwKGltcG9ydF90b29sLnRvVG9vbERlZmluaXRpb24pIHx8IFtdLFxuICAgIG91dHB1dDogKDAsIGltcG9ydF9jb3JlLnN0cmlwVW5kZWZpbmVkUHJvcHMpKHtcbiAgICAgIGNvbnN0cmFpbmVkOiBvcHRpb25zLm91dHB1dD8uY29uc3RyYWluZWQsXG4gICAgICBjb250ZW50VHlwZTogb3B0aW9ucy5vdXRwdXQ/LmNvbnRlbnRUeXBlLFxuICAgICAgZm9ybWF0OiBvcHRpb25zLm91dHB1dD8uZm9ybWF0LFxuICAgICAgc2NoZW1hOiBvcHRpb25zLm91dHB1dD8uanNvblNjaGVtYVxuICAgIH0pXG4gIH07XG4gIGlmIChvcHRpb25zLnRvb2xDaG9pY2UpIHtcbiAgICBvdXQudG9vbENob2ljZSA9IG9wdGlvbnMudG9vbENob2ljZTtcbiAgfVxuICBpZiAob3V0Lm91dHB1dCAmJiAhb3V0Lm91dHB1dC5zY2hlbWEpIGRlbGV0ZSBvdXQub3V0cHV0LnNjaGVtYTtcbiAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIGluZmVyUm9sZUZyb21QYXJ0cyhwYXJ0cykge1xuICBjb25zdCB1bmlxdWVSb2xlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xuICAgIGNvbnN0IHJvbGUgPSBnZXRSb2xlRnJvbVBhcnQocGFydCk7XG4gICAgdW5pcXVlUm9sZXMuYWRkKHJvbGUpO1xuICAgIGlmICh1bmlxdWVSb2xlcy5zaXplID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29udGVudHMgY29udGFpbiBtaXhlZCByb2xlc1wiKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20odW5pcXVlUm9sZXMpWzBdO1xufVxuZnVuY3Rpb24gZ2V0Um9sZUZyb21QYXJ0KHBhcnQpIHtcbiAgaWYgKHBhcnQudG9vbFJlcXVlc3QgIT09IHZvaWQgMCkgcmV0dXJuIFwibW9kZWxcIjtcbiAgaWYgKHBhcnQudG9vbFJlc3BvbnNlICE9PSB2b2lkIDApIHJldHVybiBcInRvb2xcIjtcbiAgaWYgKHBhcnQudGV4dCAhPT0gdm9pZCAwKSByZXR1cm4gXCJ1c2VyXCI7XG4gIGlmIChwYXJ0Lm1lZGlhICE9PSB2b2lkIDApIHJldHVybiBcInVzZXJcIjtcbiAgaWYgKHBhcnQuZGF0YSAhPT0gdm9pZCAwKSByZXR1cm4gXCJ1c2VyXCI7XG4gIHRocm93IG5ldyBFcnJvcihcIk5vIHJlY29nbml6ZWQgZmllbGRzIGluIGNvbnRlbnRcIik7XG59XG5hc3luYyBmdW5jdGlvbiBhcHBseVJlc291cmNlcyhyZWdpc3RyeSwgcmF3UmVxdWVzdCwgcmVzb3VyY2VzKSB7XG4gIGlmICghcmF3UmVxdWVzdC5tZXNzYWdlcy5maW5kKChtKSA9PiAhIW0uY29udGVudC5maW5kKChjKSA9PiBjLnJlc291cmNlKSkpIHtcbiAgICByZXR1cm4gcmF3UmVxdWVzdDtcbiAgfVxuICBjb25zdCB1cGRhdGVkTWVzc2FnZXMgPSBbXTtcbiAgZm9yIChjb25zdCBtIG9mIHJhd1JlcXVlc3QubWVzc2FnZXMpIHtcbiAgICBpZiAoIW0uY29udGVudC5maW5kKChjKSA9PiBjLnJlc291cmNlKSkge1xuICAgICAgdXBkYXRlZE1lc3NhZ2VzLnB1c2gobSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlZENvbnRlbnQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHAgb2YgbS5jb250ZW50KSB7XG4gICAgICBpZiAoIXAucmVzb3VyY2UpIHtcbiAgICAgICAgdXBkYXRlZENvbnRlbnQucHVzaChwKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCByZXNvdXJjZSA9IGF3YWl0ICgwLCBpbXBvcnRfcmVzb3VyY2UuZmluZE1hdGNoaW5nUmVzb3VyY2UpKFxuICAgICAgICByZWdpc3RyeSxcbiAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgICBwLnJlc291cmNlXG4gICAgICApO1xuICAgICAgaWYgKCFyZXNvdXJjZSkge1xuICAgICAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgICAgIHN0YXR1czogXCJOT1RfRk9VTkRcIixcbiAgICAgICAgICBtZXNzYWdlOiBgZmFpbGVkIHRvIGZpbmQgbWF0Y2hpbmcgcmVzb3VyY2UgZm9yICR7cC5yZXNvdXJjZS51cml9YFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc291cmNlUGFydHMgPSBhd2FpdCByZXNvdXJjZShwLnJlc291cmNlKTtcbiAgICAgIHVwZGF0ZWRDb250ZW50LnB1c2goLi4ucmVzb3VyY2VQYXJ0cy5jb250ZW50KTtcbiAgICB9XG4gICAgdXBkYXRlZE1lc3NhZ2VzLnB1c2goe1xuICAgICAgLi4ubSxcbiAgICAgIGNvbnRlbnQ6IHVwZGF0ZWRDb250ZW50XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAuLi5yYXdSZXF1ZXN0LFxuICAgIG1lc3NhZ2VzOiB1cGRhdGVkTWVzc2FnZXNcbiAgfTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBkZWZpbmVHZW5lcmF0ZUFjdGlvbixcbiAgZ2VuZXJhdGVIZWxwZXIsXG4gIGluZmVyUm9sZUZyb21QYXJ0cyxcbiAgc2hvdWxkSW5qZWN0Rm9ybWF0SW5zdHJ1Y3Rpb25zXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js":
/*!**********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/chunk.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar chunk_exports = {};\n__export(chunk_exports, {\n  GenerateResponseChunk: () => GenerateResponseChunk\n});\nmodule.exports = __toCommonJS(chunk_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_extract = __webpack_require__(/*! ../extract.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nclass GenerateResponseChunk {\n  /** The index of the message this chunk corresponds to, starting with `0` for the first model response of the generation. */\n  index;\n  /** The role of the message this chunk corresponds to. Will always be `model` or `tool`. */\n  role;\n  /** The content generated in this chunk. */\n  content;\n  /** Custom model-specific data for this chunk. */\n  custom;\n  /** Accumulated chunks for partial output extraction. */\n  previousChunks;\n  /** The parser to be used to parse `output` from this chunk. */\n  parser;\n  constructor(data, options) {\n    this.content = data.content || [];\n    this.custom = data.custom;\n    this.previousChunks = options.previousChunks ? [...options.previousChunks] : void 0;\n    this.index = options.index;\n    this.role = options.role;\n    this.parser = options.parser;\n  }\n  /**\n   * Concatenates all `text` parts present in the chunk with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Concatenates all `reasoning` parts present in the chunk with no delimiter.\n   * @returns A string of all concatenated reasoning parts.\n   */\n  get reasoning() {\n    return this.content.map((part) => part.reasoning || \"\").join(\"\");\n  }\n  /**\n   * Concatenates all `text` parts of all chunks from the response thus far.\n   * @returns A string of all concatenated chunk text content.\n   */\n  get accumulatedText() {\n    return this.previousText + this.text;\n  }\n  /**\n   * Concatenates all `text` parts of all preceding chunks.\n   */\n  get previousText() {\n    if (!this.previousChunks)\n      throw new import_core.GenkitError({\n        status: \"FAILED_PRECONDITION\",\n        message: \"Cannot compose accumulated text without previous chunks.\"\n      });\n    return this.previousChunks?.map((c) => c.content.map((p) => p.text || \"\").join(\"\")).join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the chunk. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the chunk.\n   */\n  get media() {\n    return this.content.find((part) => part.media)?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of a chunk.\n   * @returns The first `data` part detected in the chunk (if any).\n   */\n  get data() {\n    return this.content.find((part) => part.data)?.data;\n  }\n  /**\n   * Returns all tool request found in this chunk.\n   * @returns Array of all tool request found in this chunk.\n   */\n  get toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Parses the chunk into the desired output format using the parser associated\n   * with the generate request, or falls back to naive JSON parsing otherwise.\n   */\n  get output() {\n    if (this.parser) return this.parser(this);\n    return this.data || (0, import_extract.extractJson)(this.accumulatedText);\n  }\n  toJSON() {\n    const data = {\n      role: this.role,\n      index: this.index,\n      content: this.content\n    };\n    if (this.custom) {\n      data.custom = this.custom;\n    }\n    return data;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=chunk.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9nZW5lcmF0ZS9jaHVuay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFpQjtBQUMzQyxxQkFBcUIsbUJBQU8sQ0FBQyxtRkFBZTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9nZW5lcmF0ZS9jaHVuay5qcz8xMWVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBjaHVua19leHBvcnRzID0ge307XG5fX2V4cG9ydChjaHVua19leHBvcnRzLCB7XG4gIEdlbmVyYXRlUmVzcG9uc2VDaHVuazogKCkgPT4gR2VuZXJhdGVSZXNwb25zZUNodW5rXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGNodW5rX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbnZhciBpbXBvcnRfZXh0cmFjdCA9IHJlcXVpcmUoXCIuLi9leHRyYWN0LmpzXCIpO1xuY2xhc3MgR2VuZXJhdGVSZXNwb25zZUNodW5rIHtcbiAgLyoqIFRoZSBpbmRleCBvZiB0aGUgbWVzc2FnZSB0aGlzIGNodW5rIGNvcnJlc3BvbmRzIHRvLCBzdGFydGluZyB3aXRoIGAwYCBmb3IgdGhlIGZpcnN0IG1vZGVsIHJlc3BvbnNlIG9mIHRoZSBnZW5lcmF0aW9uLiAqL1xuICBpbmRleDtcbiAgLyoqIFRoZSByb2xlIG9mIHRoZSBtZXNzYWdlIHRoaXMgY2h1bmsgY29ycmVzcG9uZHMgdG8uIFdpbGwgYWx3YXlzIGJlIGBtb2RlbGAgb3IgYHRvb2xgLiAqL1xuICByb2xlO1xuICAvKiogVGhlIGNvbnRlbnQgZ2VuZXJhdGVkIGluIHRoaXMgY2h1bmsuICovXG4gIGNvbnRlbnQ7XG4gIC8qKiBDdXN0b20gbW9kZWwtc3BlY2lmaWMgZGF0YSBmb3IgdGhpcyBjaHVuay4gKi9cbiAgY3VzdG9tO1xuICAvKiogQWNjdW11bGF0ZWQgY2h1bmtzIGZvciBwYXJ0aWFsIG91dHB1dCBleHRyYWN0aW9uLiAqL1xuICBwcmV2aW91c0NodW5rcztcbiAgLyoqIFRoZSBwYXJzZXIgdG8gYmUgdXNlZCB0byBwYXJzZSBgb3V0cHV0YCBmcm9tIHRoaXMgY2h1bmsuICovXG4gIHBhcnNlcjtcbiAgY29uc3RydWN0b3IoZGF0YSwgb3B0aW9ucykge1xuICAgIHRoaXMuY29udGVudCA9IGRhdGEuY29udGVudCB8fCBbXTtcbiAgICB0aGlzLmN1c3RvbSA9IGRhdGEuY3VzdG9tO1xuICAgIHRoaXMucHJldmlvdXNDaHVua3MgPSBvcHRpb25zLnByZXZpb3VzQ2h1bmtzID8gWy4uLm9wdGlvbnMucHJldmlvdXNDaHVua3NdIDogdm9pZCAwO1xuICAgIHRoaXMuaW5kZXggPSBvcHRpb25zLmluZGV4O1xuICAgIHRoaXMucm9sZSA9IG9wdGlvbnMucm9sZTtcbiAgICB0aGlzLnBhcnNlciA9IG9wdGlvbnMucGFyc2VyO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGB0ZXh0YCBwYXJ0cyBwcmVzZW50IGluIHRoZSBjaHVuayB3aXRoIG5vIGRlbGltaXRlci5cbiAgICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIGNvbmNhdGVuYXRlZCB0ZXh0IHBhcnRzLlxuICAgKi9cbiAgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5tYXAoKHBhcnQpID0+IHBhcnQudGV4dCB8fCBcIlwiKS5qb2luKFwiXCIpO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGByZWFzb25pbmdgIHBhcnRzIHByZXNlbnQgaW4gdGhlIGNodW5rIHdpdGggbm8gZGVsaW1pdGVyLlxuICAgKiBAcmV0dXJucyBBIHN0cmluZyBvZiBhbGwgY29uY2F0ZW5hdGVkIHJlYXNvbmluZyBwYXJ0cy5cbiAgICovXG4gIGdldCByZWFzb25pbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5tYXAoKHBhcnQpID0+IHBhcnQucmVhc29uaW5nIHx8IFwiXCIpLmpvaW4oXCJcIik7XG4gIH1cbiAgLyoqXG4gICAqIENvbmNhdGVuYXRlcyBhbGwgYHRleHRgIHBhcnRzIG9mIGFsbCBjaHVua3MgZnJvbSB0aGUgcmVzcG9uc2UgdGh1cyBmYXIuXG4gICAqIEByZXR1cm5zIEEgc3RyaW5nIG9mIGFsbCBjb25jYXRlbmF0ZWQgY2h1bmsgdGV4dCBjb250ZW50LlxuICAgKi9cbiAgZ2V0IGFjY3VtdWxhdGVkVGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcmV2aW91c1RleHQgKyB0aGlzLnRleHQ7XG4gIH1cbiAgLyoqXG4gICAqIENvbmNhdGVuYXRlcyBhbGwgYHRleHRgIHBhcnRzIG9mIGFsbCBwcmVjZWRpbmcgY2h1bmtzLlxuICAgKi9cbiAgZ2V0IHByZXZpb3VzVGV4dCgpIHtcbiAgICBpZiAoIXRoaXMucHJldmlvdXNDaHVua3MpXG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgICBzdGF0dXM6IFwiRkFJTEVEX1BSRUNPTkRJVElPTlwiLFxuICAgICAgICBtZXNzYWdlOiBcIkNhbm5vdCBjb21wb3NlIGFjY3VtdWxhdGVkIHRleHQgd2l0aG91dCBwcmV2aW91cyBjaHVua3MuXCJcbiAgICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnByZXZpb3VzQ2h1bmtzPy5tYXAoKGMpID0+IGMuY29udGVudC5tYXAoKHApID0+IHAudGV4dCB8fCBcIlwiKS5qb2luKFwiXCIpKS5qb2luKFwiXCIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBtZWRpYSBwYXJ0IGRldGVjdGVkIGluIHRoZSBjaHVuay4gVXNlZnVsIGZvciBleHRyYWN0aW5nXG4gICAqIChmb3IgZXhhbXBsZSkgYW4gaW1hZ2UgZnJvbSBhIGdlbmVyYXRpb24gZXhwZWN0ZWQgdG8gY3JlYXRlIG9uZS5cbiAgICogQHJldHVybnMgVGhlIGZpcnN0IGRldGVjdGVkIGBtZWRpYWAgcGFydCBpbiB0aGUgY2h1bmsuXG4gICAqL1xuICBnZXQgbWVkaWEoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5maW5kKChwYXJ0KSA9PiBwYXJ0Lm1lZGlhKT8ubWVkaWEgfHwgbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgZGV0ZWN0ZWQgYGRhdGFgIHBhcnQgb2YgYSBjaHVuay5cbiAgICogQHJldHVybnMgVGhlIGZpcnN0IGBkYXRhYCBwYXJ0IGRldGVjdGVkIGluIHRoZSBjaHVuayAoaWYgYW55KS5cbiAgICovXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQuZmluZCgocGFydCkgPT4gcGFydC5kYXRhKT8uZGF0YTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbGwgdG9vbCByZXF1ZXN0IGZvdW5kIGluIHRoaXMgY2h1bmsuXG4gICAqIEByZXR1cm5zIEFycmF5IG9mIGFsbCB0b29sIHJlcXVlc3QgZm91bmQgaW4gdGhpcyBjaHVuay5cbiAgICovXG4gIGdldCB0b29sUmVxdWVzdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5maWx0ZXIoXG4gICAgICAocGFydCkgPT4gISFwYXJ0LnRvb2xSZXF1ZXN0XG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogUGFyc2VzIHRoZSBjaHVuayBpbnRvIHRoZSBkZXNpcmVkIG91dHB1dCBmb3JtYXQgdXNpbmcgdGhlIHBhcnNlciBhc3NvY2lhdGVkXG4gICAqIHdpdGggdGhlIGdlbmVyYXRlIHJlcXVlc3QsIG9yIGZhbGxzIGJhY2sgdG8gbmFpdmUgSlNPTiBwYXJzaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIGdldCBvdXRwdXQoKSB7XG4gICAgaWYgKHRoaXMucGFyc2VyKSByZXR1cm4gdGhpcy5wYXJzZXIodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMuZGF0YSB8fCAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEpzb24pKHRoaXMuYWNjdW11bGF0ZWRUZXh0KTtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHJvbGU6IHRoaXMucm9sZSxcbiAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgY29udGVudDogdGhpcy5jb250ZW50XG4gICAgfTtcbiAgICBpZiAodGhpcy5jdXN0b20pIHtcbiAgICAgIGRhdGEuY3VzdG9tID0gdGhpcy5jdXN0b207XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgR2VuZXJhdGVSZXNwb25zZUNodW5rXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar resolve_tool_requests_exports = {};\n__export(resolve_tool_requests_exports, {\n  assertValidToolNames: () => assertValidToolNames,\n  resolveRestartedTools: () => resolveRestartedTools,\n  resolveResumeOption: () => resolveResumeOption,\n  resolveToolRequest: () => resolveToolRequest,\n  resolveToolRequests: () => resolveToolRequests,\n  toPendingOutput: () => toPendingOutput,\n  toToolMap: () => toToolMap\n});\nmodule.exports = __toCommonJS(resolve_tool_requests_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_prompt = __webpack_require__(/*! ../prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_tool = __webpack_require__(/*! ../tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nfunction toToolMap(tools) {\n  assertValidToolNames(tools);\n  const out = {};\n  for (const tool of tools) {\n    const name = tool.__action.name;\n    const shortName = name.substring(name.lastIndexOf(\"/\") + 1);\n    out[shortName] = tool;\n  }\n  return out;\n}\nfunction assertValidToolNames(tools) {\n  const nameMap = {};\n  for (const tool of tools) {\n    const name = tool.__action.name;\n    const shortName = name.substring(name.lastIndexOf(\"/\") + 1);\n    if (nameMap[shortName]) {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Cannot provide two tools with the same name: '${name}' and '${nameMap[shortName]}'`\n      });\n    }\n    nameMap[shortName] = name;\n  }\n}\nfunction toRunOptions(part) {\n  const out = { metadata: part.metadata };\n  if (part.metadata?.resumed) out.resumed = part.metadata.resumed;\n  return out;\n}\nfunction toPendingOutput(part, response) {\n  return {\n    ...part,\n    metadata: {\n      ...part.metadata,\n      pendingOutput: response.toolResponse.output\n    }\n  };\n}\nasync function resolveToolRequest(rawRequest, part, toolMap, runOptions) {\n  const tool = toolMap[part.toolRequest.name];\n  if (!tool) {\n    throw new import_core.GenkitError({\n      status: \"NOT_FOUND\",\n      message: `Tool ${part.toolRequest.name} not found`,\n      detail: { request: rawRequest }\n    });\n  }\n  if ((0, import_prompt.isPromptAction)(tool)) {\n    const preamble = await tool(part.toolRequest.input);\n    const response = {\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output: `transferred to ${part.toolRequest.name}`\n      }\n    };\n    return { preamble, response };\n  }\n  try {\n    const output = await tool(part.toolRequest.input, toRunOptions(part));\n    const response = (0, import_core.stripUndefinedProps)({\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output\n      }\n    });\n    return { response };\n  } catch (e) {\n    if (e instanceof import_tool.ToolInterruptError || // There's an inexplicable case when the above type check fails, only in tests.\n    e.name === \"ToolInterruptError\") {\n      const ie = e;\n      import_logging.logger.debug(\n        `tool '${toolMap[part.toolRequest?.name].__action.name}' triggered an interrupt${ie.metadata ? `: ${JSON.stringify(ie.metadata)}` : \"\"}`\n      );\n      const interrupt = {\n        toolRequest: part.toolRequest,\n        metadata: { ...part.metadata, interrupt: ie.metadata || true }\n      };\n      return { interrupt };\n    }\n    throw e;\n  }\n}\nasync function resolveToolRequests(registry, rawRequest, generatedMessage) {\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const responseParts = [];\n  let hasInterrupts = false;\n  let transferPreamble;\n  const revisedModelMessage = {\n    ...generatedMessage,\n    content: [...generatedMessage.content]\n  };\n  await Promise.all(\n    revisedModelMessage.content.map(async (part, i) => {\n      if (!part.toolRequest) return;\n      const { preamble, response, interrupt } = await resolveToolRequest(\n        rawRequest,\n        part,\n        toolMap\n      );\n      if (preamble) {\n        if (transferPreamble) {\n          throw new import_core.GenkitError({\n            status: \"INVALID_ARGUMENT\",\n            message: `Model attempted to transfer to multiple prompt tools.`\n          });\n        }\n        transferPreamble = preamble;\n      }\n      if (response) {\n        responseParts.push(response);\n        revisedModelMessage.content.splice(\n          i,\n          1,\n          toPendingOutput(part, response)\n        );\n      }\n      if (interrupt) {\n        revisedModelMessage.content.splice(i, 1, interrupt);\n        hasInterrupts = true;\n      }\n    })\n  );\n  if (hasInterrupts) {\n    return { revisedModelMessage };\n  }\n  return {\n    toolMessage: { role: \"tool\", content: responseParts },\n    transferPreamble\n  };\n}\nfunction findCorrespondingToolRequest(parts, part) {\n  const name = part.toolRequest?.name || part.toolResponse?.name;\n  const ref = part.toolRequest?.ref || part.toolResponse?.ref;\n  return parts.find(\n    (p) => p.toolRequest?.name === name && p.toolRequest?.ref === ref\n  );\n}\nfunction findCorrespondingToolResponse(parts, part) {\n  const name = part.toolRequest?.name || part.toolResponse?.name;\n  const ref = part.toolRequest?.ref || part.toolResponse?.ref;\n  return parts.find(\n    (p) => p.toolResponse?.name === name && p.toolResponse?.ref === ref\n  );\n}\nasync function resolveResumedToolRequest(rawRequest, part, toolMap) {\n  if (part.metadata?.pendingOutput) {\n    const { pendingOutput, ...metadata } = part.metadata;\n    const toolResponse = {\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output: pendingOutput\n      },\n      metadata: { ...metadata, source: \"pending\" }\n    };\n    return (0, import_core.stripUndefinedProps)({\n      toolResponse,\n      toolRequest: { ...part, metadata }\n    });\n  }\n  const providedResponse = findCorrespondingToolResponse(\n    rawRequest.resume?.respond || [],\n    part\n  );\n  if (providedResponse) {\n    const toolResponse = providedResponse;\n    const { interrupt, ...metadata } = part.metadata || {};\n    return (0, import_core.stripUndefinedProps)({\n      toolResponse,\n      toolRequest: {\n        ...part,\n        metadata: { ...metadata, resolvedInterrupt: interrupt }\n      }\n    });\n  }\n  const restartRequest = findCorrespondingToolRequest(\n    rawRequest.resume?.restart || [],\n    part\n  );\n  if (restartRequest) {\n    const { response, interrupt, preamble } = await resolveToolRequest(\n      rawRequest,\n      restartRequest,\n      toolMap\n    );\n    if (preamble) {\n      throw new import_core.GenkitError({\n        status: \"INTERNAL\",\n        message: `Prompt tool '${restartRequest.toolRequest.name}' executed inside 'restart' resolution. This should never happen.`\n      });\n    }\n    if (interrupt) return { interrupt };\n    if (response) {\n      const toolResponse = response;\n      const { interrupt: interrupt2, ...metadata } = part.metadata || {};\n      return (0, import_core.stripUndefinedProps)({\n        toolResponse,\n        toolRequest: {\n          ...part,\n          metadata: { ...metadata, resolvedInterrupt: interrupt2 }\n        }\n      });\n    }\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Unresolved tool request '${part.toolRequest.name}${part.toolRequest.ref ? `#${part.toolRequest.ref}` : \"\"}' was not handled by the 'resume' argument. You must supply replies or restarts for all interrupted tool requests.'`\n  });\n}\nasync function resolveResumeOption(registry, rawRequest) {\n  if (!rawRequest.resume) return { revisedRequest: rawRequest };\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const messages = rawRequest.messages;\n  const lastMessage = messages.at(-1);\n  if (!lastMessage || lastMessage.role !== \"model\" || !lastMessage.content.find((p) => p.toolRequest)) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Cannot 'resume' generation unless the previous message is a model message with at least one tool request.`\n    });\n  }\n  const toolResponses = [];\n  let interrupted = false;\n  lastMessage.content = await Promise.all(\n    lastMessage.content.map(async (part) => {\n      if (!(0, import_tool.isToolRequest)(part)) return part;\n      const resolved = await resolveResumedToolRequest(\n        rawRequest,\n        part,\n        toolMap\n      );\n      if (resolved.interrupt) {\n        interrupted = true;\n        return resolved.interrupt;\n      }\n      toolResponses.push(resolved.toolResponse);\n      return resolved.toolRequest;\n    })\n  );\n  if (interrupted) {\n    return {\n      interruptedResponse: {\n        finishReason: \"interrupted\",\n        finishMessage: \"One or more tools triggered interrupts while resuming generation. The model was not called.\",\n        message: lastMessage\n      }\n    };\n  }\n  const numToolRequests = lastMessage.content.filter(\n    (p) => !!p.toolRequest\n  ).length;\n  if (toolResponses.length !== numToolRequests) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Expected ${numToolRequests} tool responses but resolved to ${toolResponses.length}.`,\n      detail: { toolResponses, message: lastMessage }\n    });\n  }\n  const toolMessage = {\n    role: \"tool\",\n    content: toolResponses,\n    metadata: {\n      resumed: rawRequest.resume.metadata || true\n    }\n  };\n  return (0, import_core.stripUndefinedProps)({\n    revisedRequest: {\n      ...rawRequest,\n      resume: void 0,\n      messages: [...messages, toolMessage]\n    },\n    toolMessage\n  });\n}\nasync function resolveRestartedTools(registry, rawRequest) {\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const lastMessage = rawRequest.messages.at(-1);\n  if (!lastMessage || lastMessage.role !== \"model\") return [];\n  const restarts = lastMessage.content.filter(\n    (p) => p.toolRequest && p.metadata?.resumed\n  );\n  return await Promise.all(\n    restarts.map(async (p) => {\n      const { response, interrupt } = await resolveToolRequest(\n        rawRequest,\n        p,\n        toolMap\n      );\n      if (interrupt) return interrupt;\n      return toPendingOutput(p, response);\n    })\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=resolve-tool-requests.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js":
/*!*************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/response.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar response_exports = {};\n__export(response_exports, {\n  GenerateResponse: () => GenerateResponse\n});\nmodule.exports = __toCommonJS(response_exports);\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_generate = __webpack_require__(/*! ../generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ../message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nclass GenerateResponse {\n  /** The generated message. */\n  message;\n  /** The reason generation stopped for this request. */\n  finishReason;\n  /** Additional information about why the model stopped generating, if any. */\n  finishMessage;\n  /** Usage information. */\n  usage;\n  /** Provider-specific response data. */\n  custom;\n  /** Provider-specific response data. */\n  raw;\n  /** The request that generated this response. */\n  request;\n  /** Model generation long running operation. */\n  operation;\n  /** Name of the model used. */\n  model;\n  /** The parser for output parsing of this response. */\n  parser;\n  constructor(response, options) {\n    const generatedMessage = response.message || response.candidates?.[0]?.message;\n    if (generatedMessage) {\n      this.message = new import_message.Message(generatedMessage, {\n        parser: options?.parser\n      });\n    }\n    this.finishReason = response.finishReason || response.candidates?.[0]?.finishReason;\n    this.finishMessage = response.finishMessage || response.candidates?.[0]?.finishMessage;\n    this.usage = response.usage || {};\n    this.custom = response.custom || {};\n    this.raw = response.raw || this.custom;\n    this.request = options?.request;\n    this.operation = response?.operation;\n  }\n  /**\n   * Throws an error if the response does not contain valid output.\n   */\n  assertValid() {\n    if (this.finishReason === \"blocked\") {\n      throw new import_generate.GenerationBlockedError(\n        this,\n        `Generation blocked${this.finishMessage ? `: ${this.finishMessage}` : \".\"}`\n      );\n    }\n    if (!this.message && !this.operation) {\n      throw new import_generate.GenerationResponseError(\n        this,\n        `Model did not generate a message. Finish reason: '${this.finishReason}': ${this.finishMessage}`\n      );\n    }\n  }\n  /**\n   * Throws an error if the response does not conform to expected schema.\n   */\n  assertValidSchema(request) {\n    if (request?.output?.schema || this.request?.output?.schema) {\n      const o = this.output;\n      (0, import_schema.parseSchema)(o, {\n        jsonSchema: request?.output?.schema || this.request?.output?.schema\n      });\n    }\n  }\n  isValid(request) {\n    try {\n      this.assertValid();\n      this.assertValidSchema(request);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * If the generated message contains a `data` part, it is returned. Otherwise,\n   * the `output()` method extracts the first valid JSON object or array from the text\n   * contained in the selected candidate's message and returns it.\n   *\n   * @returns The structured output contained in the selected candidate.\n   */\n  get output() {\n    return this.message?.output || null;\n  }\n  /**\n   * Concatenates all `text` parts present in the generated message with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.message?.text || \"\";\n  }\n  /**\n   * Concatenates all `reasoning` parts present in the generated message with no delimiter.\n   * @returns A string of all concatenated reasoning parts.\n   */\n  get reasoning() {\n    return this.message?.reasoning || \"\";\n  }\n  /**\n   * Returns the first detected media part in the generated message. Useful for\n   * extracting (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the candidate.\n   */\n  get media() {\n    return this.message?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of the generated message.\n   * @returns The first `data` part detected in the candidate (if any).\n   */\n  get data() {\n    return this.message?.data || null;\n  }\n  /**\n   * Returns all tool request found in the generated message.\n   * @returns Array of all tool request found in the candidate.\n   */\n  get toolRequests() {\n    return this.message?.toolRequests || [];\n  }\n  /**\n   * Returns all tool requests annotated as interrupts found in the generated message.\n   * @returns A list of ToolRequestParts.\n   */\n  get interrupts() {\n    return this.message?.interrupts || [];\n  }\n  /**\n   * Returns the message history for the request by concatenating the model\n   * response to the list of messages from the request. The result of this\n   * method can be safely serialized to JSON for persistence in a database.\n   * @returns A serializable list of messages compatible with `generate({history})`.\n   */\n  get messages() {\n    if (!this.request)\n      throw new Error(\n        \"Can't construct history for response without request reference.\"\n      );\n    if (!this.message)\n      throw new Error(\n        \"Can't construct history for response without generated message.\"\n      );\n    return [...this.request?.messages, this.message.toJSON()];\n  }\n  toJSON() {\n    const out = {\n      message: this.message?.toJSON(),\n      finishReason: this.finishReason,\n      finishMessage: this.finishMessage,\n      usage: this.usage,\n      custom: this.custom.toJSON?.() || this.custom,\n      request: this.request,\n      operation: this.operation\n    };\n    if (!out.finishMessage) delete out.finishMessage;\n    if (!out.request) delete out.request;\n    if (!out.operation) delete out.operation;\n    return out;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar index_exports = {};\n__export(index_exports, {\n  BaseDataPointSchema: () => import_evaluator.BaseDataPointSchema,\n  Document: () => import_document.Document,\n  DocumentDataSchema: () => import_document.DocumentDataSchema,\n  EvalStatusEnum: () => import_evaluator.EvalStatusEnum,\n  GenerateResponse: () => import_generate.GenerateResponse,\n  GenerateResponseChunk: () => import_generate.GenerateResponseChunk,\n  GenerateResponseChunkSchema: () => import_model.GenerateResponseChunkSchema,\n  GenerationBlockedError: () => import_generate.GenerationBlockedError,\n  GenerationCommonConfigSchema: () => import_model.GenerationCommonConfigSchema,\n  GenerationResponseError: () => import_generate.GenerationResponseError,\n  Message: () => import_message.Message,\n  MessageSchema: () => import_model.MessageSchema,\n  ModelRequestSchema: () => import_model.ModelRequestSchema,\n  ModelResponseSchema: () => import_model.ModelResponseSchema,\n  PartSchema: () => import_model.PartSchema,\n  ResourceInputSchema: () => import_resource.ResourceInputSchema,\n  ResourceOutputSchema: () => import_resource.ResourceOutputSchema,\n  RoleSchema: () => import_model.RoleSchema,\n  ToolInterruptError: () => import_tool.ToolInterruptError,\n  asTool: () => import_tool.asTool,\n  checkOperation: () => import_check_operation.checkOperation,\n  defineHelper: () => import_prompt.defineHelper,\n  defineInterrupt: () => import_tool.defineInterrupt,\n  definePartial: () => import_prompt.definePartial,\n  definePrompt: () => import_prompt.definePrompt,\n  defineResource: () => import_resource.defineResource,\n  defineTool: () => import_tool.defineTool,\n  dynamicResource: () => import_resource.dynamicResource,\n  embed: () => import_embedder.embed,\n  embedderActionMetadata: () => import_embedder.embedderActionMetadata,\n  embedderRef: () => import_embedder.embedderRef,\n  evaluate: () => import_evaluator.evaluate,\n  evaluatorRef: () => import_evaluator.evaluatorRef,\n  generate: () => import_generate.generate,\n  generateOperation: () => import_generate.generateOperation,\n  generateStream: () => import_generate.generateStream,\n  index: () => import_retriever.index,\n  indexerRef: () => import_retriever.indexerRef,\n  interrupt: () => import_tool.interrupt,\n  isDynamicResourceAction: () => import_resource.isDynamicResourceAction,\n  isExecutablePrompt: () => import_prompt.isExecutablePrompt,\n  loadPromptFolder: () => import_prompt.loadPromptFolder,\n  modelActionMetadata: () => import_model.modelActionMetadata,\n  modelRef: () => import_model.modelRef,\n  prompt: () => import_prompt.prompt,\n  rerank: () => import_reranker.rerank,\n  rerankerRef: () => import_reranker.rerankerRef,\n  resource: () => import_resource.resource,\n  retrieve: () => import_retriever.retrieve,\n  retrieverRef: () => import_retriever.retrieverRef,\n  tagAsPreamble: () => import_generate.tagAsPreamble,\n  toGenerateRequest: () => import_generate.toGenerateRequest\n});\nmodule.exports = __toCommonJS(index_exports);\nvar import_check_operation = __webpack_require__(/*! ./check-operation.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/check-operation.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_embedder = __webpack_require__(/*! ./embedder.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js\");\nvar import_evaluator = __webpack_require__(/*! ./evaluator.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js\");\nvar import_generate = __webpack_require__(/*! ./generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_reranker = __webpack_require__(/*! ./reranker.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js\");\nvar import_resource = __webpack_require__(/*! ./resource.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/resource.js\");\nvar import_retriever = __webpack_require__(/*! ./retriever.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\n__reExport(index_exports, __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js\"), module.exports);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/message.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar message_exports = {};\n__export(message_exports, {\n  Message: () => Message\n});\nmodule.exports = __toCommonJS(message_exports);\nvar import_extract = __webpack_require__(/*! ./extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nclass Message {\n  role;\n  content;\n  metadata;\n  parser;\n  static parseData(lenientMessage, defaultRole = \"user\") {\n    if (typeof lenientMessage === \"string\") {\n      return { role: defaultRole, content: [{ text: lenientMessage }] };\n    }\n    return {\n      ...lenientMessage,\n      content: Message.parseContent(lenientMessage.content)\n    };\n  }\n  static parse(lenientMessage) {\n    return new Message(Message.parseData(lenientMessage));\n  }\n  static parseContent(lenientPart) {\n    if (typeof lenientPart === \"string\") {\n      return [{ text: lenientPart }];\n    } else if (Array.isArray(lenientPart)) {\n      return lenientPart.map((p) => typeof p === \"string\" ? { text: p } : p);\n    } else {\n      return [lenientPart];\n    }\n  }\n  constructor(message, options) {\n    this.role = message.role;\n    this.content = message.content;\n    this.metadata = message.metadata;\n    this.parser = options?.parser;\n  }\n  /**\n   * Attempts to parse the content of the message according to the supplied\n   * output parser. Without a parser, returns `data` contained in the message or\n   * tries to parse JSON from the text of the message.\n   *\n   * @returns The structured output contained in the message.\n   */\n  get output() {\n    return this.parser?.(this) || this.data || (0, import_extract.extractJson)(this.text);\n  }\n  toolResponseParts() {\n    const res = this.content.filter((part) => !!part.toolResponse);\n    return res;\n  }\n  /**\n   * Concatenates all `text` parts present in the message with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Concatenates all `reasoning` parts present in the message with no delimiter.\n   * @returns A string of all concatenated reasoning parts.\n   */\n  get reasoning() {\n    return this.content.map((part) => part.reasoning || \"\").join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the message. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the message.\n   */\n  get media() {\n    return this.content.find((part) => part.media)?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of a message.\n   * @returns The first `data` part detected in the message (if any).\n   */\n  get data() {\n    return this.content.find((part) => part.data)?.data;\n  }\n  /**\n   * Returns all tool request found in this message.\n   * @returns Array of all tool request found in this message.\n   */\n  get toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Returns all tool requests annotated with interrupt metadata.\n   * @returns Array of all interrupt tool requests.\n   */\n  get interrupts() {\n    return this.toolRequests.filter((t) => !!t.metadata?.interrupt);\n  }\n  /**\n   * Converts the Message to a plain JS object.\n   * @returns Plain JS object representing the data contained in the message.\n   */\n  toJSON() {\n    const out = {\n      role: this.role,\n      content: [...this.content]\n    };\n    if (this.metadata) out.metadata = this.metadata;\n    return out;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=message.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9tZXNzYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsK0VBQVc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtCQUErQixzQkFBc0I7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQkFBbUI7QUFDbkMsTUFBTTtBQUNOLDhEQUE4RCxVQUFVO0FBQ3hFLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL21lc3NhZ2UuanM/ZmNmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgbWVzc2FnZV9leHBvcnRzID0ge307XG5fX2V4cG9ydChtZXNzYWdlX2V4cG9ydHMsIHtcbiAgTWVzc2FnZTogKCkgPT4gTWVzc2FnZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhtZXNzYWdlX2V4cG9ydHMpO1xudmFyIGltcG9ydF9leHRyYWN0ID0gcmVxdWlyZShcIi4vZXh0cmFjdFwiKTtcbmNsYXNzIE1lc3NhZ2Uge1xuICByb2xlO1xuICBjb250ZW50O1xuICBtZXRhZGF0YTtcbiAgcGFyc2VyO1xuICBzdGF0aWMgcGFyc2VEYXRhKGxlbmllbnRNZXNzYWdlLCBkZWZhdWx0Um9sZSA9IFwidXNlclwiKSB7XG4gICAgaWYgKHR5cGVvZiBsZW5pZW50TWVzc2FnZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHsgcm9sZTogZGVmYXVsdFJvbGUsIGNvbnRlbnQ6IFt7IHRleHQ6IGxlbmllbnRNZXNzYWdlIH1dIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5sZW5pZW50TWVzc2FnZSxcbiAgICAgIGNvbnRlbnQ6IE1lc3NhZ2UucGFyc2VDb250ZW50KGxlbmllbnRNZXNzYWdlLmNvbnRlbnQpXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgcGFyc2UobGVuaWVudE1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2UoTWVzc2FnZS5wYXJzZURhdGEobGVuaWVudE1lc3NhZ2UpKTtcbiAgfVxuICBzdGF0aWMgcGFyc2VDb250ZW50KGxlbmllbnRQYXJ0KSB7XG4gICAgaWYgKHR5cGVvZiBsZW5pZW50UGFydCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIFt7IHRleHQ6IGxlbmllbnRQYXJ0IH1dO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShsZW5pZW50UGFydCkpIHtcbiAgICAgIHJldHVybiBsZW5pZW50UGFydC5tYXAoKHApID0+IHR5cGVvZiBwID09PSBcInN0cmluZ1wiID8geyB0ZXh0OiBwIH0gOiBwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtsZW5pZW50UGFydF07XG4gICAgfVxuICB9XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnJvbGUgPSBtZXNzYWdlLnJvbGU7XG4gICAgdGhpcy5jb250ZW50ID0gbWVzc2FnZS5jb250ZW50O1xuICAgIHRoaXMubWV0YWRhdGEgPSBtZXNzYWdlLm1ldGFkYXRhO1xuICAgIHRoaXMucGFyc2VyID0gb3B0aW9ucz8ucGFyc2VyO1xuICB9XG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byBwYXJzZSB0aGUgY29udGVudCBvZiB0aGUgbWVzc2FnZSBhY2NvcmRpbmcgdG8gdGhlIHN1cHBsaWVkXG4gICAqIG91dHB1dCBwYXJzZXIuIFdpdGhvdXQgYSBwYXJzZXIsIHJldHVybnMgYGRhdGFgIGNvbnRhaW5lZCBpbiB0aGUgbWVzc2FnZSBvclxuICAgKiB0cmllcyB0byBwYXJzZSBKU09OIGZyb20gdGhlIHRleHQgb2YgdGhlIG1lc3NhZ2UuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBzdHJ1Y3R1cmVkIG91dHB1dCBjb250YWluZWQgaW4gdGhlIG1lc3NhZ2UuXG4gICAqL1xuICBnZXQgb3V0cHV0KCkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlcj8uKHRoaXMpIHx8IHRoaXMuZGF0YSB8fCAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEpzb24pKHRoaXMudGV4dCk7XG4gIH1cbiAgdG9vbFJlc3BvbnNlUGFydHMoKSB7XG4gICAgY29uc3QgcmVzID0gdGhpcy5jb250ZW50LmZpbHRlcigocGFydCkgPT4gISFwYXJ0LnRvb2xSZXNwb25zZSk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICAvKipcbiAgICogQ29uY2F0ZW5hdGVzIGFsbCBgdGV4dGAgcGFydHMgcHJlc2VudCBpbiB0aGUgbWVzc2FnZSB3aXRoIG5vIGRlbGltaXRlci5cbiAgICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIGNvbmNhdGVuYXRlZCB0ZXh0IHBhcnRzLlxuICAgKi9cbiAgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5tYXAoKHBhcnQpID0+IHBhcnQudGV4dCB8fCBcIlwiKS5qb2luKFwiXCIpO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGByZWFzb25pbmdgIHBhcnRzIHByZXNlbnQgaW4gdGhlIG1lc3NhZ2Ugd2l0aCBubyBkZWxpbWl0ZXIuXG4gICAqIEByZXR1cm5zIEEgc3RyaW5nIG9mIGFsbCBjb25jYXRlbmF0ZWQgcmVhc29uaW5nIHBhcnRzLlxuICAgKi9cbiAgZ2V0IHJlYXNvbmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50Lm1hcCgocGFydCkgPT4gcGFydC5yZWFzb25pbmcgfHwgXCJcIikuam9pbihcIlwiKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgbWVkaWEgcGFydCBkZXRlY3RlZCBpbiB0aGUgbWVzc2FnZS4gVXNlZnVsIGZvciBleHRyYWN0aW5nXG4gICAqIChmb3IgZXhhbXBsZSkgYW4gaW1hZ2UgZnJvbSBhIGdlbmVyYXRpb24gZXhwZWN0ZWQgdG8gY3JlYXRlIG9uZS5cbiAgICogQHJldHVybnMgVGhlIGZpcnN0IGRldGVjdGVkIGBtZWRpYWAgcGFydCBpbiB0aGUgbWVzc2FnZS5cbiAgICovXG4gIGdldCBtZWRpYSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50LmZpbmQoKHBhcnQpID0+IHBhcnQubWVkaWEpPy5tZWRpYSB8fCBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBkZXRlY3RlZCBgZGF0YWAgcGFydCBvZiBhIG1lc3NhZ2UuXG4gICAqIEByZXR1cm5zIFRoZSBmaXJzdCBgZGF0YWAgcGFydCBkZXRlY3RlZCBpbiB0aGUgbWVzc2FnZSAoaWYgYW55KS5cbiAgICovXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQuZmluZCgocGFydCkgPT4gcGFydC5kYXRhKT8uZGF0YTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbGwgdG9vbCByZXF1ZXN0IGZvdW5kIGluIHRoaXMgbWVzc2FnZS5cbiAgICogQHJldHVybnMgQXJyYXkgb2YgYWxsIHRvb2wgcmVxdWVzdCBmb3VuZCBpbiB0aGlzIG1lc3NhZ2UuXG4gICAqL1xuICBnZXQgdG9vbFJlcXVlc3RzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQuZmlsdGVyKFxuICAgICAgKHBhcnQpID0+ICEhcGFydC50b29sUmVxdWVzdFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIHRvb2wgcmVxdWVzdHMgYW5ub3RhdGVkIHdpdGggaW50ZXJydXB0IG1ldGFkYXRhLlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiBhbGwgaW50ZXJydXB0IHRvb2wgcmVxdWVzdHMuXG4gICAqL1xuICBnZXQgaW50ZXJydXB0cygpIHtcbiAgICByZXR1cm4gdGhpcy50b29sUmVxdWVzdHMuZmlsdGVyKCh0KSA9PiAhIXQubWV0YWRhdGE/LmludGVycnVwdCk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBNZXNzYWdlIHRvIGEgcGxhaW4gSlMgb2JqZWN0LlxuICAgKiBAcmV0dXJucyBQbGFpbiBKUyBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBkYXRhIGNvbnRhaW5lZCBpbiB0aGUgbWVzc2FnZS5cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBvdXQgPSB7XG4gICAgICByb2xlOiB0aGlzLnJvbGUsXG4gICAgICBjb250ZW50OiBbLi4udGhpcy5jb250ZW50XVxuICAgIH07XG4gICAgaWYgKHRoaXMubWV0YWRhdGEpIG91dC5tZXRhZGF0YSA9IHRoaXMubWV0YWRhdGE7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIE1lc3NhZ2Vcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model-types.js":
/*!*******************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model-types.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar model_types_exports = {};\n__export(model_types_exports, {\n  CandidateErrorSchema: () => CandidateErrorSchema,\n  CandidateSchema: () => CandidateSchema,\n  FinishReasonSchema: () => FinishReasonSchema,\n  GenerateActionOptionsSchema: () => GenerateActionOptionsSchema,\n  GenerateActionOutputConfig: () => GenerateActionOutputConfig,\n  GenerateRequestSchema: () => GenerateRequestSchema,\n  GenerateResponseChunkSchema: () => GenerateResponseChunkSchema,\n  GenerateResponseSchema: () => GenerateResponseSchema,\n  GenerationCommonConfigDescriptions: () => GenerationCommonConfigDescriptions,\n  GenerationCommonConfigSchema: () => GenerationCommonConfigSchema,\n  GenerationUsageSchema: () => GenerationUsageSchema,\n  MessageSchema: () => MessageSchema,\n  ModelInfoSchema: () => ModelInfoSchema,\n  ModelRequestSchema: () => ModelRequestSchema,\n  ModelResponseChunkSchema: () => ModelResponseChunkSchema,\n  ModelResponseSchema: () => ModelResponseSchema,\n  OutputConfigSchema: () => OutputConfigSchema,\n  PartSchema: () => PartSchema,\n  RoleSchema: () => RoleSchema,\n  ToolDefinitionSchema: () => ToolDefinitionSchema\n});\nmodule.exports = __toCommonJS(model_types_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst PartSchema = import_core.z.union([\n  import_document.TextPartSchema,\n  import_document.MediaPartSchema,\n  import_document.ToolRequestPartSchema,\n  import_document.ToolResponsePartSchema,\n  import_document.DataPartSchema,\n  import_document.CustomPartSchema,\n  import_document.ReasoningPartSchema,\n  import_document.ResourcePartSchema\n]);\nconst RoleSchema = import_core.z.enum([\"system\", \"user\", \"model\", \"tool\"]);\nconst MessageSchema = import_core.z.object({\n  role: RoleSchema,\n  content: import_core.z.array(PartSchema),\n  metadata: import_core.z.record(import_core.z.unknown()).optional()\n});\nconst ModelInfoSchema = import_core.z.object({\n  /** Acceptable names for this model (e.g. different versions). */\n  versions: import_core.z.array(import_core.z.string()).optional(),\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: import_core.z.string().optional(),\n  /** Model Specific configuration. */\n  configSchema: import_core.z.record(import_core.z.any()).optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process historical messages passed with a prompt. */\n    multiturn: import_core.z.boolean().optional(),\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional(),\n    /** Model can perform tool calls. */\n    tools: import_core.z.boolean().optional(),\n    /** Model can accept messages with role \"system\". */\n    systemRole: import_core.z.boolean().optional(),\n    /** Model can output this type of data. */\n    output: import_core.z.array(import_core.z.string()).optional(),\n    /** Model supports output in these content types. */\n    contentType: import_core.z.array(import_core.z.string()).optional(),\n    /** Model can natively support document-based context grounding. */\n    context: import_core.z.boolean().optional(),\n    /** Model can natively support constrained generation. */\n    constrained: import_core.z.enum([\"none\", \"all\", \"no-tools\"]).optional(),\n    /** Model supports controlling tool choice, e.g. forced tool calling. */\n    toolChoice: import_core.z.boolean().optional()\n  }).optional(),\n  /** At which stage of development this model is.\n   * - `featured` models are recommended for general use.\n   * - `stable` models are well-tested and reliable.\n   * - `unstable` models are experimental and may change.\n   * - `legacy` models are no longer recommended for new projects.\n   * - `deprecated` models are deprecated by the provider and may be removed in future versions.\n   */\n  stage: import_core.z.enum([\"featured\", \"stable\", \"unstable\", \"legacy\", \"deprecated\"]).optional()\n});\nconst ToolDefinitionSchema = import_core.z.object({\n  name: import_core.z.string(),\n  description: import_core.z.string(),\n  inputSchema: import_core.z.record(import_core.z.any()).describe(\"Valid JSON Schema representing the input of the tool.\").nullish(),\n  outputSchema: import_core.z.record(import_core.z.any()).describe(\"Valid JSON Schema describing the output of the tool.\").nullish(),\n  metadata: import_core.z.record(import_core.z.any()).describe(\"additional metadata for this tool definition\").optional()\n});\nconst GenerationCommonConfigDescriptions = {\n  temperature: \"Controls the degree of randomness in token selection. A lower value is good for a more predictable response. A higher value leads to more diverse or unexpected results.\",\n  maxOutputTokens: \"The maximum number of tokens to include in the response.\",\n  topK: \"The maximum number of tokens to consider when sampling.\",\n  topP: \"Decides how many possible words to consider. A higher value means that the model looks at more possible words, even the less likely ones, which makes the generated text more diverse.\"\n};\nconst GenerationCommonConfigSchema = import_core.z.object({\n  version: import_core.z.string().describe(\n    \"A specific version of a model family, e.g. `gemini-2.0-flash` for the `googleai` family.\"\n  ).optional(),\n  temperature: import_core.z.number().describe(GenerationCommonConfigDescriptions.temperature).optional(),\n  maxOutputTokens: import_core.z.number().describe(GenerationCommonConfigDescriptions.maxOutputTokens).optional(),\n  topK: import_core.z.number().describe(GenerationCommonConfigDescriptions.topK).optional(),\n  topP: import_core.z.number().describe(GenerationCommonConfigDescriptions.topP).optional(),\n  stopSequences: import_core.z.array(import_core.z.string()).max(5).describe(\n    \"Set of character sequences (up to 5) that will stop output generation.\"\n  ).optional()\n}).passthrough();\nconst OutputConfigSchema = import_core.z.object({\n  format: import_core.z.string().optional(),\n  schema: import_core.z.record(import_core.z.any()).optional(),\n  constrained: import_core.z.boolean().optional(),\n  contentType: import_core.z.string().optional()\n});\nconst ModelRequestSchema = import_core.z.object({\n  messages: import_core.z.array(MessageSchema),\n  config: import_core.z.any().optional(),\n  tools: import_core.z.array(ToolDefinitionSchema).optional(),\n  toolChoice: import_core.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  output: OutputConfigSchema.optional(),\n  docs: import_core.z.array(import_document.DocumentDataSchema).optional()\n});\nconst GenerateRequestSchema = ModelRequestSchema.extend({\n  /** @deprecated All responses now return a single candidate. This will always be `undefined`. */\n  candidates: import_core.z.number().optional()\n});\nconst GenerationUsageSchema = import_core.z.object({\n  inputTokens: import_core.z.number().optional(),\n  outputTokens: import_core.z.number().optional(),\n  totalTokens: import_core.z.number().optional(),\n  inputCharacters: import_core.z.number().optional(),\n  outputCharacters: import_core.z.number().optional(),\n  inputImages: import_core.z.number().optional(),\n  outputImages: import_core.z.number().optional(),\n  inputVideos: import_core.z.number().optional(),\n  outputVideos: import_core.z.number().optional(),\n  inputAudioFiles: import_core.z.number().optional(),\n  outputAudioFiles: import_core.z.number().optional(),\n  custom: import_core.z.record(import_core.z.number()).optional(),\n  thoughtsTokens: import_core.z.number().optional(),\n  cachedContentTokens: import_core.z.number().optional()\n});\nconst FinishReasonSchema = import_core.z.enum([\n  \"stop\",\n  \"length\",\n  \"blocked\",\n  \"interrupted\",\n  \"other\",\n  \"unknown\"\n]);\nconst CandidateSchema = import_core.z.object({\n  index: import_core.z.number(),\n  message: MessageSchema,\n  usage: GenerationUsageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: import_core.z.string().optional(),\n  custom: import_core.z.unknown()\n});\nconst CandidateErrorSchema = import_core.z.object({\n  index: import_core.z.number(),\n  code: import_core.z.enum([\"blocked\", \"other\", \"unknown\"]),\n  message: import_core.z.string().optional()\n});\nconst ModelResponseSchema = import_core.z.object({\n  message: MessageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: import_core.z.string().optional(),\n  latencyMs: import_core.z.number().optional(),\n  usage: GenerationUsageSchema.optional(),\n  /** @deprecated use `raw` instead */\n  custom: import_core.z.unknown(),\n  raw: import_core.z.unknown(),\n  request: GenerateRequestSchema.optional(),\n  operation: import_core.OperationSchema.optional()\n});\nconst GenerateResponseSchema = ModelResponseSchema.extend({\n  /** @deprecated All responses now return a single candidate. Only the first candidate will be used if supplied. Return `message`, `finishReason`, and `finishMessage` instead. */\n  candidates: import_core.z.array(CandidateSchema).optional(),\n  finishReason: FinishReasonSchema.optional()\n});\nconst ModelResponseChunkSchema = import_core.z.object({\n  role: RoleSchema.optional(),\n  /** index of the message this chunk belongs to. */\n  index: import_core.z.number().optional(),\n  /** The chunk of content to stream right now. */\n  content: import_core.z.array(PartSchema),\n  /** Model-specific extra information attached to this chunk. */\n  custom: import_core.z.unknown().optional(),\n  /** If true, the chunk includes all data from previous chunks. Otherwise, considered to be incremental. */\n  aggregated: import_core.z.boolean().optional()\n});\nconst GenerateResponseChunkSchema = ModelResponseChunkSchema;\nconst GenerateActionOutputConfig = import_core.z.object({\n  format: import_core.z.string().optional(),\n  contentType: import_core.z.string().optional(),\n  instructions: import_core.z.union([import_core.z.boolean(), import_core.z.string()]).optional(),\n  jsonSchema: import_core.z.any().optional(),\n  constrained: import_core.z.boolean().optional()\n});\nconst GenerateActionOptionsSchema = import_core.z.object({\n  /** A model name (e.g. `vertexai/gemini-1.0-pro`). */\n  model: import_core.z.string(),\n  /** Retrieved documents to be used as context for this generation. */\n  docs: import_core.z.array(import_document.DocumentDataSchema).optional(),\n  /** Conversation history for multi-turn prompting when supported by the underlying model. */\n  messages: import_core.z.array(MessageSchema),\n  /** List of registered tool names for this generation if supported by the underlying model. */\n  tools: import_core.z.array(import_core.z.string()).optional(),\n  /** List of registered resource names for this generation if supported by the underlying model. */\n  resources: import_core.z.array(import_core.z.string()).optional(),\n  /** Tool calling mode. `auto` lets the model decide whether to use tools, `required` forces the model to choose a tool, and `none` forces the model not to use any tools. Defaults to `auto`.  */\n  toolChoice: import_core.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  /** Configuration for the generation request. */\n  config: import_core.z.any().optional(),\n  /** Configuration for the desired output of the request. Defaults to the model's default output if unspecified. */\n  output: GenerateActionOutputConfig.optional(),\n  /** Options for resuming an interrupted generation. */\n  resume: import_core.z.object({\n    respond: import_core.z.array(import_document.ToolResponsePartSchema).optional(),\n    restart: import_core.z.array(import_document.ToolRequestPartSchema).optional(),\n    metadata: import_core.z.record(import_core.z.any()).optional()\n  }).optional(),\n  /** When true, return tool calls for manual processing instead of automatically resolving them. */\n  returnToolRequests: import_core.z.boolean().optional(),\n  /** Maximum number of tool call iterations that can be performed in a single generate call (default 5). */\n  maxTurns: import_core.z.number().optional(),\n  /** Custom step name for this generate call to display in trace views. Defaults to \"generate\". */\n  stepName: import_core.z.string().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=model-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model-types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar model_exports = {};\n__export(model_exports, {\n  CustomPartSchema: () => import_document.CustomPartSchema,\n  DataPartSchema: () => import_document.DataPartSchema,\n  MediaPartSchema: () => import_document.MediaPartSchema,\n  TextPartSchema: () => import_document.TextPartSchema,\n  ToolRequestPartSchema: () => import_document.ToolRequestPartSchema,\n  ToolResponsePartSchema: () => import_document.ToolResponsePartSchema,\n  backgroundModel: () => backgroundModel,\n  defineBackgroundModel: () => defineBackgroundModel,\n  defineGenerateAction: () => import_action.defineGenerateAction,\n  defineModel: () => defineModel,\n  getBasicUsageStats: () => getBasicUsageStats,\n  model: () => model,\n  modelActionMetadata: () => modelActionMetadata,\n  modelRef: () => modelRef,\n  resolveModel: () => resolveModel,\n  simulateConstrainedGeneration: () => import_middleware.simulateConstrainedGeneration\n});\nmodule.exports = __toCommonJS(model_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_model_types = __webpack_require__(/*! ./model-types.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model-types.js\");\nvar import_middleware = __webpack_require__(/*! ./model/middleware.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\");\nvar import_action = __webpack_require__(/*! ./generate/action.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\");\n__reExport(model_exports, __webpack_require__(/*! ./model-types.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model-types.js\"), module.exports);\nfunction model(options, runner) {\n  const act = (0, import_core.action)(modelActionOptions(options), (input, ctx) => {\n    const startTimeMs = import_node_perf_hooks.performance.now();\n    return runner(input, ctx).then((response) => {\n      const timedResponse = {\n        ...response,\n        latencyMs: import_node_perf_hooks.performance.now() - startTimeMs\n      };\n      return timedResponse;\n    });\n  });\n  Object.assign(act, {\n    __configSchema: options.configSchema || import_core.z.unknown()\n  });\n  return act;\n}\nfunction modelActionOptions(options) {\n  const label = options.label || options.name;\n  const middleware = getModelMiddleware(options);\n  return {\n    actionType: \"model\",\n    name: options.name,\n    description: label,\n    inputSchema: import_model_types.GenerateRequestSchema,\n    outputSchema: import_model_types.GenerateResponseSchema,\n    metadata: {\n      model: {\n        label,\n        customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0,\n        versions: options.versions,\n        supports: options.supports\n      }\n    },\n    use: middleware\n  };\n}\nfunction defineModel(registry, options, runner) {\n  const act = (0, import_core.defineAction)(\n    registry,\n    modelActionOptions(options),\n    (input, ctx) => {\n      const startTimeMs = import_node_perf_hooks.performance.now();\n      const secondParam = options.apiVersion === \"v2\" ? ctx : ctx.streamingRequested ? ctx.sendChunk : void 0;\n      return runner(input, secondParam).then((response) => {\n        const timedResponse = {\n          ...response,\n          latencyMs: import_node_perf_hooks.performance.now() - startTimeMs\n        };\n        return timedResponse;\n      });\n    }\n  );\n  Object.assign(act, {\n    __configSchema: options.configSchema || import_core.z.unknown()\n  });\n  return act;\n}\nfunction defineBackgroundModel(registry, options) {\n  const act = backgroundModel(options);\n  (0, import_core.registerBackgroundAction)(registry, act);\n  return act;\n}\nfunction backgroundModel(options) {\n  const label = options.label || options.name;\n  const middleware = getModelMiddleware(options);\n  const act = (0, import_core.backgroundAction)({\n    actionType: \"background-model\",\n    name: options.name,\n    description: label,\n    inputSchema: import_model_types.GenerateRequestSchema,\n    outputSchema: import_model_types.GenerateResponseSchema,\n    metadata: {\n      model: {\n        label,\n        customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0,\n        versions: options.versions,\n        supports: options.supports\n      }\n    },\n    use: middleware,\n    async start(request) {\n      const startTimeMs = import_node_perf_hooks.performance.now();\n      const response = await options.start(request);\n      Object.assign(response, {\n        latencyMs: import_node_perf_hooks.performance.now() - startTimeMs\n      });\n      return response;\n    },\n    async check(op) {\n      return options.check(op);\n    },\n    cancel: options.cancel ? async (op) => {\n      if (!options.cancel) {\n        throw new import_core.GenkitError({\n          status: \"UNIMPLEMENTED\",\n          message: \"cancel not implemented\"\n        });\n      }\n      return options.cancel(op);\n    } : void 0\n  });\n  Object.assign(act, {\n    __configSchema: options.configSchema || import_core.z.unknown()\n  });\n  return act;\n}\nfunction getModelMiddleware(options) {\n  const middleware = options.use || [];\n  if (!options?.supports?.context) middleware.push((0, import_middleware.augmentWithContext)());\n  const constratedSimulator = (0, import_middleware.simulateConstrainedGeneration)();\n  middleware.push((req, next) => {\n    if (!options?.supports?.constrained || options?.supports?.constrained === \"none\" || options?.supports?.constrained === \"no-tools\" && (req.tools?.length ?? 0) > 0) {\n      return constratedSimulator(req, next);\n    }\n    return next(req);\n  });\n  return middleware;\n}\nfunction modelActionMetadata({\n  name,\n  info,\n  configSchema,\n  background\n}) {\n  return {\n    actionType: background ? \"background-model\" : \"model\",\n    name,\n    inputJsonSchema: (0, import_schema.toJsonSchema)({ schema: import_model_types.GenerateRequestSchema }),\n    outputJsonSchema: background ? (0, import_schema.toJsonSchema)({ schema: import_core.OperationSchema }) : (0, import_schema.toJsonSchema)({ schema: import_model_types.GenerateResponseSchema }),\n    metadata: {\n      model: {\n        ...info,\n        customOptions: configSchema ? (0, import_schema.toJsonSchema)({ schema: configSchema }) : void 0\n      }\n    }\n  };\n}\nfunction modelRef(options) {\n  let name = options.name;\n  if (options.namespace && !name.startsWith(options.namespace + \"/\")) {\n    name = `${options.namespace}/${name}`;\n  }\n  const ref = {\n    ...options,\n    name\n  };\n  ref.withConfig = (cfg) => {\n    return modelRef({\n      ...options,\n      name,\n      config: cfg\n    });\n  };\n  ref.withVersion = (version) => {\n    return modelRef({\n      ...options,\n      name,\n      version\n    });\n  };\n  return ref;\n}\nfunction getBasicUsageStats(input, response) {\n  const inputCounts = getPartCounts(input.flatMap((md) => md.content));\n  const outputCounts = getPartCounts(\n    Array.isArray(response) ? response.flatMap((c) => c.message.content) : response.content\n  );\n  return {\n    inputCharacters: inputCounts.characters,\n    inputImages: inputCounts.images,\n    inputVideos: inputCounts.videos,\n    inputAudioFiles: inputCounts.audio,\n    outputCharacters: outputCounts.characters,\n    outputImages: outputCounts.images,\n    outputVideos: outputCounts.videos,\n    outputAudioFiles: outputCounts.audio\n  };\n}\nfunction getPartCounts(parts) {\n  return parts.reduce(\n    (counts, part) => {\n      const isImage = part.media?.contentType?.startsWith(\"image\") || part.media?.url?.startsWith(\"data:image\");\n      const isVideo = part.media?.contentType?.startsWith(\"video\") || part.media?.url?.startsWith(\"data:video\");\n      const isAudio = part.media?.contentType?.startsWith(\"audio\") || part.media?.url?.startsWith(\"data:audio\");\n      return {\n        characters: counts.characters + (part.text?.length || 0),\n        images: counts.images + (isImage ? 1 : 0),\n        videos: counts.videos + (isVideo ? 1 : 0),\n        audio: counts.audio + (isAudio ? 1 : 0)\n      };\n    },\n    { characters: 0, images: 0, videos: 0, audio: 0 }\n  );\n}\nasync function resolveModel(registry, model2, options) {\n  let out;\n  let modelId;\n  if (!model2) {\n    model2 = await registry.lookupValue(\"defaultModel\", \"defaultModel\");\n  }\n  if (!model2) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"Must supply a `model` to `generate()` calls.\"\n    });\n  }\n  if (typeof model2 === \"string\") {\n    modelId = model2;\n    out = { modelAction: await lookupModel(registry, model2) };\n  } else if (model2.hasOwnProperty(\"__action\")) {\n    modelId = model2.__action.name;\n    out = { modelAction: model2 };\n  } else {\n    const ref = model2;\n    modelId = ref.name;\n    out = {\n      modelAction: await lookupModel(registry, ref.name),\n      config: {\n        ...ref.config\n      },\n      version: ref.version\n    };\n  }\n  if (!out.modelAction) {\n    throw new import_core.GenkitError({\n      status: \"NOT_FOUND\",\n      message: `Model '${modelId}' not found`\n    });\n  }\n  if (options?.warnDeprecated && out.modelAction.__action.metadata?.model?.stage === \"deprecated\") {\n    import_logging.logger.warn(\n      `Model '${out.modelAction.__action.name}' is deprecated and may be removed in a future release.`\n    );\n  }\n  return out;\n}\nasync function lookupModel(registry, model2) {\n  return await registry.lookupAction(`/model/${model2}`) || await registry.lookupAction(`/background-model/${model2}`);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=model.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9tb2RlbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMscUZBQWlCO0FBQzNDLHFCQUFxQixtQkFBTyxDQUFDLCtGQUF5QjtBQUN0RCxvQkFBb0IsbUJBQU8sQ0FBQyw2RkFBd0I7QUFDcEQsNkJBQTZCLG1CQUFPLENBQUMsd0NBQWlCO0FBQ3RELHNCQUFzQixtQkFBTyxDQUFDLG9GQUFlO0FBQzdDLHlCQUF5QixtQkFBTyxDQUFDLDBGQUFrQjtBQUNuRCx3QkFBd0IsbUJBQU8sQ0FBQyxvR0FBdUI7QUFDdkQsb0JBQW9CLG1CQUFPLENBQUMsa0dBQXNCO0FBQ2xELDBCQUEwQixtQkFBTyxDQUFDLDBGQUFrQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRiw4QkFBOEI7QUFDOUc7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLDhCQUE4QjtBQUM5RztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsTUFBTTtBQUNOLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGtEQUFrRDtBQUN6RyxxRUFBcUUscUNBQXFDLHNDQUFzQyxtREFBbUQ7QUFDbk07QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLHNCQUFzQjtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsa0JBQWtCLEdBQUcsS0FBSztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osSUFBSTtBQUNKO0FBQ0EsWUFBWTtBQUNaLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFFBQVE7QUFDakMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxPQUFPLHVEQUF1RCxPQUFPO0FBQ3BIO0FBQ0E7QUFDQSxNQUFNLENBa0JMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvbW9kZWwuanM/ZmE0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fcmVFeHBvcnQgPSAodGFyZ2V0LCBtb2QsIHNlY29uZFRhcmdldCkgPT4gKF9fY29weVByb3BzKHRhcmdldCwgbW9kLCBcImRlZmF1bHRcIiksIHNlY29uZFRhcmdldCAmJiBfX2NvcHlQcm9wcyhzZWNvbmRUYXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIG1vZGVsX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KG1vZGVsX2V4cG9ydHMsIHtcbiAgQ3VzdG9tUGFydFNjaGVtYTogKCkgPT4gaW1wb3J0X2RvY3VtZW50LkN1c3RvbVBhcnRTY2hlbWEsXG4gIERhdGFQYXJ0U2NoZW1hOiAoKSA9PiBpbXBvcnRfZG9jdW1lbnQuRGF0YVBhcnRTY2hlbWEsXG4gIE1lZGlhUGFydFNjaGVtYTogKCkgPT4gaW1wb3J0X2RvY3VtZW50Lk1lZGlhUGFydFNjaGVtYSxcbiAgVGV4dFBhcnRTY2hlbWE6ICgpID0+IGltcG9ydF9kb2N1bWVudC5UZXh0UGFydFNjaGVtYSxcbiAgVG9vbFJlcXVlc3RQYXJ0U2NoZW1hOiAoKSA9PiBpbXBvcnRfZG9jdW1lbnQuVG9vbFJlcXVlc3RQYXJ0U2NoZW1hLFxuICBUb29sUmVzcG9uc2VQYXJ0U2NoZW1hOiAoKSA9PiBpbXBvcnRfZG9jdW1lbnQuVG9vbFJlc3BvbnNlUGFydFNjaGVtYSxcbiAgYmFja2dyb3VuZE1vZGVsOiAoKSA9PiBiYWNrZ3JvdW5kTW9kZWwsXG4gIGRlZmluZUJhY2tncm91bmRNb2RlbDogKCkgPT4gZGVmaW5lQmFja2dyb3VuZE1vZGVsLFxuICBkZWZpbmVHZW5lcmF0ZUFjdGlvbjogKCkgPT4gaW1wb3J0X2FjdGlvbi5kZWZpbmVHZW5lcmF0ZUFjdGlvbixcbiAgZGVmaW5lTW9kZWw6ICgpID0+IGRlZmluZU1vZGVsLFxuICBnZXRCYXNpY1VzYWdlU3RhdHM6ICgpID0+IGdldEJhc2ljVXNhZ2VTdGF0cyxcbiAgbW9kZWw6ICgpID0+IG1vZGVsLFxuICBtb2RlbEFjdGlvbk1ldGFkYXRhOiAoKSA9PiBtb2RlbEFjdGlvbk1ldGFkYXRhLFxuICBtb2RlbFJlZjogKCkgPT4gbW9kZWxSZWYsXG4gIHJlc29sdmVNb2RlbDogKCkgPT4gcmVzb2x2ZU1vZGVsLFxuICBzaW11bGF0ZUNvbnN0cmFpbmVkR2VuZXJhdGlvbjogKCkgPT4gaW1wb3J0X21pZGRsZXdhcmUuc2ltdWxhdGVDb25zdHJhaW5lZEdlbmVyYXRpb25cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMobW9kZWxfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xudmFyIGltcG9ydF9sb2dnaW5nID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZS9sb2dnaW5nXCIpO1xudmFyIGltcG9ydF9zY2hlbWEgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlL3NjaGVtYVwiKTtcbnZhciBpbXBvcnRfbm9kZV9wZXJmX2hvb2tzID0gcmVxdWlyZShcIm5vZGU6cGVyZl9ob29rc1wiKTtcbnZhciBpbXBvcnRfZG9jdW1lbnQgPSByZXF1aXJlKFwiLi9kb2N1bWVudC5qc1wiKTtcbnZhciBpbXBvcnRfbW9kZWxfdHlwZXMgPSByZXF1aXJlKFwiLi9tb2RlbC10eXBlcy5qc1wiKTtcbnZhciBpbXBvcnRfbWlkZGxld2FyZSA9IHJlcXVpcmUoXCIuL21vZGVsL21pZGRsZXdhcmUuanNcIik7XG52YXIgaW1wb3J0X2FjdGlvbiA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlL2FjdGlvbi5qc1wiKTtcbl9fcmVFeHBvcnQobW9kZWxfZXhwb3J0cywgcmVxdWlyZShcIi4vbW9kZWwtdHlwZXMuanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbmZ1bmN0aW9uIG1vZGVsKG9wdGlvbnMsIHJ1bm5lcikge1xuICBjb25zdCBhY3QgPSAoMCwgaW1wb3J0X2NvcmUuYWN0aW9uKShtb2RlbEFjdGlvbk9wdGlvbnMob3B0aW9ucyksIChpbnB1dCwgY3R4KSA9PiB7XG4gICAgY29uc3Qgc3RhcnRUaW1lTXMgPSBpbXBvcnRfbm9kZV9wZXJmX2hvb2tzLnBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJldHVybiBydW5uZXIoaW5wdXQsIGN0eCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGNvbnN0IHRpbWVkUmVzcG9uc2UgPSB7XG4gICAgICAgIC4uLnJlc3BvbnNlLFxuICAgICAgICBsYXRlbmN5TXM6IGltcG9ydF9ub2RlX3BlcmZfaG9va3MucGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWVNc1xuICAgICAgfTtcbiAgICAgIHJldHVybiB0aW1lZFJlc3BvbnNlO1xuICAgIH0pO1xuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihhY3QsIHtcbiAgICBfX2NvbmZpZ1NjaGVtYTogb3B0aW9ucy5jb25maWdTY2hlbWEgfHwgaW1wb3J0X2NvcmUuei51bmtub3duKClcbiAgfSk7XG4gIHJldHVybiBhY3Q7XG59XG5mdW5jdGlvbiBtb2RlbEFjdGlvbk9wdGlvbnMob3B0aW9ucykge1xuICBjb25zdCBsYWJlbCA9IG9wdGlvbnMubGFiZWwgfHwgb3B0aW9ucy5uYW1lO1xuICBjb25zdCBtaWRkbGV3YXJlID0gZ2V0TW9kZWxNaWRkbGV3YXJlKG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIGFjdGlvblR5cGU6IFwibW9kZWxcIixcbiAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgZGVzY3JpcHRpb246IGxhYmVsLFxuICAgIGlucHV0U2NoZW1hOiBpbXBvcnRfbW9kZWxfdHlwZXMuR2VuZXJhdGVSZXF1ZXN0U2NoZW1hLFxuICAgIG91dHB1dFNjaGVtYTogaW1wb3J0X21vZGVsX3R5cGVzLkdlbmVyYXRlUmVzcG9uc2VTY2hlbWEsXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIG1vZGVsOiB7XG4gICAgICAgIGxhYmVsLFxuICAgICAgICBjdXN0b21PcHRpb25zOiBvcHRpb25zLmNvbmZpZ1NjaGVtYSA/ICgwLCBpbXBvcnRfc2NoZW1hLnRvSnNvblNjaGVtYSkoeyBzY2hlbWE6IG9wdGlvbnMuY29uZmlnU2NoZW1hIH0pIDogdm9pZCAwLFxuICAgICAgICB2ZXJzaW9uczogb3B0aW9ucy52ZXJzaW9ucyxcbiAgICAgICAgc3VwcG9ydHM6IG9wdGlvbnMuc3VwcG9ydHNcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZTogbWlkZGxld2FyZVxuICB9O1xufVxuZnVuY3Rpb24gZGVmaW5lTW9kZWwocmVnaXN0cnksIG9wdGlvbnMsIHJ1bm5lcikge1xuICBjb25zdCBhY3QgPSAoMCwgaW1wb3J0X2NvcmUuZGVmaW5lQWN0aW9uKShcbiAgICByZWdpc3RyeSxcbiAgICBtb2RlbEFjdGlvbk9wdGlvbnMob3B0aW9ucyksXG4gICAgKGlucHV0LCBjdHgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXJ0VGltZU1zID0gaW1wb3J0X25vZGVfcGVyZl9ob29rcy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGNvbnN0IHNlY29uZFBhcmFtID0gb3B0aW9ucy5hcGlWZXJzaW9uID09PSBcInYyXCIgPyBjdHggOiBjdHguc3RyZWFtaW5nUmVxdWVzdGVkID8gY3R4LnNlbmRDaHVuayA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBydW5uZXIoaW5wdXQsIHNlY29uZFBhcmFtKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBjb25zdCB0aW1lZFJlc3BvbnNlID0ge1xuICAgICAgICAgIC4uLnJlc3BvbnNlLFxuICAgICAgICAgIGxhdGVuY3lNczogaW1wb3J0X25vZGVfcGVyZl9ob29rcy5wZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZU1zXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aW1lZFJlc3BvbnNlO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xuICBPYmplY3QuYXNzaWduKGFjdCwge1xuICAgIF9fY29uZmlnU2NoZW1hOiBvcHRpb25zLmNvbmZpZ1NjaGVtYSB8fCBpbXBvcnRfY29yZS56LnVua25vd24oKVxuICB9KTtcbiAgcmV0dXJuIGFjdDtcbn1cbmZ1bmN0aW9uIGRlZmluZUJhY2tncm91bmRNb2RlbChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBjb25zdCBhY3QgPSBiYWNrZ3JvdW5kTW9kZWwob3B0aW9ucyk7XG4gICgwLCBpbXBvcnRfY29yZS5yZWdpc3RlckJhY2tncm91bmRBY3Rpb24pKHJlZ2lzdHJ5LCBhY3QpO1xuICByZXR1cm4gYWN0O1xufVxuZnVuY3Rpb24gYmFja2dyb3VuZE1vZGVsKG9wdGlvbnMpIHtcbiAgY29uc3QgbGFiZWwgPSBvcHRpb25zLmxhYmVsIHx8IG9wdGlvbnMubmFtZTtcbiAgY29uc3QgbWlkZGxld2FyZSA9IGdldE1vZGVsTWlkZGxld2FyZShvcHRpb25zKTtcbiAgY29uc3QgYWN0ID0gKDAsIGltcG9ydF9jb3JlLmJhY2tncm91bmRBY3Rpb24pKHtcbiAgICBhY3Rpb25UeXBlOiBcImJhY2tncm91bmQtbW9kZWxcIixcbiAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgZGVzY3JpcHRpb246IGxhYmVsLFxuICAgIGlucHV0U2NoZW1hOiBpbXBvcnRfbW9kZWxfdHlwZXMuR2VuZXJhdGVSZXF1ZXN0U2NoZW1hLFxuICAgIG91dHB1dFNjaGVtYTogaW1wb3J0X21vZGVsX3R5cGVzLkdlbmVyYXRlUmVzcG9uc2VTY2hlbWEsXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIG1vZGVsOiB7XG4gICAgICAgIGxhYmVsLFxuICAgICAgICBjdXN0b21PcHRpb25zOiBvcHRpb25zLmNvbmZpZ1NjaGVtYSA/ICgwLCBpbXBvcnRfc2NoZW1hLnRvSnNvblNjaGVtYSkoeyBzY2hlbWE6IG9wdGlvbnMuY29uZmlnU2NoZW1hIH0pIDogdm9pZCAwLFxuICAgICAgICB2ZXJzaW9uczogb3B0aW9ucy52ZXJzaW9ucyxcbiAgICAgICAgc3VwcG9ydHM6IG9wdGlvbnMuc3VwcG9ydHNcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZTogbWlkZGxld2FyZSxcbiAgICBhc3luYyBzdGFydChyZXF1ZXN0KSB7XG4gICAgICBjb25zdCBzdGFydFRpbWVNcyA9IGltcG9ydF9ub2RlX3BlcmZfaG9va3MucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG9wdGlvbnMuc3RhcnQocmVxdWVzdCk7XG4gICAgICBPYmplY3QuYXNzaWduKHJlc3BvbnNlLCB7XG4gICAgICAgIGxhdGVuY3lNczogaW1wb3J0X25vZGVfcGVyZl9ob29rcy5wZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZU1zXG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxuICAgIGFzeW5jIGNoZWNrKG9wKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5jaGVjayhvcCk7XG4gICAgfSxcbiAgICBjYW5jZWw6IG9wdGlvbnMuY2FuY2VsID8gYXN5bmMgKG9wKSA9PiB7XG4gICAgICBpZiAoIW9wdGlvbnMuY2FuY2VsKSB7XG4gICAgICAgIHRocm93IG5ldyBpbXBvcnRfY29yZS5HZW5raXRFcnJvcih7XG4gICAgICAgICAgc3RhdHVzOiBcIlVOSU1QTEVNRU5URURcIixcbiAgICAgICAgICBtZXNzYWdlOiBcImNhbmNlbCBub3QgaW1wbGVtZW50ZWRcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25zLmNhbmNlbChvcCk7XG4gICAgfSA6IHZvaWQgMFxuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihhY3QsIHtcbiAgICBfX2NvbmZpZ1NjaGVtYTogb3B0aW9ucy5jb25maWdTY2hlbWEgfHwgaW1wb3J0X2NvcmUuei51bmtub3duKClcbiAgfSk7XG4gIHJldHVybiBhY3Q7XG59XG5mdW5jdGlvbiBnZXRNb2RlbE1pZGRsZXdhcmUob3B0aW9ucykge1xuICBjb25zdCBtaWRkbGV3YXJlID0gb3B0aW9ucy51c2UgfHwgW107XG4gIGlmICghb3B0aW9ucz8uc3VwcG9ydHM/LmNvbnRleHQpIG1pZGRsZXdhcmUucHVzaCgoMCwgaW1wb3J0X21pZGRsZXdhcmUuYXVnbWVudFdpdGhDb250ZXh0KSgpKTtcbiAgY29uc3QgY29uc3RyYXRlZFNpbXVsYXRvciA9ICgwLCBpbXBvcnRfbWlkZGxld2FyZS5zaW11bGF0ZUNvbnN0cmFpbmVkR2VuZXJhdGlvbikoKTtcbiAgbWlkZGxld2FyZS5wdXNoKChyZXEsIG5leHQpID0+IHtcbiAgICBpZiAoIW9wdGlvbnM/LnN1cHBvcnRzPy5jb25zdHJhaW5lZCB8fCBvcHRpb25zPy5zdXBwb3J0cz8uY29uc3RyYWluZWQgPT09IFwibm9uZVwiIHx8IG9wdGlvbnM/LnN1cHBvcnRzPy5jb25zdHJhaW5lZCA9PT0gXCJuby10b29sc1wiICYmIChyZXEudG9vbHM/Lmxlbmd0aCA/PyAwKSA+IDApIHtcbiAgICAgIHJldHVybiBjb25zdHJhdGVkU2ltdWxhdG9yKHJlcSwgbmV4dCk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0KHJlcSk7XG4gIH0pO1xuICByZXR1cm4gbWlkZGxld2FyZTtcbn1cbmZ1bmN0aW9uIG1vZGVsQWN0aW9uTWV0YWRhdGEoe1xuICBuYW1lLFxuICBpbmZvLFxuICBjb25maWdTY2hlbWEsXG4gIGJhY2tncm91bmRcbn0pIHtcbiAgcmV0dXJuIHtcbiAgICBhY3Rpb25UeXBlOiBiYWNrZ3JvdW5kID8gXCJiYWNrZ3JvdW5kLW1vZGVsXCIgOiBcIm1vZGVsXCIsXG4gICAgbmFtZSxcbiAgICBpbnB1dEpzb25TY2hlbWE6ICgwLCBpbXBvcnRfc2NoZW1hLnRvSnNvblNjaGVtYSkoeyBzY2hlbWE6IGltcG9ydF9tb2RlbF90eXBlcy5HZW5lcmF0ZVJlcXVlc3RTY2hlbWEgfSksXG4gICAgb3V0cHV0SnNvblNjaGVtYTogYmFja2dyb3VuZCA/ICgwLCBpbXBvcnRfc2NoZW1hLnRvSnNvblNjaGVtYSkoeyBzY2hlbWE6IGltcG9ydF9jb3JlLk9wZXJhdGlvblNjaGVtYSB9KSA6ICgwLCBpbXBvcnRfc2NoZW1hLnRvSnNvblNjaGVtYSkoeyBzY2hlbWE6IGltcG9ydF9tb2RlbF90eXBlcy5HZW5lcmF0ZVJlc3BvbnNlU2NoZW1hIH0pLFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICBtb2RlbDoge1xuICAgICAgICAuLi5pbmZvLFxuICAgICAgICBjdXN0b21PcHRpb25zOiBjb25maWdTY2hlbWEgPyAoMCwgaW1wb3J0X3NjaGVtYS50b0pzb25TY2hlbWEpKHsgc2NoZW1hOiBjb25maWdTY2hlbWEgfSkgOiB2b2lkIDBcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBtb2RlbFJlZihvcHRpb25zKSB7XG4gIGxldCBuYW1lID0gb3B0aW9ucy5uYW1lO1xuICBpZiAob3B0aW9ucy5uYW1lc3BhY2UgJiYgIW5hbWUuc3RhcnRzV2l0aChvcHRpb25zLm5hbWVzcGFjZSArIFwiL1wiKSkge1xuICAgIG5hbWUgPSBgJHtvcHRpb25zLm5hbWVzcGFjZX0vJHtuYW1lfWA7XG4gIH1cbiAgY29uc3QgcmVmID0ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgbmFtZVxuICB9O1xuICByZWYud2l0aENvbmZpZyA9IChjZmcpID0+IHtcbiAgICByZXR1cm4gbW9kZWxSZWYoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIG5hbWUsXG4gICAgICBjb25maWc6IGNmZ1xuICAgIH0pO1xuICB9O1xuICByZWYud2l0aFZlcnNpb24gPSAodmVyc2lvbikgPT4ge1xuICAgIHJldHVybiBtb2RlbFJlZih7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgbmFtZSxcbiAgICAgIHZlcnNpb25cbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHJlZjtcbn1cbmZ1bmN0aW9uIGdldEJhc2ljVXNhZ2VTdGF0cyhpbnB1dCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgaW5wdXRDb3VudHMgPSBnZXRQYXJ0Q291bnRzKGlucHV0LmZsYXRNYXAoKG1kKSA9PiBtZC5jb250ZW50KSk7XG4gIGNvbnN0IG91dHB1dENvdW50cyA9IGdldFBhcnRDb3VudHMoXG4gICAgQXJyYXkuaXNBcnJheShyZXNwb25zZSkgPyByZXNwb25zZS5mbGF0TWFwKChjKSA9PiBjLm1lc3NhZ2UuY29udGVudCkgOiByZXNwb25zZS5jb250ZW50XG4gICk7XG4gIHJldHVybiB7XG4gICAgaW5wdXRDaGFyYWN0ZXJzOiBpbnB1dENvdW50cy5jaGFyYWN0ZXJzLFxuICAgIGlucHV0SW1hZ2VzOiBpbnB1dENvdW50cy5pbWFnZXMsXG4gICAgaW5wdXRWaWRlb3M6IGlucHV0Q291bnRzLnZpZGVvcyxcbiAgICBpbnB1dEF1ZGlvRmlsZXM6IGlucHV0Q291bnRzLmF1ZGlvLFxuICAgIG91dHB1dENoYXJhY3RlcnM6IG91dHB1dENvdW50cy5jaGFyYWN0ZXJzLFxuICAgIG91dHB1dEltYWdlczogb3V0cHV0Q291bnRzLmltYWdlcyxcbiAgICBvdXRwdXRWaWRlb3M6IG91dHB1dENvdW50cy52aWRlb3MsXG4gICAgb3V0cHV0QXVkaW9GaWxlczogb3V0cHV0Q291bnRzLmF1ZGlvXG4gIH07XG59XG5mdW5jdGlvbiBnZXRQYXJ0Q291bnRzKHBhcnRzKSB7XG4gIHJldHVybiBwYXJ0cy5yZWR1Y2UoXG4gICAgKGNvdW50cywgcGFydCkgPT4ge1xuICAgICAgY29uc3QgaXNJbWFnZSA9IHBhcnQubWVkaWE/LmNvbnRlbnRUeXBlPy5zdGFydHNXaXRoKFwiaW1hZ2VcIikgfHwgcGFydC5tZWRpYT8udXJsPy5zdGFydHNXaXRoKFwiZGF0YTppbWFnZVwiKTtcbiAgICAgIGNvbnN0IGlzVmlkZW8gPSBwYXJ0Lm1lZGlhPy5jb250ZW50VHlwZT8uc3RhcnRzV2l0aChcInZpZGVvXCIpIHx8IHBhcnQubWVkaWE/LnVybD8uc3RhcnRzV2l0aChcImRhdGE6dmlkZW9cIik7XG4gICAgICBjb25zdCBpc0F1ZGlvID0gcGFydC5tZWRpYT8uY29udGVudFR5cGU/LnN0YXJ0c1dpdGgoXCJhdWRpb1wiKSB8fCBwYXJ0Lm1lZGlhPy51cmw/LnN0YXJ0c1dpdGgoXCJkYXRhOmF1ZGlvXCIpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2hhcmFjdGVyczogY291bnRzLmNoYXJhY3RlcnMgKyAocGFydC50ZXh0Py5sZW5ndGggfHwgMCksXG4gICAgICAgIGltYWdlczogY291bnRzLmltYWdlcyArIChpc0ltYWdlID8gMSA6IDApLFxuICAgICAgICB2aWRlb3M6IGNvdW50cy52aWRlb3MgKyAoaXNWaWRlbyA/IDEgOiAwKSxcbiAgICAgICAgYXVkaW86IGNvdW50cy5hdWRpbyArIChpc0F1ZGlvID8gMSA6IDApXG4gICAgICB9O1xuICAgIH0sXG4gICAgeyBjaGFyYWN0ZXJzOiAwLCBpbWFnZXM6IDAsIHZpZGVvczogMCwgYXVkaW86IDAgfVxuICApO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZU1vZGVsKHJlZ2lzdHJ5LCBtb2RlbDIsIG9wdGlvbnMpIHtcbiAgbGV0IG91dDtcbiAgbGV0IG1vZGVsSWQ7XG4gIGlmICghbW9kZWwyKSB7XG4gICAgbW9kZWwyID0gYXdhaXQgcmVnaXN0cnkubG9va3VwVmFsdWUoXCJkZWZhdWx0TW9kZWxcIiwgXCJkZWZhdWx0TW9kZWxcIik7XG4gIH1cbiAgaWYgKCFtb2RlbDIpIHtcbiAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgc3RhdHVzOiBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgICAgIG1lc3NhZ2U6IFwiTXVzdCBzdXBwbHkgYSBgbW9kZWxgIHRvIGBnZW5lcmF0ZSgpYCBjYWxscy5cIlxuICAgIH0pO1xuICB9XG4gIGlmICh0eXBlb2YgbW9kZWwyID09PSBcInN0cmluZ1wiKSB7XG4gICAgbW9kZWxJZCA9IG1vZGVsMjtcbiAgICBvdXQgPSB7IG1vZGVsQWN0aW9uOiBhd2FpdCBsb29rdXBNb2RlbChyZWdpc3RyeSwgbW9kZWwyKSB9O1xuICB9IGVsc2UgaWYgKG1vZGVsMi5oYXNPd25Qcm9wZXJ0eShcIl9fYWN0aW9uXCIpKSB7XG4gICAgbW9kZWxJZCA9IG1vZGVsMi5fX2FjdGlvbi5uYW1lO1xuICAgIG91dCA9IHsgbW9kZWxBY3Rpb246IG1vZGVsMiB9O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlZiA9IG1vZGVsMjtcbiAgICBtb2RlbElkID0gcmVmLm5hbWU7XG4gICAgb3V0ID0ge1xuICAgICAgbW9kZWxBY3Rpb246IGF3YWl0IGxvb2t1cE1vZGVsKHJlZ2lzdHJ5LCByZWYubmFtZSksXG4gICAgICBjb25maWc6IHtcbiAgICAgICAgLi4ucmVmLmNvbmZpZ1xuICAgICAgfSxcbiAgICAgIHZlcnNpb246IHJlZi52ZXJzaW9uXG4gICAgfTtcbiAgfVxuICBpZiAoIW91dC5tb2RlbEFjdGlvbikge1xuICAgIHRocm93IG5ldyBpbXBvcnRfY29yZS5HZW5raXRFcnJvcih7XG4gICAgICBzdGF0dXM6IFwiTk9UX0ZPVU5EXCIsXG4gICAgICBtZXNzYWdlOiBgTW9kZWwgJyR7bW9kZWxJZH0nIG5vdCBmb3VuZGBcbiAgICB9KTtcbiAgfVxuICBpZiAob3B0aW9ucz8ud2FybkRlcHJlY2F0ZWQgJiYgb3V0Lm1vZGVsQWN0aW9uLl9fYWN0aW9uLm1ldGFkYXRhPy5tb2RlbD8uc3RhZ2UgPT09IFwiZGVwcmVjYXRlZFwiKSB7XG4gICAgaW1wb3J0X2xvZ2dpbmcubG9nZ2VyLndhcm4oXG4gICAgICBgTW9kZWwgJyR7b3V0Lm1vZGVsQWN0aW9uLl9fYWN0aW9uLm5hbWV9JyBpcyBkZXByZWNhdGVkIGFuZCBtYXkgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLmBcbiAgICApO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5hc3luYyBmdW5jdGlvbiBsb29rdXBNb2RlbChyZWdpc3RyeSwgbW9kZWwyKSB7XG4gIHJldHVybiBhd2FpdCByZWdpc3RyeS5sb29rdXBBY3Rpb24oYC9tb2RlbC8ke21vZGVsMn1gKSB8fCBhd2FpdCByZWdpc3RyeS5sb29rdXBBY3Rpb24oYC9iYWNrZ3JvdW5kLW1vZGVsLyR7bW9kZWwyfWApO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEN1c3RvbVBhcnRTY2hlbWEsXG4gIERhdGFQYXJ0U2NoZW1hLFxuICBNZWRpYVBhcnRTY2hlbWEsXG4gIFRleHRQYXJ0U2NoZW1hLFxuICBUb29sUmVxdWVzdFBhcnRTY2hlbWEsXG4gIFRvb2xSZXNwb25zZVBhcnRTY2hlbWEsXG4gIGJhY2tncm91bmRNb2RlbCxcbiAgZGVmaW5lQmFja2dyb3VuZE1vZGVsLFxuICBkZWZpbmVHZW5lcmF0ZUFjdGlvbixcbiAgZGVmaW5lTW9kZWwsXG4gIGdldEJhc2ljVXNhZ2VTdGF0cyxcbiAgbW9kZWwsXG4gIG1vZGVsQWN0aW9uTWV0YWRhdGEsXG4gIG1vZGVsUmVmLFxuICByZXNvbHZlTW9kZWwsXG4gIHNpbXVsYXRlQ29uc3RyYWluZWRHZW5lcmF0aW9uLFxuICAuLi5yZXF1aXJlKFwiLi9tb2RlbC10eXBlcy5qc1wiKVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model/middleware.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar middleware_exports = {};\n__export(middleware_exports, {\n  CONTEXT_PREFACE: () => CONTEXT_PREFACE,\n  augmentWithContext: () => augmentWithContext,\n  downloadRequestMedia: () => downloadRequestMedia,\n  simulateConstrainedGeneration: () => simulateConstrainedGeneration,\n  simulateSystemPrompt: () => simulateSystemPrompt,\n  validateSupport: () => validateSupport\n});\nmodule.exports = __toCommonJS(middleware_exports);\nvar import_document = __webpack_require__(/*! ../document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_formats = __webpack_require__(/*! ../formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nfunction downloadRequestMedia(options) {\n  return async (req, next) => {\n    const { default: fetch } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(action-browser)/./node_modules/node-fetch/src/index.js\"));\n    const newReq = {\n      ...req,\n      messages: await Promise.all(\n        req.messages.map(async (message) => {\n          const content = await Promise.all(\n            message.content.map(async (part) => {\n              if (!part.media || !part.media.url.startsWith(\"http\") || options?.filter && !options?.filter(part)) {\n                return part;\n              }\n              const response = await fetch(part.media.url, {\n                size: options?.maxBytes\n              });\n              if (response.status !== 200)\n                throw new Error(\n                  `HTTP error downloading media '${part.media.url}': ${await response.text()}`\n                );\n              const contentType = part.media.contentType || response.headers.get(\"content-type\") || \"\";\n              return {\n                media: {\n                  contentType,\n                  url: `data:${contentType};base64,${Buffer.from(\n                    await response.arrayBuffer()\n                  ).toString(\"base64\")}`\n                }\n              };\n            })\n          );\n          return {\n            ...message,\n            content\n          };\n        })\n      )\n    };\n    return next(newReq);\n  };\n}\nfunction validateSupport(options) {\n  const supports = options.supports || {};\n  return async (req, next) => {\n    function invalid(message) {\n      throw new Error(\n        `Model '${options.name}' does not support ${message}. Request: ${JSON.stringify(\n          req,\n          null,\n          2\n        )}`\n      );\n    }\n    if (supports.media === false && req.messages.some((message) => message.content.some((part) => part.media)))\n      invalid(\"media, but media was provided\");\n    if (supports.tools === false && req.tools?.length)\n      invalid(\"tool use, but tools were provided\");\n    if (supports.multiturn === false && req.messages.length > 1)\n      invalid(`multiple messages, but ${req.messages.length} were provided`);\n    return next();\n  };\n}\nfunction lastUserMessage(messages) {\n  for (let i = messages.length - 1; i >= 0; i--) {\n    if (messages[i].role === \"user\") {\n      return messages[i];\n    }\n  }\n  return void 0;\n}\nfunction simulateSystemPrompt(options) {\n  const preface = options?.preface || \"SYSTEM INSTRUCTIONS:\\n\";\n  const acknowledgement = options?.acknowledgement || \"Understood.\";\n  return (req, next) => {\n    const messages = [...req.messages];\n    for (let i = 0; i < messages.length; i++) {\n      if (req.messages[i].role === \"system\") {\n        const systemPrompt = messages[i].content;\n        messages.splice(\n          i,\n          1,\n          { role: \"user\", content: [{ text: preface }, ...systemPrompt] },\n          { role: \"model\", content: [{ text: acknowledgement }] }\n        );\n        break;\n      }\n    }\n    return next({ ...req, messages });\n  };\n}\nconst CONTEXT_PREFACE = \"\\n\\nUse the following information to complete your task:\\n\\n\";\nconst CONTEXT_ITEM_TEMPLATE = (d, index, options) => {\n  let out = \"- \";\n  if (options?.citationKey) {\n    out += `[${d.metadata[options.citationKey]}]: `;\n  } else if (options?.citationKey === void 0) {\n    out += `[${d.metadata?.[\"ref\"] || d.metadata?.[\"id\"] || index}]: `;\n  }\n  out += d.text + \"\\n\";\n  return out;\n};\nfunction augmentWithContext(options) {\n  const preface = typeof options?.preface === \"undefined\" ? CONTEXT_PREFACE : options.preface;\n  const itemTemplate = options?.itemTemplate || CONTEXT_ITEM_TEMPLATE;\n  return (req, next) => {\n    if (!req.docs?.length) return next(req);\n    const userMessage = lastUserMessage(req.messages);\n    if (!userMessage) return next(req);\n    const contextPartIndex = userMessage?.content.findIndex(\n      (p) => p.metadata?.purpose === \"context\"\n    );\n    const contextPart = contextPartIndex >= 0 && userMessage.content[contextPartIndex];\n    if (contextPart && !contextPart.metadata?.pending) {\n      return next(req);\n    }\n    let out = `${preface || \"\"}`;\n    req.docs?.forEach((d, i) => {\n      out += itemTemplate(new import_document.Document(d), i, options);\n    });\n    out += \"\\n\";\n    if (contextPartIndex >= 0) {\n      userMessage.content[contextPartIndex] = {\n        ...contextPart,\n        text: out,\n        metadata: { purpose: \"context\" }\n      };\n    } else {\n      userMessage.content.push({ text: out, metadata: { purpose: \"context\" } });\n    }\n    return next(req);\n  };\n}\nconst DEFAULT_CONSTRAINED_GENERATION_INSTRUCTIONS = (schema) => `Output should be in JSON format and conform to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n`;\nfunction simulateConstrainedGeneration(options) {\n  return (req, next) => {\n    let instructions;\n    if (req.output?.constrained && req.output?.schema) {\n      instructions = (options?.instructionsRenderer ?? DEFAULT_CONSTRAINED_GENERATION_INSTRUCTIONS)(req.output?.schema);\n      req = {\n        ...req,\n        messages: (0, import_formats.injectInstructions)(req.messages, instructions),\n        output: {\n          ...req.output,\n          // we're simulating it, so to the underlying model it's unconstrained.\n          constrained: false,\n          format: void 0,\n          contentType: void 0,\n          schema: void 0\n        }\n      };\n    }\n    return next(req);\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=middleware.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/prompt.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar prompt_exports = {};\n__export(prompt_exports, {\n  defineHelper: () => defineHelper,\n  definePartial: () => definePartial,\n  definePrompt: () => definePrompt,\n  isExecutablePrompt: () => isExecutablePrompt,\n  isPromptAction: () => isPromptAction,\n  loadPromptFolder: () => loadPromptFolder,\n  loadPromptFolderRecursively: () => loadPromptFolderRecursively,\n  prompt: () => prompt\n});\nmodule.exports = __toCommonJS(prompt_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_fs = __webpack_require__(/*! fs */ \"fs\");\nvar import_path = __webpack_require__(/*! path */ \"path\");\nvar import_generate = __webpack_require__(/*! ./generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_session = __webpack_require__(/*! ./session.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\");\nfunction isPromptAction(action) {\n  return action.__action.metadata?.type === \"prompt\";\n}\nfunction definePrompt(registry, options) {\n  return definePromptAsync(\n    registry,\n    `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n    Promise.resolve(options),\n    options.metadata\n  );\n}\nfunction definePromptAsync(registry, name, optionsPromise, metadata) {\n  const promptCache = {};\n  const renderOptionsFn = async (input, renderOptions) => {\n    return await (0, import_tracing.runInNewSpan)(\n      {\n        metadata: {\n          name: \"render\",\n          input\n        },\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"promptTemplate\"\n        }\n      },\n      async (metadata2) => {\n        const messages = [];\n        renderOptions = { ...renderOptions };\n        const session = (0, import_session.getCurrentSession)(registry);\n        const resolvedOptions = await optionsPromise;\n        await renderSystemPrompt(\n          registry,\n          session,\n          input,\n          messages,\n          resolvedOptions,\n          promptCache,\n          renderOptions\n        );\n        await renderMessages(\n          registry,\n          session,\n          input,\n          messages,\n          resolvedOptions,\n          renderOptions,\n          promptCache\n        );\n        await renderUserPrompt(\n          registry,\n          session,\n          input,\n          messages,\n          resolvedOptions,\n          promptCache,\n          renderOptions\n        );\n        let docs;\n        if (typeof resolvedOptions.docs === \"function\") {\n          docs = await resolvedOptions.docs(input, {\n            state: session?.state,\n            context: renderOptions?.context || (0, import_core.getContext)() || {}\n          });\n        } else {\n          docs = resolvedOptions.docs;\n        }\n        const opts = (0, import_core.stripUndefinedProps)({\n          model: resolvedOptions.model,\n          maxTurns: resolvedOptions.maxTurns,\n          messages,\n          docs,\n          tools: resolvedOptions.tools,\n          returnToolRequests: resolvedOptions.returnToolRequests,\n          toolChoice: resolvedOptions.toolChoice,\n          context: resolvedOptions.context,\n          output: resolvedOptions.output,\n          use: resolvedOptions.use,\n          ...(0, import_core.stripUndefinedProps)(renderOptions),\n          config: {\n            ...resolvedOptions?.config,\n            ...renderOptions?.config\n          },\n          metadata: resolvedOptions.metadata?.metadata ? {\n            prompt: resolvedOptions.metadata?.metadata\n          } : void 0\n        });\n        if (renderOptions?.abortSignal) {\n          opts.abortSignal = renderOptions.abortSignal;\n        }\n        if (Object.keys(opts.config).length === 0 && !renderOptions?.config) {\n          delete opts.config;\n        }\n        metadata2.output = opts;\n        return opts;\n      }\n    );\n  };\n  const rendererActionConfig = (0, import_async.lazy)(\n    () => optionsPromise.then((options) => {\n      const metadata2 = promptMetadata(options);\n      return {\n        name: `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n        inputJsonSchema: options.input?.jsonSchema,\n        inputSchema: options.input?.schema,\n        description: options.description,\n        actionType: \"prompt\",\n        metadata: metadata2,\n        fn: async (input) => {\n          return (0, import_generate.toGenerateRequest)(\n            registry,\n            await renderOptionsFn(input, void 0)\n          );\n        }\n      };\n    })\n  );\n  const rendererAction = (0, import_core.defineActionAsync)(\n    registry,\n    \"prompt\",\n    name,\n    rendererActionConfig,\n    (action) => {\n      action.__executablePrompt = executablePrompt;\n    }\n  );\n  const executablePromptActionConfig = (0, import_async.lazy)(\n    () => optionsPromise.then((options) => {\n      const metadata2 = promptMetadata(options);\n      return {\n        name: `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n        inputJsonSchema: options.input?.jsonSchema,\n        inputSchema: options.input?.schema,\n        outputSchema: import_model.GenerateActionOptionsSchema,\n        description: options.description,\n        actionType: \"executable-prompt\",\n        metadata: metadata2,\n        fn: async (input) => {\n          return await (0, import_generate.toGenerateActionOptions)(\n            registry,\n            await renderOptionsFn(input, void 0)\n          );\n        }\n      };\n    })\n  );\n  (0, import_core.defineActionAsync)(\n    registry,\n    \"executable-prompt\",\n    name,\n    executablePromptActionConfig,\n    (action) => {\n      action.__executablePrompt = executablePrompt;\n    }\n  );\n  const executablePrompt = wrapInExecutablePrompt({\n    registry,\n    name,\n    renderOptionsFn,\n    rendererAction,\n    metadata\n  });\n  return executablePrompt;\n}\nfunction promptMetadata(options) {\n  const metadata = {\n    ...options.metadata,\n    prompt: {\n      ...options.metadata?.prompt,\n      config: options.config,\n      input: {\n        schema: options.input ? (0, import_schema.toJsonSchema)(options.input) : void 0\n      },\n      name: options.name.includes(\".\") ? options.name.split(\".\")[0] : options.name,\n      model: modelName(options.model)\n    },\n    type: \"prompt\"\n  };\n  if (options.variant) {\n    metadata.prompt.variant = options.variant;\n  }\n  return metadata;\n}\nfunction wrapInExecutablePrompt(wrapOpts) {\n  const executablePrompt = async (input, opts) => {\n    return await (0, import_tracing.runInNewSpan)(\n      wrapOpts.registry,\n      {\n        metadata: {\n          name: (await wrapOpts.rendererAction).__action.name,\n          input\n        },\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"dotprompt\"\n        }\n      },\n      async (metadata) => {\n        const output = await (0, import_generate.generate)(wrapOpts.registry, {\n          ...await wrapOpts.renderOptionsFn(input, opts)\n        });\n        metadata.output = output;\n        return output;\n      }\n    );\n  };\n  executablePrompt.ref = { name: wrapOpts.name, metadata: wrapOpts.metadata };\n  executablePrompt.render = async (input, opts) => {\n    return {\n      ...await wrapOpts.renderOptionsFn(input, opts)\n    };\n  };\n  executablePrompt.stream = (input, opts) => {\n    return (0, import_generate.generateStream)(\n      wrapOpts.registry,\n      wrapOpts.renderOptionsFn(input, opts)\n    );\n  };\n  executablePrompt.asTool = async () => {\n    return await wrapOpts.rendererAction;\n  };\n  return executablePrompt;\n}\nasync function renderSystemPrompt(registry, session, input, messages, options, promptCache, renderOptions) {\n  if (typeof options.system === \"function\") {\n    messages.push({\n      role: \"system\",\n      content: normalizeParts(\n        await options.system(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)() || {}\n        })\n      )\n    });\n  } else if (typeof options.system === \"string\") {\n    if (!promptCache.system) {\n      promptCache.system = await registry.dotprompt.compile(options.system);\n    }\n    messages.push({\n      role: \"system\",\n      content: await renderDotpromptToParts(\n        registry,\n        promptCache.system,\n        input,\n        session,\n        options,\n        renderOptions\n      )\n    });\n  } else if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: normalizeParts(options.system)\n    });\n  }\n}\nasync function renderMessages(registry, session, input, messages, options, renderOptions, promptCache) {\n  if (options.messages) {\n    if (typeof options.messages === \"function\") {\n      messages.push(\n        ...await options.messages(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)() || {},\n          history: renderOptions?.messages\n        })\n      );\n    } else if (typeof options.messages === \"string\") {\n      if (!promptCache.messages) {\n        promptCache.messages = await registry.dotprompt.compile(\n          options.messages\n        );\n      }\n      const rendered = await promptCache.messages({\n        input,\n        context: {\n          ...renderOptions?.context || (0, import_core.getContext)(),\n          state: session?.state\n        },\n        messages: renderOptions?.messages?.map(\n          (m) => import_message.Message.parseData(m)\n        )\n      });\n      messages.push(...rendered.messages);\n    } else {\n      messages.push(...options.messages);\n    }\n  } else {\n    if (renderOptions.messages) {\n      messages.push(...renderOptions.messages);\n    }\n  }\n  if (renderOptions?.messages) {\n    delete renderOptions.messages;\n  }\n}\nasync function renderUserPrompt(registry, session, input, messages, options, promptCache, renderOptions) {\n  if (typeof options.prompt === \"function\") {\n    messages.push({\n      role: \"user\",\n      content: normalizeParts(\n        await options.prompt(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)() || {}\n        })\n      )\n    });\n  } else if (typeof options.prompt === \"string\") {\n    if (!promptCache.userPrompt) {\n      promptCache.userPrompt = await registry.dotprompt.compile(options.prompt);\n    }\n    messages.push({\n      role: \"user\",\n      content: await renderDotpromptToParts(\n        registry,\n        promptCache.userPrompt,\n        input,\n        session,\n        options,\n        renderOptions\n      )\n    });\n  } else if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: normalizeParts(options.prompt)\n    });\n  }\n}\nfunction modelName(modelArg) {\n  if (modelArg === void 0) {\n    return void 0;\n  }\n  if (typeof modelArg === \"string\") {\n    return modelArg;\n  }\n  if (modelArg.name) {\n    return modelArg.name;\n  }\n  return modelArg.__action.name;\n}\nfunction normalizeParts(parts) {\n  if (Array.isArray(parts)) return parts;\n  if (typeof parts === \"string\") {\n    return [\n      {\n        text: parts\n      }\n    ];\n  }\n  return [parts];\n}\nasync function renderDotpromptToParts(registry, promptFn, input, session, options, renderOptions) {\n  const renderred = await promptFn({\n    input,\n    context: {\n      ...renderOptions?.context || (0, import_core.getContext)(),\n      state: session?.state\n    }\n  });\n  if (renderred.messages.length !== 1) {\n    throw new Error(\"parts tempate must produce only one message\");\n  }\n  return renderred.messages[0].content;\n}\nfunction isExecutablePrompt(obj) {\n  return !!obj?.render && !!obj?.asTool && !!obj?.stream;\n}\nfunction loadPromptFolder(registry, dir = \"./prompts\", ns) {\n  const promptsPath = (0, import_path.resolve)(dir);\n  if ((0, import_fs.existsSync)(promptsPath)) {\n    loadPromptFolderRecursively(registry, dir, ns, \"\");\n  }\n}\nfunction loadPromptFolderRecursively(registry, dir, ns, subDir) {\n  const promptsPath = (0, import_path.resolve)(dir);\n  const dirEnts = (0, import_fs.readdirSync)((0, import_path.join)(promptsPath, subDir), {\n    withFileTypes: true\n  });\n  for (const dirEnt of dirEnts) {\n    const parentPath = (0, import_path.join)(promptsPath, subDir);\n    const fileName = dirEnt.name;\n    if (dirEnt.isFile() && fileName.endsWith(\".prompt\")) {\n      if (fileName.startsWith(\"_\")) {\n        const partialName = fileName.substring(1, fileName.length - 7);\n        definePartial(\n          registry,\n          partialName,\n          (0, import_fs.readFileSync)((0, import_path.join)(parentPath, fileName), {\n            encoding: \"utf8\"\n          })\n        );\n        import_logging.logger.debug(\n          `Registered Dotprompt partial \"${partialName}\" from \"${(0, import_path.join)(parentPath, fileName)}\"`\n        );\n      } else {\n        loadPrompt(\n          registry,\n          promptsPath,\n          fileName,\n          subDir ? `${subDir}/` : \"\",\n          ns\n        );\n      }\n    } else if (dirEnt.isDirectory()) {\n      loadPromptFolderRecursively(registry, dir, ns, (0, import_path.join)(subDir, fileName));\n    }\n  }\n}\nfunction definePartial(registry, name, source) {\n  registry.dotprompt.definePartial(name, source);\n}\nfunction defineHelper(registry, name, fn) {\n  registry.dotprompt.defineHelper(name, fn);\n}\nfunction loadPrompt(registry, path, filename, prefix = \"\", ns = \"dotprompt\") {\n  let name = `${prefix ?? \"\"}${(0, import_path.basename)(filename, \".prompt\")}`;\n  let variant = null;\n  if (name.includes(\".\")) {\n    const parts = name.split(\".\");\n    name = parts[0];\n    variant = parts[1];\n  }\n  const source = (0, import_fs.readFileSync)((0, import_path.join)(path, prefix ?? \"\", filename), \"utf8\");\n  const parsedPrompt = registry.dotprompt.parse(source);\n  definePromptAsync(\n    registry,\n    registryDefinitionKey(name, variant ?? void 0, ns),\n    // We use a lazy promise here because we only want prompt loaded when it's first used.\n    // This is important because otherwise the loading may happen before the user has configured\n    // all the schemas, etc., which will result in dotprompt.renderMetadata errors.\n    (0, import_async.lazy)(async () => {\n      const promptMetadata2 = await registry.dotprompt.renderMetadata(parsedPrompt);\n      if (variant) {\n        promptMetadata2.variant = variant;\n      }\n      if (promptMetadata2.output?.schema?.description === null) {\n        delete promptMetadata2.output.schema.description;\n      }\n      if (promptMetadata2.input?.schema?.description === null) {\n        delete promptMetadata2.input.schema.description;\n      }\n      const metadata = {\n        ...promptMetadata2.metadata,\n        type: \"prompt\",\n        prompt: {\n          ...promptMetadata2,\n          template: parsedPrompt.template\n        }\n      };\n      if (promptMetadata2.raw?.[\"metadata\"]) {\n        metadata[\"metadata\"] = { ...promptMetadata2.raw?.[\"metadata\"] };\n      }\n      return {\n        name: registryDefinitionKey(name, variant ?? void 0, ns),\n        model: promptMetadata2.model,\n        config: promptMetadata2.config,\n        tools: promptMetadata2.tools,\n        description: promptMetadata2.description,\n        output: {\n          jsonSchema: promptMetadata2.output?.schema,\n          format: promptMetadata2.output?.format\n        },\n        input: {\n          jsonSchema: promptMetadata2.input?.schema\n        },\n        metadata,\n        maxTurns: promptMetadata2.raw?.[\"maxTurns\"],\n        toolChoice: promptMetadata2.raw?.[\"toolChoice\"],\n        returnToolRequests: promptMetadata2.raw?.[\"returnToolRequests\"],\n        messages: parsedPrompt.template\n      };\n    })\n  );\n}\nasync function prompt(registry, name, options) {\n  return await lookupPrompt(\n    registry,\n    name,\n    options?.variant\n  );\n}\nfunction registryLookupKey(name, variant, ns) {\n  return `/prompt/${registryDefinitionKey(name, variant, ns)}`;\n}\nasync function lookupPrompt(registry, name, variant) {\n  const registryPrompt = await registry.lookupAction(\n    registryLookupKey(name, variant)\n  );\n  if (registryPrompt) {\n    return registryPrompt.__executablePrompt;\n  }\n  throw new import_core.GenkitError({\n    status: \"NOT_FOUND\",\n    message: `Prompt ${name + (variant ? ` (variant ${variant})` : \"\")} not found`\n  });\n}\nfunction registryDefinitionKey(name, variant, ns) {\n  return `${ns ? `${ns}/` : \"\"}${name}${variant ? `.${variant}` : \"\"}`;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=prompt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/reranker.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar reranker_exports = {};\n__export(reranker_exports, {\n  CommonRerankerOptionsSchema: () => CommonRerankerOptionsSchema,\n  RankedDocument: () => RankedDocument,\n  RankedDocumentDataSchema: () => RankedDocumentDataSchema,\n  RankedDocumentMetadataSchema: () => RankedDocumentMetadataSchema,\n  RerankerInfoSchema: () => RerankerInfoSchema,\n  defineReranker: () => defineReranker,\n  rerank: () => rerank,\n  reranker: () => reranker,\n  rerankerRef: () => rerankerRef\n});\nmodule.exports = __toCommonJS(reranker_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_retriever = __webpack_require__(/*! ./retriever.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\");\nconst RankedDocumentMetadataSchema = import_core.z.object({\n  score: import_core.z.number()\n  // Enforces that 'score' must be a number\n}).passthrough();\nconst RankedDocumentDataSchema = import_core.z.object({\n  content: import_core.z.array(import_document.PartSchema),\n  metadata: RankedDocumentMetadataSchema\n});\nclass RankedDocument extends import_retriever.Document {\n  content;\n  metadata;\n  constructor(data) {\n    super(data);\n    this.content = data.content;\n    this.metadata = data.metadata;\n  }\n  /**\n   * Returns the score of the document.\n   * @returns The score of the document.\n   */\n  score() {\n    return this.metadata.score;\n  }\n}\nconst RerankerRequestSchema = import_core.z.object({\n  query: import_retriever.DocumentDataSchema,\n  documents: import_core.z.array(import_retriever.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst RerankerResponseSchema = import_core.z.object({\n  documents: import_core.z.array(RankedDocumentDataSchema)\n});\nconst RerankerInfoSchema = import_core.z.object({\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional()\n  }).optional()\n});\nfunction rerankerWithMetadata(reranker2, configSchema) {\n  const withMeta = reranker2;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineReranker(registry, options, runner) {\n  const act = reranker(options, runner);\n  registry.registerAction(\"reranker\", act);\n  return act;\n}\nfunction reranker(options, runner) {\n  const reranker2 = (0, import_core.action)(\n    {\n      actionType: \"reranker\",\n      name: options.name,\n      inputSchema: options.configSchema ? RerankerRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : RerankerRequestSchema,\n      outputSchema: RerankerResponseSchema,\n      metadata: {\n        type: \"reranker\",\n        info: options.info,\n        reranker: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(\n      new import_retriever.Document(i.query),\n      i.documents.map((d) => new import_retriever.Document(d)),\n      i.options\n    )\n  );\n  const rwm = rerankerWithMetadata(\n    reranker2,\n    options.configSchema\n  );\n  return rwm;\n}\nasync function rerank(registry, params) {\n  let reranker2;\n  if (typeof params.reranker === \"string\") {\n    reranker2 = await registry.lookupAction(`/reranker/${params.reranker}`);\n  } else if (Object.hasOwnProperty.call(params.reranker, \"info\")) {\n    reranker2 = await registry.lookupAction(`/reranker/${params.reranker.name}`);\n  } else {\n    reranker2 = params.reranker;\n  }\n  if (!reranker2) {\n    throw new Error(\"Unable to resolve the reranker\");\n  }\n  const response = await reranker2({\n    query: typeof params.query === \"string\" ? import_retriever.Document.fromText(params.query) : params.query,\n    documents: params.documents,\n    options: params.options\n  });\n  return response.documents.map((d) => new RankedDocument(d));\n}\nconst CommonRerankerOptionsSchema = import_core.z.object({\n  k: import_core.z.number().describe(\"Number of documents to rerank\").optional()\n});\nfunction rerankerRef(options) {\n  return { ...options };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=reranker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/resource.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/resource.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar resource_exports = {};\n__export(resource_exports, {\n  ResourceInputSchema: () => ResourceInputSchema,\n  ResourceOutputSchema: () => ResourceOutputSchema,\n  defineResource: () => defineResource,\n  dynamicResource: () => dynamicResource,\n  findMatchingResource: () => findMatchingResource,\n  isDynamicResourceAction: () => isDynamicResourceAction,\n  lookupResourceByName: () => lookupResourceByName,\n  resolveResources: () => resolveResources,\n  resource: () => resource\n});\nmodule.exports = __toCommonJS(resource_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_uri_templates = __toESM(__webpack_require__(/*! uri-templates */ \"(action-browser)/./node_modules/uri-templates/uri-templates.js\"));\nvar import_model_types = __webpack_require__(/*! ./model-types.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model-types.js\");\nconst ResourceInputSchema = import_core.z.object({\n  uri: import_core.z.string()\n});\nconst ResourceOutputSchema = import_core.z.object({\n  content: import_core.z.array(import_model_types.PartSchema)\n});\nasync function resolveResources(registry, resources) {\n  if (!resources || resources.length === 0) {\n    return [];\n  }\n  return await Promise.all(\n    resources.map(async (ref) => {\n      if (typeof ref === \"string\") {\n        return await lookupResourceByName(registry, ref);\n      } else if ((0, import_core.isAction)(ref)) {\n        return ref;\n      }\n      throw new Error(\"Resources must be strings, or actions\");\n    })\n  );\n}\nasync function lookupResourceByName(registry, name) {\n  const resource2 = await registry.lookupAction(name) || await registry.lookupAction(`/resource/${name}`) || await registry.lookupAction(`/dynamic-action-provider/${name}`);\n  if (!resource2) {\n    throw new Error(`Resource ${name} not found`);\n  }\n  return resource2;\n}\nfunction defineResource(registry, opts, fn) {\n  const action2 = dynamicResource(opts, fn);\n  action2.matches = createMatcher(opts.uri, opts.template);\n  registry.registerAction(\"resource\", action2);\n  return action2;\n}\nasync function findMatchingResource(registry, resources, input) {\n  for (const res of resources) {\n    if (res.matches(input)) {\n      return res;\n    }\n  }\n  for (const registryKey of Object.keys(\n    await registry.listResolvableActions()\n  )) {\n    if (registryKey.startsWith(\"/resource/\")) {\n      const resource2 = await registry.lookupAction(\n        registryKey\n      );\n      if (resource2.matches(input)) {\n        return resource2;\n      }\n    }\n  }\n  return void 0;\n}\nfunction isDynamicResourceAction(t) {\n  return (0, import_core.isAction)(t) && !t.__registry;\n}\nfunction resource(opts, fn) {\n  return dynamicResource(opts, fn);\n}\nfunction dynamicResource(opts, fn) {\n  const uri = opts.uri ?? opts.template;\n  if (!uri) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `must specify either url or template options`\n    });\n  }\n  const matcher = createMatcher(opts.uri, opts.template);\n  const act = (0, import_core.action)(\n    {\n      actionType: \"resource\",\n      name: opts.name ?? uri,\n      description: opts.description,\n      inputSchema: ResourceInputSchema,\n      outputSchema: ResourceOutputSchema,\n      metadata: {\n        resource: {\n          uri: opts.uri,\n          template: opts.template\n        },\n        ...opts.metadata,\n        type: \"resource\",\n        dynamic: true\n      }\n    },\n    async (input, ctx) => {\n      const templateMatch = matcher(input);\n      if (!templateMatch) {\n        throw new import_core.GenkitError({\n          status: \"INVALID_ARGUMENT\",\n          message: `input ${input} did not match template ${uri}`\n        });\n      }\n      const parts = await fn(input, ctx);\n      parts.content.map((p) => {\n        if (!p.metadata) {\n          p.metadata = {};\n        }\n        if (p.metadata?.resource) {\n          if (!p.metadata.resource.parent) {\n            p.metadata.resource.parent = {\n              uri: input.uri\n            };\n            if (opts.template) {\n              p.metadata.resource.parent.template = opts.template;\n            }\n          }\n        } else {\n          p.metadata.resource = {\n            uri: input.uri\n          };\n          if (opts.template) {\n            p.metadata.resource.template = opts.template;\n          }\n        }\n        return p;\n      });\n      return parts;\n    }\n  );\n  act.matches = matcher;\n  act.attach = (_) => act;\n  return act;\n}\nfunction createMatcher(uriOpt, templateOpt) {\n  if (uriOpt) {\n    return (input) => input.uri === uriOpt;\n  }\n  if (templateOpt) {\n    const template = (0, import_uri_templates.default)(templateOpt);\n    return (input) => template.fromUri(input.uri) !== void 0;\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: \"must specify either url or template options\"\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=resource.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/resource.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/retriever.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar retriever_exports = {};\n__export(retriever_exports, {\n  CommonRetrieverOptionsSchema: () => CommonRetrieverOptionsSchema,\n  Document: () => import_document2.Document,\n  DocumentDataSchema: () => import_document2.DocumentDataSchema,\n  IndexerInfoSchema: () => IndexerInfoSchema,\n  RetrieverInfoSchema: () => RetrieverInfoSchema,\n  defineIndexer: () => defineIndexer,\n  defineRetriever: () => defineRetriever,\n  defineSimpleRetriever: () => defineSimpleRetriever,\n  index: () => index,\n  indexer: () => indexer,\n  indexerRef: () => indexerRef,\n  retrieve: () => retrieve,\n  retriever: () => retriever,\n  retrieverRef: () => retrieverRef\n});\nmodule.exports = __toCommonJS(retriever_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_document2 = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst RetrieverRequestSchema = import_core.z.object({\n  query: import_document.DocumentDataSchema,\n  options: import_core.z.any().optional()\n});\nconst RetrieverResponseSchema = import_core.z.object({\n  documents: import_core.z.array(import_document.DocumentDataSchema)\n  // TODO: stats, etc.\n});\nconst IndexerRequestSchema = import_core.z.object({\n  documents: import_core.z.array(import_document.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst RetrieverInfoSchema = import_core.z.object({\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional()\n  }).optional()\n});\nfunction retrieverWithMetadata(retriever2, configSchema) {\n  const withMeta = retriever2;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction indexerWithMetadata(indexer2, configSchema) {\n  const withMeta = indexer2;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineRetriever(registry, options, runner) {\n  const r = retriever(options, runner);\n  registry.registerAction(\"retriever\", r);\n  return r;\n}\nfunction retriever(options, runner) {\n  const retriever2 = (0, import_core.action)(\n    {\n      actionType: \"retriever\",\n      name: options.name,\n      inputSchema: options.configSchema ? RetrieverRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : RetrieverRequestSchema,\n      outputSchema: RetrieverResponseSchema,\n      metadata: {\n        type: \"retriever\",\n        info: options.info,\n        retriever: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(new import_document.Document(i.query), i.options)\n  );\n  const rwm = retrieverWithMetadata(\n    retriever2,\n    options.configSchema\n  );\n  return rwm;\n}\nfunction defineIndexer(registry, options, runner) {\n  const r = indexer(options, runner);\n  registry.registerAction(\"indexer\", r);\n  return r;\n}\nfunction indexer(options, runner) {\n  const indexer2 = (0, import_core.action)(\n    {\n      actionType: \"indexer\",\n      name: options.name,\n      inputSchema: options.configSchema ? IndexerRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : IndexerRequestSchema,\n      outputSchema: import_core.z.void(),\n      metadata: {\n        type: \"indexer\",\n        embedderInfo: options.embedderInfo,\n        indexer: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(\n      i.documents.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const iwm = indexerWithMetadata(\n    indexer2,\n    options.configSchema\n  );\n  return iwm;\n}\nasync function retrieve(registry, params) {\n  let retriever2;\n  if (typeof params.retriever === \"string\") {\n    retriever2 = await registry.lookupAction(`/retriever/${params.retriever}`);\n  } else if (Object.hasOwnProperty.call(params.retriever, \"info\")) {\n    retriever2 = await registry.lookupAction(\n      `/retriever/${params.retriever.name}`\n    );\n  } else {\n    retriever2 = params.retriever;\n  }\n  if (!retriever2) {\n    throw new Error(\"Unable to resolve the retriever\");\n  }\n  const response = await retriever2({\n    query: typeof params.query === \"string\" ? import_document.Document.fromText(params.query) : params.query,\n    options: params.options\n  });\n  return response.documents.map((d) => new import_document.Document(d));\n}\nasync function index(registry, params) {\n  let indexer2;\n  if (typeof params.indexer === \"string\") {\n    indexer2 = await registry.lookupAction(`/indexer/${params.indexer}`);\n  } else if (Object.hasOwnProperty.call(params.indexer, \"info\")) {\n    indexer2 = await registry.lookupAction(`/indexer/${params.indexer.name}`);\n  } else {\n    indexer2 = params.indexer;\n  }\n  if (!indexer2) {\n    throw new Error(\"Unable to utilize the provided indexer\");\n  }\n  return await indexer2({\n    documents: params.documents,\n    options: params.options\n  });\n}\nconst CommonRetrieverOptionsSchema = import_core.z.object({\n  k: import_core.z.number().describe(\"Number of documents to retrieve\").optional()\n});\nfunction retrieverRef(options) {\n  return { ...options };\n}\nconst IndexerInfoSchema = RetrieverInfoSchema;\nfunction indexerRef(options) {\n  return { ...options };\n}\nfunction itemToDocument(item, options) {\n  if (!item)\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Items returned from simple retriever must be non-null.`\n    });\n  if (typeof item === \"string\") return import_document.Document.fromText(item);\n  if (typeof options.content === \"function\") {\n    const transformed = options.content(item);\n    return typeof transformed === \"string\" ? import_document.Document.fromText(transformed) : new import_document.Document({ content: transformed });\n  }\n  if (typeof options.content === \"string\" && typeof item === \"object\")\n    return import_document.Document.fromText(item[options.content]);\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Cannot convert item to document without content option. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction itemToMetadata(item, options) {\n  if (typeof item === \"string\") return void 0;\n  if (Array.isArray(options.metadata) && typeof item === \"object\") {\n    const out = {};\n    options.metadata.forEach((key) => out[key] = item[key]);\n    return out;\n  }\n  if (typeof options.metadata === \"function\") return options.metadata(item);\n  if (!options.metadata && typeof item === \"object\") {\n    const out = { ...item };\n    if (typeof options.content === \"string\") delete out[options.content];\n    return out;\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Unable to extract metadata from item with supplied options. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction defineSimpleRetriever(registry, options, handler) {\n  return defineRetriever(\n    registry,\n    {\n      name: options.name,\n      configSchema: options.configSchema\n    },\n    async (query, config) => {\n      const result = await handler(query, config);\n      return {\n        documents: result.map((item) => {\n          const doc = itemToDocument(item, options);\n          if (typeof item !== \"string\")\n            doc.metadata = itemToMetadata(item, options);\n          return doc;\n        })\n      };\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=retriever.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/session.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar session_exports = {};\n__export(session_exports, {\n  Session: () => Session,\n  SessionError: () => SessionError,\n  getCurrentSession: () => getCurrentSession,\n  inMemorySessionStore: () => inMemorySessionStore,\n  runWithSession: () => runWithSession\n});\nmodule.exports = __toCommonJS(session_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_uuid = __webpack_require__(/*! uuid */ \"(action-browser)/./node_modules/@genkit-ai/ai/node_modules/uuid/dist/esm-node/index.js\");\nvar import_chat = __webpack_require__(/*! ./chat.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\");\nclass Session {\n  constructor(registry, options) {\n    this.registry = registry;\n    this.id = options?.id ?? (0, import_uuid.v4)();\n    this.sessionData = options?.sessionData ?? {\n      id: this.id\n    };\n    if (!this.sessionData) {\n      this.sessionData = { id: this.id };\n    }\n    if (!this.sessionData.threads) {\n      this.sessionData.threads = {};\n    }\n    this.store = options?.store ?? new InMemorySessionStore();\n  }\n  id;\n  sessionData;\n  store;\n  get state() {\n    return this.sessionData.state;\n  }\n  /**\n   * Update session state data.\n   */\n  async updateState(data) {\n    let sessionData = this.sessionData;\n    if (!sessionData) {\n      sessionData = {};\n    }\n    sessionData.state = data;\n    this.sessionData = sessionData;\n    await this.store.save(this.id, sessionData);\n  }\n  /**\n   * Update messages for a given thread.\n   */\n  async updateMessages(thread, messages) {\n    let sessionData = this.sessionData;\n    if (!sessionData) {\n      sessionData = {};\n    }\n    if (!sessionData.threads) {\n      sessionData.threads = {};\n    }\n    sessionData.threads[thread] = messages.map(\n      (m) => m.toJSON ? m.toJSON() : m\n    );\n    this.sessionData = sessionData;\n    await this.store.save(this.id, sessionData);\n  }\n  chat(optionsOrPreambleOrThreadName, maybeOptionsOrPreamble, maybeOptions) {\n    return runWithSession(this.registry, this, () => {\n      let options;\n      let threadName = import_chat.MAIN_THREAD;\n      let preamble;\n      if (optionsOrPreambleOrThreadName) {\n        if (typeof optionsOrPreambleOrThreadName === \"string\") {\n          threadName = optionsOrPreambleOrThreadName;\n        } else if ((0, import_index.isExecutablePrompt)(optionsOrPreambleOrThreadName)) {\n          preamble = optionsOrPreambleOrThreadName;\n        } else {\n          options = optionsOrPreambleOrThreadName;\n        }\n      }\n      if (maybeOptionsOrPreamble) {\n        if ((0, import_index.isExecutablePrompt)(maybeOptionsOrPreamble)) {\n          preamble = maybeOptionsOrPreamble;\n        } else {\n          options = maybeOptionsOrPreamble;\n        }\n      }\n      if (maybeOptions) {\n        options = maybeOptions;\n      }\n      let requestBase;\n      if (preamble) {\n        const renderOptions = options;\n        requestBase = preamble.render(renderOptions?.input, renderOptions).then((rb) => {\n          return {\n            ...rb,\n            messages: (0, import_index.tagAsPreamble)(rb?.messages)\n          };\n        });\n      } else {\n        const baseOptions = { ...options };\n        const messages = [];\n        if (baseOptions.system) {\n          messages.push({\n            role: \"system\",\n            content: import_index.Message.parseContent(baseOptions.system)\n          });\n        }\n        delete baseOptions.system;\n        if (baseOptions.messages) {\n          messages.push(...baseOptions.messages);\n        }\n        baseOptions.messages = (0, import_index.tagAsPreamble)(messages);\n        requestBase = Promise.resolve(baseOptions);\n      }\n      return new import_chat.Chat(this, requestBase, {\n        thread: threadName,\n        id: this.id,\n        messages: (this.sessionData?.threads && this.sessionData?.threads[threadName]) ?? []\n      });\n    });\n  }\n  /**\n   * Executes provided function within this session context allowing calling\n   * `ai.currentSession().state`\n   */\n  run(fn) {\n    return runWithSession(this.registry, this, fn);\n  }\n  toJSON() {\n    return this.sessionData;\n  }\n}\nconst sessionAlsKey = \"ai.session\";\nfunction runWithSession(registry, session, fn) {\n  return (0, import_core.getAsyncContext)().run(sessionAlsKey, session, fn);\n}\nfunction getCurrentSession(registry) {\n  return (0, import_core.getAsyncContext)().getStore(sessionAlsKey);\n}\nclass SessionError extends Error {\n  constructor(msg) {\n    super(msg);\n  }\n}\nfunction inMemorySessionStore() {\n  return new InMemorySessionStore();\n}\nclass InMemorySessionStore {\n  data = {};\n  async get(sessionId) {\n    return this.data[sessionId];\n  }\n  async save(sessionId, sessionData) {\n    this.data[sessionId] = sessionData;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=session.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js":
/*!************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/tool.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar tool_exports = {};\n__export(tool_exports, {\n  ToolInterruptError: () => ToolInterruptError,\n  asTool: () => asTool,\n  defineInterrupt: () => defineInterrupt,\n  defineTool: () => defineTool,\n  dynamicTool: () => dynamicTool,\n  interrupt: () => interrupt,\n  isDynamicTool: () => isDynamicTool,\n  isToolRequest: () => isToolRequest,\n  isToolResponse: () => isToolResponse,\n  lookupToolByName: () => lookupToolByName,\n  resolveTools: () => resolveTools,\n  toToolDefinition: () => toToolDefinition,\n  tool: () => tool\n});\nmodule.exports = __toCommonJS(tool_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nfunction asTool(registry, action2) {\n  if (action2.__action?.metadata?.type === \"tool\") {\n    return action2;\n  }\n  const fn = (input) => {\n    (0, import_tracing.setCustomMetadataAttributes)({ subtype: \"tool\" });\n    return action2(input);\n  };\n  fn.__action = {\n    ...action2.__action,\n    metadata: { ...action2.__action.metadata, type: \"tool\" }\n  };\n  return fn;\n}\nasync function resolveTools(registry, tools) {\n  if (!tools || tools.length === 0) {\n    return [];\n  }\n  return await Promise.all(\n    tools.map(async (ref) => {\n      if (typeof ref === \"string\") {\n        return await lookupToolByName(registry, ref);\n      } else if ((0, import_core.isAction)(ref)) {\n        return asTool(registry, ref);\n      } else if ((0, import_prompt.isExecutablePrompt)(ref)) {\n        return await ref.asTool();\n      } else if (ref.name) {\n        return await lookupToolByName(\n          registry,\n          ref.metadata?.originalName || ref.name\n        );\n      }\n      throw new Error(\"Tools must be strings, tool definitions, or actions.\");\n    })\n  );\n}\nasync function lookupToolByName(registry, name) {\n  const tool2 = await registry.lookupAction(name) || await registry.lookupAction(`/tool/${name}`) || await registry.lookupAction(`/prompt/${name}`) || await registry.lookupAction(`/dynamic-action-provider/${name}`);\n  if (!tool2) {\n    throw new Error(`Tool ${name} not found`);\n  }\n  return tool2;\n}\nfunction toToolDefinition(tool2) {\n  const originalName = tool2.__action.name;\n  let name = originalName;\n  if (originalName.includes(\"/\")) {\n    name = originalName.substring(originalName.lastIndexOf(\"/\") + 1);\n  }\n  const out = {\n    name,\n    description: tool2.__action.description || \"\",\n    outputSchema: (0, import_schema.toJsonSchema)({\n      schema: tool2.__action.outputSchema ?? import_core.z.void(),\n      jsonSchema: tool2.__action.outputJsonSchema\n    }),\n    inputSchema: (0, import_schema.toJsonSchema)({\n      schema: tool2.__action.inputSchema ?? import_core.z.void(),\n      jsonSchema: tool2.__action.inputJsonSchema\n    })\n  };\n  if (originalName !== name) {\n    out.metadata = { originalName };\n  }\n  return out;\n}\nfunction defineTool(registry, config, fn) {\n  const a = (0, import_core.defineAction)(\n    registry,\n    {\n      ...config,\n      actionType: \"tool\",\n      metadata: { ...config.metadata || {}, type: \"tool\" }\n    },\n    (i, runOptions) => {\n      return fn(i, {\n        ...runOptions,\n        context: { ...runOptions.context },\n        interrupt: interruptTool(registry)\n      });\n    }\n  );\n  implementTool(a, config, registry);\n  return a;\n}\nfunction implementTool(a, config, registry) {\n  a.respond = (interrupt2, responseData, options) => {\n    if (registry) {\n      (0, import_core.assertUnstable)(\n        registry,\n        \"beta\",\n        \"The 'tool.reply' method is part of the 'interrupts' beta feature.\"\n      );\n    }\n    (0, import_schema.parseSchema)(responseData, {\n      jsonSchema: config.outputJsonSchema,\n      schema: config.outputSchema\n    });\n    return {\n      toolResponse: (0, import_core.stripUndefinedProps)({\n        name: interrupt2.toolRequest.name,\n        ref: interrupt2.toolRequest.ref,\n        output: responseData\n      }),\n      metadata: {\n        interruptResponse: options?.metadata || true\n      }\n    };\n  };\n  a.restart = (interrupt2, resumedMetadata, options) => {\n    if (registry) {\n      (0, import_core.assertUnstable)(\n        registry,\n        \"beta\",\n        \"The 'tool.restart' method is part of the 'interrupts' beta feature.\"\n      );\n    }\n    let replaceInput = options?.replaceInput;\n    if (replaceInput) {\n      replaceInput = (0, import_schema.parseSchema)(replaceInput, {\n        schema: config.inputSchema,\n        jsonSchema: config.inputJsonSchema\n      });\n    }\n    return {\n      toolRequest: (0, import_core.stripUndefinedProps)({\n        name: interrupt2.toolRequest.name,\n        ref: interrupt2.toolRequest.ref,\n        input: replaceInput || interrupt2.toolRequest.input\n      }),\n      metadata: (0, import_core.stripUndefinedProps)({\n        ...interrupt2.metadata,\n        resumed: resumedMetadata || true,\n        // annotate the original input if replacing it\n        replacedInput: replaceInput ? interrupt2.toolRequest.input : void 0\n      })\n    };\n  };\n}\nfunction isToolRequest(part) {\n  return !!part.toolRequest;\n}\nfunction isToolResponse(part) {\n  return !!part.toolResponse;\n}\nfunction isDynamicTool(t) {\n  return (0, import_core.isAction)(t) && !t.__registry;\n}\nfunction interrupt(config) {\n  const { requestMetadata, ...toolConfig } = config;\n  return tool(toolConfig, async (input, { interrupt: interrupt2 }) => {\n    if (!config.requestMetadata) interrupt2();\n    else if (typeof config.requestMetadata === \"object\")\n      interrupt2(config.requestMetadata);\n    else interrupt2(await Promise.resolve(config.requestMetadata(input)));\n  });\n}\nfunction defineInterrupt(registry, config) {\n  const i = interrupt(config);\n  registry.registerAction(\"tool\", i);\n  return i;\n}\nclass ToolInterruptError extends Error {\n  constructor(metadata) {\n    super();\n    this.metadata = metadata;\n    this.name = \"ToolInterruptError\";\n  }\n}\nfunction interruptTool(registry) {\n  return (metadata) => {\n    if (registry) {\n      (0, import_core.assertUnstable)(registry, \"beta\", \"Tool interrupts are a beta feature.\");\n    }\n    throw new ToolInterruptError(metadata);\n  };\n}\nfunction tool(config, fn) {\n  return dynamicTool(config, fn);\n}\nfunction dynamicTool(config, fn) {\n  const a = (0, import_core.action)(\n    {\n      ...config,\n      actionType: \"tool\",\n      metadata: { ...config.metadata || {}, type: \"tool\", dynamic: true }\n    },\n    (i, runOptions) => {\n      const interrupt2 = interruptTool(runOptions.registry);\n      if (fn) {\n        return fn(i, {\n          ...runOptions,\n          context: { ...runOptions.context },\n          interrupt: interrupt2\n        });\n      }\n      return interrupt2();\n    }\n  );\n  implementTool(a, config);\n  a.attach = (_) => a;\n  return a;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/types.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  LlmResponseSchema: () => LlmResponseSchema,\n  LlmStatsSchema: () => LlmStatsSchema,\n  ToolCallSchema: () => ToolCallSchema,\n  ToolSchema: () => ToolSchema,\n  toToolWireFormat: () => toToolWireFormat\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nconst LlmStatsSchema = import_core.z.object({\n  latencyMs: import_core.z.number().optional(),\n  inputTokenCount: import_core.z.number().optional(),\n  outputTokenCount: import_core.z.number().optional()\n});\nconst ToolSchema = import_core.z.object({\n  name: import_core.z.string(),\n  description: import_core.z.string().optional(),\n  schema: import_core.z.any()\n});\nconst ToolCallSchema = import_core.z.object({\n  toolName: import_core.z.string(),\n  arguments: import_core.z.any()\n});\nconst LlmResponseSchema = import_core.z.object({\n  completion: import_core.z.string(),\n  toolCalls: import_core.z.array(ToolCallSchema).optional(),\n  stats: LlmStatsSchema\n});\nfunction toToolWireFormat(actions) {\n  if (!actions) return void 0;\n  return actions.map((a) => {\n    return {\n      name: a.__action.name,\n      description: a.__action.description,\n      schema: {\n        input: (0, import_schema.toJsonSchema)({\n          schema: a.__action.inputSchema,\n          jsonSchema: a.__action.inputJsonSchema\n        }),\n        output: (0, import_schema.toJsonSchema)({\n          schema: a.__action.outputSchema,\n          jsonSchema: a.__action.outputJsonSchema\n        })\n      }\n    };\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMscUZBQWlCO0FBQzNDLG9CQUFvQixtQkFBTyxDQUFDLDZGQUF3QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLE1BQU0sQ0FNTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL3R5cGVzLmpzP2RhMzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHR5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHR5cGVzX2V4cG9ydHMsIHtcbiAgTGxtUmVzcG9uc2VTY2hlbWE6ICgpID0+IExsbVJlc3BvbnNlU2NoZW1hLFxuICBMbG1TdGF0c1NjaGVtYTogKCkgPT4gTGxtU3RhdHNTY2hlbWEsXG4gIFRvb2xDYWxsU2NoZW1hOiAoKSA9PiBUb29sQ2FsbFNjaGVtYSxcbiAgVG9vbFNjaGVtYTogKCkgPT4gVG9vbFNjaGVtYSxcbiAgdG9Ub29sV2lyZUZvcm1hdDogKCkgPT4gdG9Ub29sV2lyZUZvcm1hdFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh0eXBlc19leHBvcnRzKTtcbnZhciBpbXBvcnRfY29yZSA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmVcIik7XG52YXIgaW1wb3J0X3NjaGVtYSA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmUvc2NoZW1hXCIpO1xuY29uc3QgTGxtU3RhdHNTY2hlbWEgPSBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gIGxhdGVuY3lNczogaW1wb3J0X2NvcmUuei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICBpbnB1dFRva2VuQ291bnQ6IGltcG9ydF9jb3JlLnoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgb3V0cHV0VG9rZW5Db3VudDogaW1wb3J0X2NvcmUuei5udW1iZXIoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFRvb2xTY2hlbWEgPSBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gIG5hbWU6IGltcG9ydF9jb3JlLnouc3RyaW5nKCksXG4gIGRlc2NyaXB0aW9uOiBpbXBvcnRfY29yZS56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHNjaGVtYTogaW1wb3J0X2NvcmUuei5hbnkoKVxufSk7XG5jb25zdCBUb29sQ2FsbFNjaGVtYSA9IGltcG9ydF9jb3JlLnoub2JqZWN0KHtcbiAgdG9vbE5hbWU6IGltcG9ydF9jb3JlLnouc3RyaW5nKCksXG4gIGFyZ3VtZW50czogaW1wb3J0X2NvcmUuei5hbnkoKVxufSk7XG5jb25zdCBMbG1SZXNwb25zZVNjaGVtYSA9IGltcG9ydF9jb3JlLnoub2JqZWN0KHtcbiAgY29tcGxldGlvbjogaW1wb3J0X2NvcmUuei5zdHJpbmcoKSxcbiAgdG9vbENhbGxzOiBpbXBvcnRfY29yZS56LmFycmF5KFRvb2xDYWxsU2NoZW1hKS5vcHRpb25hbCgpLFxuICBzdGF0czogTGxtU3RhdHNTY2hlbWFcbn0pO1xuZnVuY3Rpb24gdG9Ub29sV2lyZUZvcm1hdChhY3Rpb25zKSB7XG4gIGlmICghYWN0aW9ucykgcmV0dXJuIHZvaWQgMDtcbiAgcmV0dXJuIGFjdGlvbnMubWFwKChhKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGEuX19hY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBhLl9fYWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgc2NoZW1hOiB7XG4gICAgICAgIGlucHV0OiAoMCwgaW1wb3J0X3NjaGVtYS50b0pzb25TY2hlbWEpKHtcbiAgICAgICAgICBzY2hlbWE6IGEuX19hY3Rpb24uaW5wdXRTY2hlbWEsXG4gICAgICAgICAganNvblNjaGVtYTogYS5fX2FjdGlvbi5pbnB1dEpzb25TY2hlbWFcbiAgICAgICAgfSksXG4gICAgICAgIG91dHB1dDogKDAsIGltcG9ydF9zY2hlbWEudG9Kc29uU2NoZW1hKSh7XG4gICAgICAgICAgc2NoZW1hOiBhLl9fYWN0aW9uLm91dHB1dFNjaGVtYSxcbiAgICAgICAgICBqc29uU2NoZW1hOiBhLl9fYWN0aW9uLm91dHB1dEpzb25TY2hlbWFcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBMbG1SZXNwb25zZVNjaGVtYSxcbiAgTGxtU3RhdHNTY2hlbWEsXG4gIFRvb2xDYWxsU2NoZW1hLFxuICBUb29sU2NoZW1hLFxuICB0b1Rvb2xXaXJlRm9ybWF0XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/__codegen/version.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar version_exports = {};\n__export(version_exports, {\n  version: () => version\n});\nmodule.exports = __toCommonJS(version_exports);\nconst version = \"1.21.0\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL19fY29kZWdlbi92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvX19jb2RlZ2VuL3ZlcnNpb24uanM/NGEzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdmVyc2lvbl9leHBvcnRzID0ge307XG5fX2V4cG9ydCh2ZXJzaW9uX2V4cG9ydHMsIHtcbiAgdmVyc2lvbjogKCkgPT4gdmVyc2lvblxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh2ZXJzaW9uX2V4cG9ydHMpO1xuY29uc3QgdmVyc2lvbiA9IFwiMS4yMS4wXCI7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmVyc2lvblxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/action.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/action.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar action_exports = {};\n__export(action_exports, {\n  StatusCodes: () => import_statusTypes.StatusCodes,\n  StatusSchema: () => import_statusTypes.StatusSchema,\n  action: () => action,\n  actionWithMiddleware: () => actionWithMiddleware,\n  defineAction: () => defineAction,\n  defineActionAsync: () => defineActionAsync,\n  getStreamingCallback: () => getStreamingCallback,\n  isAction: () => isAction,\n  isInRuntimeContext: () => isInRuntimeContext,\n  runInActionRuntimeContext: () => runInActionRuntimeContext,\n  runOutsideActionRuntimeContext: () => runOutsideActionRuntimeContext,\n  runWithStreamingCallback: () => runWithStreamingCallback,\n  sentinelNoopStreamingCallback: () => sentinelNoopStreamingCallback\n});\nmodule.exports = __toCommonJS(action_exports);\nvar import_async_context = __webpack_require__(/*! ./async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\");\nvar import_async = __webpack_require__(/*! ./async.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_context = __webpack_require__(/*! ./context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_statusTypes = __webpack_require__(/*! ./statusTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\");\nconst makeNoopAbortSignal = () => new AbortController().signal;\nfunction actionWithMiddleware(action2, middleware) {\n  const wrapped = async (req, options) => {\n    return (await wrapped.run(req, options)).result;\n  };\n  wrapped.__action = action2.__action;\n  wrapped.run = async (req, options) => {\n    let telemetry;\n    const dispatch = async (index, req2, opts) => {\n      if (index === middleware.length) {\n        const result = await action2.run(req2, opts);\n        telemetry = result.telemetry;\n        return result.result;\n      }\n      const currentMiddleware = middleware[index];\n      if (currentMiddleware.length === 3) {\n        return currentMiddleware(\n          req2,\n          opts,\n          async (modifiedReq, modifiedOptions) => dispatch(index + 1, modifiedReq || req2, modifiedOptions || opts)\n        );\n      } else if (currentMiddleware.length === 2) {\n        return currentMiddleware(\n          req2,\n          async (modifiedReq) => dispatch(index + 1, modifiedReq || req2, opts)\n        );\n      } else {\n        throw new Error(\"unspported middleware function shape\");\n      }\n    };\n    wrapped.stream = action2.stream;\n    return { result: await dispatch(0, req, options), telemetry };\n  };\n  return wrapped;\n}\nfunction action(config, fn) {\n  const actionName = typeof config.name === \"string\" ? config.name : `${config.name.pluginId}/${config.name.actionId}`;\n  const actionMetadata = {\n    name: actionName,\n    description: config.description,\n    inputSchema: config.inputSchema,\n    inputJsonSchema: config.inputJsonSchema,\n    outputSchema: config.outputSchema,\n    outputJsonSchema: config.outputJsonSchema,\n    streamSchema: config.streamSchema,\n    metadata: config.metadata,\n    actionType: config.actionType\n  };\n  const actionFn = async (input, options) => {\n    return (await actionFn.run(input, options)).result;\n  };\n  actionFn.__action = { ...actionMetadata };\n  actionFn.run = async (input, options) => {\n    input = (0, import_schema.parseSchema)(input, {\n      schema: config.inputSchema,\n      jsonSchema: config.inputJsonSchema\n    });\n    let traceId;\n    let spanId;\n    let output = await (0, import_tracing.runInNewSpan)(\n      {\n        metadata: {\n          name: actionName\n        },\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"action\",\n          \"genkit:metadata:subtype\": config.actionType,\n          ...options?.telemetryLabels\n        }\n      },\n      async (metadata, span) => {\n        (0, import_tracing.setCustomMetadataAttributes)({\n          subtype: config.actionType\n        });\n        if (options?.context) {\n          (0, import_tracing.setCustomMetadataAttributes)({\n            context: JSON.stringify(options.context)\n          });\n        }\n        traceId = span.spanContext().traceId;\n        spanId = span.spanContext().spanId;\n        metadata.name = actionName;\n        metadata.input = input;\n        try {\n          const actFn = () => fn(input, {\n            ...options,\n            // Context can either be explicitly set, or inherited from the parent action.\n            context: {\n              ...actionFn.__registry?.context,\n              ...options?.context ?? (0, import_context.getContext)()\n            },\n            streamingRequested: !!options?.onChunk && options.onChunk !== sentinelNoopStreamingCallback,\n            sendChunk: options?.onChunk ?? sentinelNoopStreamingCallback,\n            trace: {\n              traceId,\n              spanId\n            },\n            registry: actionFn.__registry,\n            abortSignal: options?.abortSignal ?? makeNoopAbortSignal()\n          });\n          const output2 = await (0, import_context.runWithContext)(options?.context, actFn);\n          metadata.output = JSON.stringify(output2);\n          return output2;\n        } catch (err) {\n          if (typeof err === \"object\") {\n            err.traceId = traceId;\n          }\n          throw err;\n        }\n      }\n    );\n    output = (0, import_schema.parseSchema)(output, {\n      schema: config.outputSchema,\n      jsonSchema: config.outputJsonSchema\n    });\n    return {\n      result: output,\n      telemetry: {\n        traceId,\n        spanId\n      }\n    };\n  };\n  actionFn.stream = (input, opts) => {\n    let chunkStreamController;\n    const chunkStream = new ReadableStream({\n      start(controller) {\n        chunkStreamController = controller;\n      },\n      pull() {\n      },\n      cancel() {\n      }\n    });\n    const invocationPromise = actionFn.run(config.inputSchema ? config.inputSchema.parse(input) : input, {\n      onChunk: (chunk) => {\n        chunkStreamController.enqueue(chunk);\n      },\n      context: {\n        ...actionFn.__registry?.context,\n        ...opts?.context ?? (0, import_context.getContext)()\n      },\n      abortSignal: opts?.abortSignal,\n      telemetryLabels: opts?.telemetryLabels\n    }).then((s) => s.result).finally(() => {\n      chunkStreamController.close();\n    });\n    return {\n      output: invocationPromise,\n      stream: async function* () {\n        const reader = chunkStream.getReader();\n        while (true) {\n          const chunk = await reader.read();\n          if (chunk.value) {\n            yield chunk.value;\n          }\n          if (chunk.done) {\n            break;\n          }\n        }\n        return await invocationPromise;\n      }()\n    };\n  };\n  if (config.use) {\n    return actionWithMiddleware(actionFn, config.use);\n  }\n  return actionFn;\n}\nfunction isAction(a) {\n  return typeof a === \"function\" && \"__action\" in a;\n}\nfunction defineAction(registry, config, fn) {\n  if (isInRuntimeContext()) {\n    throw new Error(\n      \"Cannot define new actions at runtime.\\nSee: https://github.com/firebase/genkit/blob/main/docs/errors/no_new_actions_at_runtime.md\"\n    );\n  }\n  const act = action(config, async (i, options) => {\n    await registry.initializeAllPlugins();\n    return await runInActionRuntimeContext(() => fn(i, options));\n  });\n  act.__action.actionType = config.actionType;\n  registry.registerAction(config.actionType, act);\n  return act;\n}\nfunction defineActionAsync(registry, actionType, name, config, onInit) {\n  const actionName = typeof name === \"string\" ? name : `${name.pluginId}/${name.actionId}`;\n  const actionPromise = (0, import_async.lazy)(\n    () => config.then((resolvedConfig) => {\n      const act = action(\n        resolvedConfig,\n        async (i, options) => {\n          await registry.initializeAllPlugins();\n          return await runInActionRuntimeContext(\n            () => resolvedConfig.fn(i, options)\n          );\n        }\n      );\n      act.__action.actionType = actionType;\n      onInit?.(act);\n      return act;\n    })\n  );\n  registry.registerActionAsync(actionType, actionName, actionPromise);\n  return actionPromise;\n}\nconst streamingAlsKey = \"core.action.streamingCallback\";\nconst sentinelNoopStreamingCallback = () => null;\nfunction runWithStreamingCallback(streamingCallback, fn) {\n  return (0, import_async_context.getAsyncContext)().run(\n    streamingAlsKey,\n    streamingCallback || sentinelNoopStreamingCallback,\n    fn\n  );\n}\nfunction getStreamingCallback() {\n  const cb = (0, import_async_context.getAsyncContext)().getStore(streamingAlsKey);\n  if (cb === sentinelNoopStreamingCallback) {\n    return void 0;\n  }\n  return cb;\n}\nconst runtimeContextAslKey = \"core.action.runtimeContext\";\nfunction isInRuntimeContext() {\n  return (0, import_async_context.getAsyncContext)().getStore(runtimeContextAslKey) === \"runtime\";\n}\nfunction runInActionRuntimeContext(fn) {\n  return (0, import_async_context.getAsyncContext)().run(runtimeContextAslKey, \"runtime\", fn);\n}\nfunction runOutsideActionRuntimeContext(fn) {\n  return (0, import_async_context.getAsyncContext)().run(runtimeContextAslKey, \"outside\", fn);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/async-context.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar async_context_exports = {};\n__export(async_context_exports, {\n  getAsyncContext: () => getAsyncContext,\n  setAsyncContext: () => setAsyncContext\n});\nmodule.exports = __toCommonJS(async_context_exports);\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nconst asyncContextKey = \"__genkit_AsyncContext\";\nfunction getAsyncContext() {\n  if (!global[asyncContextKey]) {\n    throw new import_error.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: \"Async context is not initialized.\"\n    });\n  }\n  return global[asyncContextKey];\n}\nfunction setAsyncContext(context) {\n  if (global[asyncContextKey]) return;\n  global[asyncContextKey] = context;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=async-context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2FzeW5jLWNvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9hc3luYy1jb250ZXh0LmpzP2I2ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGFzeW5jX2NvbnRleHRfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoYXN5bmNfY29udGV4dF9leHBvcnRzLCB7XG4gIGdldEFzeW5jQ29udGV4dDogKCkgPT4gZ2V0QXN5bmNDb250ZXh0LFxuICBzZXRBc3luY0NvbnRleHQ6ICgpID0+IHNldEFzeW5jQ29udGV4dFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhhc3luY19jb250ZXh0X2V4cG9ydHMpO1xudmFyIGltcG9ydF9lcnJvciA9IHJlcXVpcmUoXCIuL2Vycm9yLmpzXCIpO1xuY29uc3QgYXN5bmNDb250ZXh0S2V5ID0gXCJfX2dlbmtpdF9Bc3luY0NvbnRleHRcIjtcbmZ1bmN0aW9uIGdldEFzeW5jQ29udGV4dCgpIHtcbiAgaWYgKCFnbG9iYWxbYXN5bmNDb250ZXh0S2V5XSkge1xuICAgIHRocm93IG5ldyBpbXBvcnRfZXJyb3IuR2Vua2l0RXJyb3Ioe1xuICAgICAgc3RhdHVzOiBcIkZBSUxFRF9QUkVDT05ESVRJT05cIixcbiAgICAgIG1lc3NhZ2U6IFwiQXN5bmMgY29udGV4dCBpcyBub3QgaW5pdGlhbGl6ZWQuXCJcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZ2xvYmFsW2FzeW5jQ29udGV4dEtleV07XG59XG5mdW5jdGlvbiBzZXRBc3luY0NvbnRleHQoY29udGV4dCkge1xuICBpZiAoZ2xvYmFsW2FzeW5jQ29udGV4dEtleV0pIHJldHVybjtcbiAgZ2xvYmFsW2FzeW5jQ29udGV4dEtleV0gPSBjb250ZXh0O1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEFzeW5jQ29udGV4dCxcbiAgc2V0QXN5bmNDb250ZXh0XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLWNvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/async.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/async.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar async_exports = {};\n__export(async_exports, {\n  Channel: () => Channel,\n  LazyPromise: () => LazyPromise,\n  lazy: () => lazy\n});\nmodule.exports = __toCommonJS(async_exports);\nfunction createTask() {\n  let resolve, reject;\n  const promise = new Promise(\n    (res, rej) => [resolve, reject] = [res, rej]\n  );\n  return {\n    resolve,\n    reject,\n    promise\n  };\n}\nclass Channel {\n  ready = createTask();\n  buffer = [];\n  err = null;\n  send(value) {\n    this.buffer.push(value);\n    this.ready.resolve();\n  }\n  close() {\n    this.buffer.push(null);\n    this.ready.resolve();\n  }\n  error(err) {\n    this.err = err;\n    this.ready.reject(err);\n  }\n  [Symbol.asyncIterator]() {\n    return {\n      next: async () => {\n        if (this.err) {\n          throw this.err;\n        }\n        if (!this.buffer.length) {\n          await this.ready.promise;\n        }\n        const value = this.buffer.shift();\n        if (!this.buffer.length) {\n          this.ready = createTask();\n        }\n        return {\n          value,\n          done: !value\n        };\n      }\n    };\n  }\n}\nclass LazyPromise {\n  executor;\n  promise;\n  constructor(executor) {\n    this.executor = executor;\n  }\n  then(onfulfilled, onrejected) {\n    this.promise ??= new Promise(this.executor);\n    return this.promise.then(onfulfilled, onrejected);\n  }\n}\nfunction lazy(fn) {\n  return new LazyPromise((resolve, reject) => {\n    try {\n      resolve(fn());\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=async.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2FzeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2FzeW5jLmpzPzViMzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGFzeW5jX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGFzeW5jX2V4cG9ydHMsIHtcbiAgQ2hhbm5lbDogKCkgPT4gQ2hhbm5lbCxcbiAgTGF6eVByb21pc2U6ICgpID0+IExhenlQcm9taXNlLFxuICBsYXp5OiAoKSA9PiBsYXp5XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGFzeW5jX2V4cG9ydHMpO1xuZnVuY3Rpb24gY3JlYXRlVGFzaygpIHtcbiAgbGV0IHJlc29sdmUsIHJlamVjdDtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKFxuICAgIChyZXMsIHJlaikgPT4gW3Jlc29sdmUsIHJlamVjdF0gPSBbcmVzLCByZWpdXG4gICk7XG4gIHJldHVybiB7XG4gICAgcmVzb2x2ZSxcbiAgICByZWplY3QsXG4gICAgcHJvbWlzZVxuICB9O1xufVxuY2xhc3MgQ2hhbm5lbCB7XG4gIHJlYWR5ID0gY3JlYXRlVGFzaygpO1xuICBidWZmZXIgPSBbXTtcbiAgZXJyID0gbnVsbDtcbiAgc2VuZCh2YWx1ZSkge1xuICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuICAgIHRoaXMucmVhZHkucmVzb2x2ZSgpO1xuICB9XG4gIGNsb3NlKCkge1xuICAgIHRoaXMuYnVmZmVyLnB1c2gobnVsbCk7XG4gICAgdGhpcy5yZWFkeS5yZXNvbHZlKCk7XG4gIH1cbiAgZXJyb3IoZXJyKSB7XG4gICAgdGhpcy5lcnIgPSBlcnI7XG4gICAgdGhpcy5yZWFkeS5yZWplY3QoZXJyKTtcbiAgfVxuICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmVycikge1xuICAgICAgICAgIHRocm93IHRoaXMuZXJyO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5yZWFkeS5wcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5idWZmZXIuc2hpZnQoKTtcbiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnJlYWR5ID0gY3JlYXRlVGFzaygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgZG9uZTogIXZhbHVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuY2xhc3MgTGF6eVByb21pc2Uge1xuICBleGVjdXRvcjtcbiAgcHJvbWlzZTtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICB0aGlzLmV4ZWN1dG9yID0gZXhlY3V0b3I7XG4gIH1cbiAgdGhlbihvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCkge1xuICAgIHRoaXMucHJvbWlzZSA/Pz0gbmV3IFByb21pc2UodGhpcy5leGVjdXRvcik7XG4gICAgcmV0dXJuIHRoaXMucHJvbWlzZS50aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKTtcbiAgfVxufVxuZnVuY3Rpb24gbGF6eShmbikge1xuICByZXR1cm4gbmV3IExhenlQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZWplY3QoZSk7XG4gICAgfVxuICB9KTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBDaGFubmVsLFxuICBMYXp5UHJvbWlzZSxcbiAgbGF6eVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/background-action.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar background_action_exports = {};\n__export(background_action_exports, {\n  OperationSchema: () => OperationSchema,\n  backgroundAction: () => backgroundAction,\n  defineBackgroundAction: () => defineBackgroundAction,\n  isBackgroundAction: () => isBackgroundAction,\n  lookupBackgroundAction: () => lookupBackgroundAction,\n  registerBackgroundAction: () => registerBackgroundAction\n});\nmodule.exports = __toCommonJS(background_action_exports);\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\"));\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nconst OperationSchema = z.object({\n  action: z.string().optional(),\n  id: z.string(),\n  done: z.boolean().optional(),\n  output: z.any().optional(),\n  error: z.object({ message: z.string() }).passthrough().optional(),\n  metadata: z.record(z.string(), z.any()).optional()\n});\nasync function lookupBackgroundAction(registry, key) {\n  const root = await registry.lookupAction(key);\n  if (!root) return void 0;\n  const actionName = key.substring(key.indexOf(\"/\", 1) + 1);\n  return new BackgroundActionImpl(\n    root,\n    await registry.lookupAction(`/check-operation/${actionName}/check`),\n    await registry.lookupAction(`/cancel-operation/${actionName}/cancel`)\n  );\n}\nclass BackgroundActionImpl {\n  __action;\n  startAction;\n  checkAction;\n  cancelAction;\n  constructor(startAction, checkAction, cancelAction) {\n    this.__action = {\n      name: startAction.__action.name,\n      description: startAction.__action.description,\n      inputSchema: startAction.__action.inputSchema,\n      inputJsonSchema: startAction.__action.inputJsonSchema,\n      metadata: startAction.__action.metadata,\n      actionType: startAction.__action.actionType\n    };\n    this.startAction = startAction;\n    this.checkAction = checkAction;\n    this.cancelAction = cancelAction;\n  }\n  async start(input, options) {\n    return await this.startAction(input, options);\n  }\n  async check(operation) {\n    return await this.checkAction(operation);\n  }\n  get supportsCancel() {\n    return !!this.cancelAction;\n  }\n  async cancel(operation) {\n    if (!this.cancelAction) {\n      return operation;\n    }\n    return await this.cancelAction(operation);\n  }\n}\nfunction defineBackgroundAction(registry, config) {\n  const act = backgroundAction(config);\n  registerBackgroundAction(registry, act);\n  return act;\n}\nfunction registerBackgroundAction(registry, act, opts) {\n  registry.registerAction(\n    act.startAction.__action.actionType,\n    act.startAction,\n    opts\n  );\n  registry.registerAction(\n    act.checkAction.__action.actionType,\n    act.checkAction,\n    opts\n  );\n  if (act.cancelAction) {\n    registry.registerAction(\n      act.cancelAction.__action.actionType,\n      act.cancelAction,\n      opts\n    );\n  }\n}\nfunction backgroundAction(config) {\n  const startAction = (0, import_action.action)(\n    {\n      actionType: config.actionType,\n      name: config.name,\n      description: config.description,\n      inputSchema: config.inputSchema,\n      inputJsonSchema: config.inputJsonSchema,\n      outputSchema: OperationSchema,\n      metadata: {\n        ...config.metadata,\n        outputSchema: (0, import_schema.toJsonSchema)({\n          schema: config.outputSchema,\n          jsonSchema: config.outputJsonSchema\n        })\n      },\n      use: config.use\n    },\n    async (input, options) => {\n      const operation = await config.start(input, options);\n      operation.action = `/${config.actionType}/${config.name}`;\n      return operation;\n    }\n  );\n  const checkAction = (0, import_action.action)(\n    {\n      actionType: \"check-operation\",\n      name: `${config.name}/check`,\n      description: config.description,\n      inputSchema: OperationSchema,\n      inputJsonSchema: config.inputJsonSchema,\n      outputSchema: OperationSchema,\n      metadata: {\n        ...config.metadata,\n        outputSchema: (0, import_schema.toJsonSchema)({\n          schema: config.outputSchema,\n          jsonSchema: config.outputJsonSchema\n        })\n      }\n    },\n    async (input) => {\n      const operation = await config.check(input);\n      operation.action = `/${config.actionType}/${config.name}`;\n      return operation;\n    }\n  );\n  let cancelAction = void 0;\n  if (config.cancel) {\n    cancelAction = (0, import_action.action)(\n      {\n        actionType: \"cancel-operation\",\n        name: `${config.name}/cancel`,\n        description: config.description,\n        inputSchema: OperationSchema,\n        inputJsonSchema: config.inputJsonSchema,\n        outputSchema: OperationSchema,\n        metadata: {\n          ...config.metadata,\n          outputSchema: (0, import_schema.toJsonSchema)({\n            schema: config.outputSchema,\n            jsonSchema: config.outputJsonSchema\n          })\n        }\n      },\n      async (input) => {\n        if (!config.cancel) {\n          throw new import_error.GenkitError({\n            status: \"UNAVAILABLE\",\n            message: `${config.name} does not support cancellation.`\n          });\n        }\n        const operation = await config.cancel(input);\n        operation.action = `/${config.actionType}/${config.name}`;\n        return operation;\n      }\n    );\n  }\n  return new BackgroundActionImpl(startAction, checkAction, cancelAction);\n}\nfunction isBackgroundAction(a) {\n  return a instanceof BackgroundActionImpl;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=background-action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/context.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/context.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar context_exports = {};\n__export(context_exports, {\n  apiKey: () => apiKey,\n  getContext: () => getContext,\n  runWithContext: () => runWithContext\n});\nmodule.exports = __toCommonJS(context_exports);\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_async_context = __webpack_require__(/*! ./async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nconst contextAlsKey = \"core.auth.context\";\nfunction runWithContext(context, fn) {\n  if (context === void 0) {\n    return fn();\n  }\n  return (0, import_async_context.getAsyncContext)().run(\n    contextAlsKey,\n    context,\n    () => (0, import_action.runInActionRuntimeContext)(fn)\n  );\n}\nfunction getContext() {\n  return (0, import_async_context.getAsyncContext)().getStore(contextAlsKey);\n}\nfunction apiKey(valueOrPolicy) {\n  return async (request) => {\n    const context = {\n      auth: { apiKey: request.headers[\"authorization\"] }\n    };\n    if (typeof valueOrPolicy === \"string\") {\n      if (!context.auth?.apiKey) {\n        console.error(\"THROWING UNAUTHENTICATED\");\n        throw new import_error.UserFacingError(\"UNAUTHENTICATED\", \"Unauthenticated\");\n      }\n      if (context.auth?.apiKey != valueOrPolicy) {\n        console.error(\"Throwing PERMISSION_DENIED\");\n        throw new import_error.UserFacingError(\"PERMISSION_DENIED\", \"Permission Denied\");\n      }\n    } else if (typeof valueOrPolicy === \"function\") {\n      await valueOrPolicy(context);\n    } else if (typeof valueOrPolicy !== \"undefined\") {\n      throw new Error(\n        `Invalid type ${typeof valueOrPolicy} passed to apiKey()`\n      );\n    }\n    return context;\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2NvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWE7QUFDekMsMkJBQTJCLG1CQUFPLENBQUMsZ0dBQW9CO0FBQ3ZELG1CQUFtQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FJTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvY29udGV4dC5qcz9iZmFhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBjb250ZXh0X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGNvbnRleHRfZXhwb3J0cywge1xuICBhcGlLZXk6ICgpID0+IGFwaUtleSxcbiAgZ2V0Q29udGV4dDogKCkgPT4gZ2V0Q29udGV4dCxcbiAgcnVuV2l0aENvbnRleHQ6ICgpID0+IHJ1bldpdGhDb250ZXh0XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGNvbnRleHRfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2FjdGlvbiA9IHJlcXVpcmUoXCIuL2FjdGlvbi5qc1wiKTtcbnZhciBpbXBvcnRfYXN5bmNfY29udGV4dCA9IHJlcXVpcmUoXCIuL2FzeW5jLWNvbnRleHQuanNcIik7XG52YXIgaW1wb3J0X2Vycm9yID0gcmVxdWlyZShcIi4vZXJyb3IuanNcIik7XG5jb25zdCBjb250ZXh0QWxzS2V5ID0gXCJjb3JlLmF1dGguY29udGV4dFwiO1xuZnVuY3Rpb24gcnVuV2l0aENvbnRleHQoY29udGV4dCwgZm4pIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiBmbigpO1xuICB9XG4gIHJldHVybiAoMCwgaW1wb3J0X2FzeW5jX2NvbnRleHQuZ2V0QXN5bmNDb250ZXh0KSgpLnJ1bihcbiAgICBjb250ZXh0QWxzS2V5LFxuICAgIGNvbnRleHQsXG4gICAgKCkgPT4gKDAsIGltcG9ydF9hY3Rpb24ucnVuSW5BY3Rpb25SdW50aW1lQ29udGV4dCkoZm4pXG4gICk7XG59XG5mdW5jdGlvbiBnZXRDb250ZXh0KCkge1xuICByZXR1cm4gKDAsIGltcG9ydF9hc3luY19jb250ZXh0LmdldEFzeW5jQ29udGV4dCkoKS5nZXRTdG9yZShjb250ZXh0QWxzS2V5KTtcbn1cbmZ1bmN0aW9uIGFwaUtleSh2YWx1ZU9yUG9saWN5KSB7XG4gIHJldHVybiBhc3luYyAocmVxdWVzdCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICBhdXRoOiB7IGFwaUtleTogcmVxdWVzdC5oZWFkZXJzW1wiYXV0aG9yaXphdGlvblwiXSB9XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHZhbHVlT3JQb2xpY3kgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmICghY29udGV4dC5hdXRoPy5hcGlLZXkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRIUk9XSU5HIFVOQVVUSEVOVElDQVRFRFwiKTtcbiAgICAgICAgdGhyb3cgbmV3IGltcG9ydF9lcnJvci5Vc2VyRmFjaW5nRXJyb3IoXCJVTkFVVEhFTlRJQ0FURURcIiwgXCJVbmF1dGhlbnRpY2F0ZWRcIik7XG4gICAgICB9XG4gICAgICBpZiAoY29udGV4dC5hdXRoPy5hcGlLZXkgIT0gdmFsdWVPclBvbGljeSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhyb3dpbmcgUEVSTUlTU0lPTl9ERU5JRURcIik7XG4gICAgICAgIHRocm93IG5ldyBpbXBvcnRfZXJyb3IuVXNlckZhY2luZ0Vycm9yKFwiUEVSTUlTU0lPTl9ERU5JRURcIiwgXCJQZXJtaXNzaW9uIERlbmllZFwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZU9yUG9saWN5ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGF3YWl0IHZhbHVlT3JQb2xpY3koY29udGV4dCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWVPclBvbGljeSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCB0eXBlICR7dHlwZW9mIHZhbHVlT3JQb2xpY3l9IHBhc3NlZCB0byBhcGlLZXkoKWBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0O1xuICB9O1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFwaUtleSxcbiAgZ2V0Q29udGV4dCxcbiAgcnVuV2l0aENvbnRleHRcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/dynamic-action-provider.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/dynamic-action-provider.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar dynamic_action_provider_exports = {};\n__export(dynamic_action_provider_exports, {\n  defineDynamicActionProvider: () => defineDynamicActionProvider,\n  isDynamicActionProvider: () => isDynamicActionProvider\n});\nmodule.exports = __toCommonJS(dynamic_action_provider_exports);\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nclass SimpleCache {\n  value;\n  expiresAt;\n  ttlMillis;\n  dap;\n  dapFn;\n  fetchPromise = null;\n  constructor(dap, config, dapFn) {\n    this.dap = dap;\n    this.dapFn = dapFn;\n    this.ttlMillis = !config.cacheConfig?.ttlMillis ? 3 * 1e3 : config.cacheConfig?.ttlMillis;\n  }\n  async getOrFetch() {\n    const isStale = !this.value || !this.expiresAt || this.ttlMillis < 0 || Date.now() > this.expiresAt;\n    if (!isStale) {\n      return this.value;\n    }\n    if (!this.fetchPromise) {\n      this.fetchPromise = (async () => {\n        try {\n          this.value = await this.dapFn();\n          this.expiresAt = Date.now() + this.ttlMillis;\n          this.dap.run(this.value);\n          return this.value;\n        } catch (error) {\n          console.error(\"Error fetching Dynamic Action Provider value:\", error);\n          this.invalidate();\n          throw error;\n        } finally {\n          this.fetchPromise = null;\n        }\n      })();\n    }\n    return await this.fetchPromise;\n  }\n  invalidate() {\n    this.value = void 0;\n  }\n}\nfunction isDynamicActionProvider(obj) {\n  return obj.__action?.metadata?.type == \"dynamic-action-provider\";\n}\nfunction transformDapValue(value) {\n  const metadata = {};\n  for (const key of Object.keys(value)) {\n    metadata[key] = value[key].map((a) => {\n      return a.__action;\n    });\n  }\n  return metadata;\n}\nfunction defineDynamicActionProvider(registry, config, fn) {\n  let cfg;\n  if (typeof config == \"string\") {\n    cfg = { name: config };\n  } else {\n    cfg = { ...config };\n  }\n  const a = (0, import_action.defineAction)(\n    registry,\n    {\n      ...cfg,\n      actionType: \"dynamic-action-provider\",\n      metadata: { ...cfg.metadata || {}, type: \"dynamic-action-provider\" }\n    },\n    async (i, _options) => {\n      return transformDapValue(i);\n    }\n  );\n  implementDap(a, cfg, fn);\n  return a;\n}\nfunction implementDap(dap, config, dapFn) {\n  dap.__cache = new SimpleCache(dap, config, dapFn);\n  dap.invalidateCache = () => {\n    dap.__cache.invalidate();\n  };\n  dap.getAction = async (actionType, actionName) => {\n    const result = await dap.__cache.getOrFetch();\n    if (result[actionType]) {\n      return result[actionType].find((t) => t.__action.name == actionName);\n    }\n    return void 0;\n  };\n  dap.listActionMetadata = async (actionType, actionName) => {\n    const result = await dap.__cache.getOrFetch();\n    if (!result[actionType]) {\n      return [];\n    }\n    const metadata = result[actionType].map((a) => a.__action);\n    if (actionName == \"*\") {\n      return metadata;\n    }\n    if (actionName.endsWith(\"*\")) {\n      const prefix = actionName.slice(0, -1);\n      return metadata.filter((m) => m.name.startsWith(prefix));\n    }\n    return metadata.filter((m) => m.name == actionName);\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=dynamic-action-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2R5bmFtaWMtYWN0aW9uLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxvQkFBb0IsbUJBQU8sQ0FBQyxrRkFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixJQUFJO0FBQ0osWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxQkFBcUI7QUFDdkMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FHTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvZHluYW1pYy1hY3Rpb24tcHJvdmlkZXIuanM/NjMxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZHluYW1pY19hY3Rpb25fcHJvdmlkZXJfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZHluYW1pY19hY3Rpb25fcHJvdmlkZXJfZXhwb3J0cywge1xuICBkZWZpbmVEeW5hbWljQWN0aW9uUHJvdmlkZXI6ICgpID0+IGRlZmluZUR5bmFtaWNBY3Rpb25Qcm92aWRlcixcbiAgaXNEeW5hbWljQWN0aW9uUHJvdmlkZXI6ICgpID0+IGlzRHluYW1pY0FjdGlvblByb3ZpZGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGR5bmFtaWNfYWN0aW9uX3Byb3ZpZGVyX2V4cG9ydHMpO1xudmFyIGltcG9ydF9hY3Rpb24gPSByZXF1aXJlKFwiLi9hY3Rpb24uanNcIik7XG5jbGFzcyBTaW1wbGVDYWNoZSB7XG4gIHZhbHVlO1xuICBleHBpcmVzQXQ7XG4gIHR0bE1pbGxpcztcbiAgZGFwO1xuICBkYXBGbjtcbiAgZmV0Y2hQcm9taXNlID0gbnVsbDtcbiAgY29uc3RydWN0b3IoZGFwLCBjb25maWcsIGRhcEZuKSB7XG4gICAgdGhpcy5kYXAgPSBkYXA7XG4gICAgdGhpcy5kYXBGbiA9IGRhcEZuO1xuICAgIHRoaXMudHRsTWlsbGlzID0gIWNvbmZpZy5jYWNoZUNvbmZpZz8udHRsTWlsbGlzID8gMyAqIDFlMyA6IGNvbmZpZy5jYWNoZUNvbmZpZz8udHRsTWlsbGlzO1xuICB9XG4gIGFzeW5jIGdldE9yRmV0Y2goKSB7XG4gICAgY29uc3QgaXNTdGFsZSA9ICF0aGlzLnZhbHVlIHx8ICF0aGlzLmV4cGlyZXNBdCB8fCB0aGlzLnR0bE1pbGxpcyA8IDAgfHwgRGF0ZS5ub3coKSA+IHRoaXMuZXhwaXJlc0F0O1xuICAgIGlmICghaXNTdGFsZSkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuICAgIGlmICghdGhpcy5mZXRjaFByb21pc2UpIHtcbiAgICAgIHRoaXMuZmV0Y2hQcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLnZhbHVlID0gYXdhaXQgdGhpcy5kYXBGbigpO1xuICAgICAgICAgIHRoaXMuZXhwaXJlc0F0ID0gRGF0ZS5ub3coKSArIHRoaXMudHRsTWlsbGlzO1xuICAgICAgICAgIHRoaXMuZGFwLnJ1bih0aGlzLnZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgRHluYW1pYyBBY3Rpb24gUHJvdmlkZXIgdmFsdWU6XCIsIGVycm9yKTtcbiAgICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aGlzLmZldGNoUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0pKCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmZldGNoUHJvbWlzZTtcbiAgfVxuICBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMudmFsdWUgPSB2b2lkIDA7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzRHluYW1pY0FjdGlvblByb3ZpZGVyKG9iaikge1xuICByZXR1cm4gb2JqLl9fYWN0aW9uPy5tZXRhZGF0YT8udHlwZSA9PSBcImR5bmFtaWMtYWN0aW9uLXByb3ZpZGVyXCI7XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXBWYWx1ZSh2YWx1ZSkge1xuICBjb25zdCBtZXRhZGF0YSA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh2YWx1ZSkpIHtcbiAgICBtZXRhZGF0YVtrZXldID0gdmFsdWVba2V5XS5tYXAoKGEpID0+IHtcbiAgICAgIHJldHVybiBhLl9fYWN0aW9uO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBtZXRhZGF0YTtcbn1cbmZ1bmN0aW9uIGRlZmluZUR5bmFtaWNBY3Rpb25Qcm92aWRlcihyZWdpc3RyeSwgY29uZmlnLCBmbikge1xuICBsZXQgY2ZnO1xuICBpZiAodHlwZW9mIGNvbmZpZyA9PSBcInN0cmluZ1wiKSB7XG4gICAgY2ZnID0geyBuYW1lOiBjb25maWcgfTtcbiAgfSBlbHNlIHtcbiAgICBjZmcgPSB7IC4uLmNvbmZpZyB9O1xuICB9XG4gIGNvbnN0IGEgPSAoMCwgaW1wb3J0X2FjdGlvbi5kZWZpbmVBY3Rpb24pKFxuICAgIHJlZ2lzdHJ5LFxuICAgIHtcbiAgICAgIC4uLmNmZyxcbiAgICAgIGFjdGlvblR5cGU6IFwiZHluYW1pYy1hY3Rpb24tcHJvdmlkZXJcIixcbiAgICAgIG1ldGFkYXRhOiB7IC4uLmNmZy5tZXRhZGF0YSB8fCB7fSwgdHlwZTogXCJkeW5hbWljLWFjdGlvbi1wcm92aWRlclwiIH1cbiAgICB9LFxuICAgIGFzeW5jIChpLCBfb3B0aW9ucykgPT4ge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybURhcFZhbHVlKGkpO1xuICAgIH1cbiAgKTtcbiAgaW1wbGVtZW50RGFwKGEsIGNmZywgZm4pO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIGltcGxlbWVudERhcChkYXAsIGNvbmZpZywgZGFwRm4pIHtcbiAgZGFwLl9fY2FjaGUgPSBuZXcgU2ltcGxlQ2FjaGUoZGFwLCBjb25maWcsIGRhcEZuKTtcbiAgZGFwLmludmFsaWRhdGVDYWNoZSA9ICgpID0+IHtcbiAgICBkYXAuX19jYWNoZS5pbnZhbGlkYXRlKCk7XG4gIH07XG4gIGRhcC5nZXRBY3Rpb24gPSBhc3luYyAoYWN0aW9uVHlwZSwgYWN0aW9uTmFtZSkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRhcC5fX2NhY2hlLmdldE9yRmV0Y2goKTtcbiAgICBpZiAocmVzdWx0W2FjdGlvblR5cGVdKSB7XG4gICAgICByZXR1cm4gcmVzdWx0W2FjdGlvblR5cGVdLmZpbmQoKHQpID0+IHQuX19hY3Rpb24ubmFtZSA9PSBhY3Rpb25OYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfTtcbiAgZGFwLmxpc3RBY3Rpb25NZXRhZGF0YSA9IGFzeW5jIChhY3Rpb25UeXBlLCBhY3Rpb25OYW1lKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGFwLl9fY2FjaGUuZ2V0T3JGZXRjaCgpO1xuICAgIGlmICghcmVzdWx0W2FjdGlvblR5cGVdKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IG1ldGFkYXRhID0gcmVzdWx0W2FjdGlvblR5cGVdLm1hcCgoYSkgPT4gYS5fX2FjdGlvbik7XG4gICAgaWYgKGFjdGlvbk5hbWUgPT0gXCIqXCIpIHtcbiAgICAgIHJldHVybiBtZXRhZGF0YTtcbiAgICB9XG4gICAgaWYgKGFjdGlvbk5hbWUuZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgICBjb25zdCBwcmVmaXggPSBhY3Rpb25OYW1lLnNsaWNlKDAsIC0xKTtcbiAgICAgIHJldHVybiBtZXRhZGF0YS5maWx0ZXIoKG0pID0+IG0ubmFtZS5zdGFydHNXaXRoKHByZWZpeCkpO1xuICAgIH1cbiAgICByZXR1cm4gbWV0YWRhdGEuZmlsdGVyKChtKSA9PiBtLm5hbWUgPT0gYWN0aW9uTmFtZSk7XG4gIH07XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVmaW5lRHluYW1pY0FjdGlvblByb3ZpZGVyLFxuICBpc0R5bmFtaWNBY3Rpb25Qcm92aWRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1keW5hbWljLWFjdGlvbi1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/dynamic-action-provider.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/error.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/error.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar error_exports = {};\n__export(error_exports, {\n  GenkitError: () => GenkitError,\n  UnstableApiError: () => UnstableApiError,\n  UserFacingError: () => UserFacingError,\n  assertUnstable: () => assertUnstable,\n  getCallableJSON: () => getCallableJSON,\n  getErrorMessage: () => getErrorMessage,\n  getErrorStack: () => getErrorStack,\n  getHttpStatus: () => getHttpStatus\n});\nmodule.exports = __toCommonJS(error_exports);\nvar import_statusTypes = __webpack_require__(/*! ./statusTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\");\nclass GenkitError extends Error {\n  source;\n  status;\n  detail;\n  code;\n  // For easy printing, we wrap the error with information like the source\n  // and status, but that's redundant with JSON.\n  originalMessage;\n  constructor({\n    status,\n    message,\n    detail,\n    source\n  }) {\n    super(`${source ? `${source}: ` : \"\"}${status}: ${message}`);\n    this.originalMessage = message;\n    this.code = (0, import_statusTypes.httpStatusCode)(status);\n    this.status = status;\n    this.detail = detail;\n    this.name = \"GenkitError\";\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON() {\n    return {\n      // This error type is used by 3P authors with the field \"detail\",\n      // but the actual Callable protocol value is \"details\"\n      ...this.detail === void 0 ? {} : { details: this.detail },\n      status: this.status,\n      message: this.originalMessage\n    };\n  }\n}\nclass UnstableApiError extends GenkitError {\n  constructor(level, message) {\n    super({\n      status: \"FAILED_PRECONDITION\",\n      message: `${message ? message + \" \" : \"\"}This API requires '${level}' stability level.\n\nTo use this feature, initialize Genkit using \\`import {genkit} from \"genkit/${level}\"\\`.`\n    });\n    this.name = \"UnstableApiError\";\n  }\n}\nfunction assertUnstable(registry, level, message) {\n  if (level === \"beta\" && registry.apiStability === \"stable\") {\n    throw new UnstableApiError(level, message);\n  }\n}\nclass UserFacingError extends GenkitError {\n  constructor(status, message, details) {\n    super({ status, detail: details, message });\n    super.name = \"UserFacingError\";\n  }\n}\nfunction getHttpStatus(e) {\n  if (e instanceof GenkitError) {\n    return e.code;\n  }\n  return 500;\n}\nfunction getCallableJSON(e) {\n  if (e instanceof GenkitError) {\n    return e.toJSON();\n  }\n  return {\n    message: \"Internal Error\",\n    status: \"INTERNAL\"\n  };\n}\nfunction getErrorMessage(e) {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return `${e}`;\n}\nfunction getErrorStack(e) {\n  if (e instanceof Error) {\n    return e.stack;\n  }\n  return void 0;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQyw0RkFBa0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsYUFBYSxZQUFZLE9BQU8sU0FBUyxFQUFFLE9BQU8sSUFBSSxRQUFRO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLElBQUksc0JBQXNCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw2QkFBNkIscUJBQXFCLE1BQU07O0FBRTFFLHVEQUF1RCxRQUFRLGVBQWUsTUFBTTtBQUNwRixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtDQUFrQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksRUFBRTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBU0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Vycm9yLmpzP2UxMmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGVycm9yX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGVycm9yX2V4cG9ydHMsIHtcbiAgR2Vua2l0RXJyb3I6ICgpID0+IEdlbmtpdEVycm9yLFxuICBVbnN0YWJsZUFwaUVycm9yOiAoKSA9PiBVbnN0YWJsZUFwaUVycm9yLFxuICBVc2VyRmFjaW5nRXJyb3I6ICgpID0+IFVzZXJGYWNpbmdFcnJvcixcbiAgYXNzZXJ0VW5zdGFibGU6ICgpID0+IGFzc2VydFVuc3RhYmxlLFxuICBnZXRDYWxsYWJsZUpTT046ICgpID0+IGdldENhbGxhYmxlSlNPTixcbiAgZ2V0RXJyb3JNZXNzYWdlOiAoKSA9PiBnZXRFcnJvck1lc3NhZ2UsXG4gIGdldEVycm9yU3RhY2s6ICgpID0+IGdldEVycm9yU3RhY2ssXG4gIGdldEh0dHBTdGF0dXM6ICgpID0+IGdldEh0dHBTdGF0dXNcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZXJyb3JfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3N0YXR1c1R5cGVzID0gcmVxdWlyZShcIi4vc3RhdHVzVHlwZXMuanNcIik7XG5jbGFzcyBHZW5raXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgc291cmNlO1xuICBzdGF0dXM7XG4gIGRldGFpbDtcbiAgY29kZTtcbiAgLy8gRm9yIGVhc3kgcHJpbnRpbmcsIHdlIHdyYXAgdGhlIGVycm9yIHdpdGggaW5mb3JtYXRpb24gbGlrZSB0aGUgc291cmNlXG4gIC8vIGFuZCBzdGF0dXMsIGJ1dCB0aGF0J3MgcmVkdW5kYW50IHdpdGggSlNPTi5cbiAgb3JpZ2luYWxNZXNzYWdlO1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgc3RhdHVzLFxuICAgIG1lc3NhZ2UsXG4gICAgZGV0YWlsLFxuICAgIHNvdXJjZVxuICB9KSB7XG4gICAgc3VwZXIoYCR7c291cmNlID8gYCR7c291cmNlfTogYCA6IFwiXCJ9JHtzdGF0dXN9OiAke21lc3NhZ2V9YCk7XG4gICAgdGhpcy5vcmlnaW5hbE1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuY29kZSA9ICgwLCBpbXBvcnRfc3RhdHVzVHlwZXMuaHR0cFN0YXR1c0NvZGUpKHN0YXR1cyk7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5kZXRhaWwgPSBkZXRhaWw7XG4gICAgdGhpcy5uYW1lID0gXCJHZW5raXRFcnJvclwiO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgSlNPTi1zZXJpYWxpemFibGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBvYmplY3QuXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFRoaXMgZXJyb3IgdHlwZSBpcyB1c2VkIGJ5IDNQIGF1dGhvcnMgd2l0aCB0aGUgZmllbGQgXCJkZXRhaWxcIixcbiAgICAgIC8vIGJ1dCB0aGUgYWN0dWFsIENhbGxhYmxlIHByb3RvY29sIHZhbHVlIGlzIFwiZGV0YWlsc1wiXG4gICAgICAuLi50aGlzLmRldGFpbCA9PT0gdm9pZCAwID8ge30gOiB7IGRldGFpbHM6IHRoaXMuZGV0YWlsIH0sXG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgbWVzc2FnZTogdGhpcy5vcmlnaW5hbE1lc3NhZ2VcbiAgICB9O1xuICB9XG59XG5jbGFzcyBVbnN0YWJsZUFwaUVycm9yIGV4dGVuZHMgR2Vua2l0RXJyb3Ige1xuICBjb25zdHJ1Y3RvcihsZXZlbCwgbWVzc2FnZSkge1xuICAgIHN1cGVyKHtcbiAgICAgIHN0YXR1czogXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gICAgICBtZXNzYWdlOiBgJHttZXNzYWdlID8gbWVzc2FnZSArIFwiIFwiIDogXCJcIn1UaGlzIEFQSSByZXF1aXJlcyAnJHtsZXZlbH0nIHN0YWJpbGl0eSBsZXZlbC5cblxuVG8gdXNlIHRoaXMgZmVhdHVyZSwgaW5pdGlhbGl6ZSBHZW5raXQgdXNpbmcgXFxgaW1wb3J0IHtnZW5raXR9IGZyb20gXCJnZW5raXQvJHtsZXZlbH1cIlxcYC5gXG4gICAgfSk7XG4gICAgdGhpcy5uYW1lID0gXCJVbnN0YWJsZUFwaUVycm9yXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGFzc2VydFVuc3RhYmxlKHJlZ2lzdHJ5LCBsZXZlbCwgbWVzc2FnZSkge1xuICBpZiAobGV2ZWwgPT09IFwiYmV0YVwiICYmIHJlZ2lzdHJ5LmFwaVN0YWJpbGl0eSA9PT0gXCJzdGFibGVcIikge1xuICAgIHRocm93IG5ldyBVbnN0YWJsZUFwaUVycm9yKGxldmVsLCBtZXNzYWdlKTtcbiAgfVxufVxuY2xhc3MgVXNlckZhY2luZ0Vycm9yIGV4dGVuZHMgR2Vua2l0RXJyb3Ige1xuICBjb25zdHJ1Y3RvcihzdGF0dXMsIG1lc3NhZ2UsIGRldGFpbHMpIHtcbiAgICBzdXBlcih7IHN0YXR1cywgZGV0YWlsOiBkZXRhaWxzLCBtZXNzYWdlIH0pO1xuICAgIHN1cGVyLm5hbWUgPSBcIlVzZXJGYWNpbmdFcnJvclwiO1xuICB9XG59XG5mdW5jdGlvbiBnZXRIdHRwU3RhdHVzKGUpIHtcbiAgaWYgKGUgaW5zdGFuY2VvZiBHZW5raXRFcnJvcikge1xuICAgIHJldHVybiBlLmNvZGU7XG4gIH1cbiAgcmV0dXJuIDUwMDtcbn1cbmZ1bmN0aW9uIGdldENhbGxhYmxlSlNPTihlKSB7XG4gIGlmIChlIGluc3RhbmNlb2YgR2Vua2l0RXJyb3IpIHtcbiAgICByZXR1cm4gZS50b0pTT04oKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1lc3NhZ2U6IFwiSW50ZXJuYWwgRXJyb3JcIixcbiAgICBzdGF0dXM6IFwiSU5URVJOQUxcIlxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlKGUpIHtcbiAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBlLm1lc3NhZ2U7XG4gIH1cbiAgcmV0dXJuIGAke2V9YDtcbn1cbmZ1bmN0aW9uIGdldEVycm9yU3RhY2soZSkge1xuICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGUuc3RhY2s7XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBHZW5raXRFcnJvcixcbiAgVW5zdGFibGVBcGlFcnJvcixcbiAgVXNlckZhY2luZ0Vycm9yLFxuICBhc3NlcnRVbnN0YWJsZSxcbiAgZ2V0Q2FsbGFibGVKU09OLFxuICBnZXRFcnJvck1lc3NhZ2UsXG4gIGdldEVycm9yU3RhY2ssXG4gIGdldEh0dHBTdGF0dXNcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/flow.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar flow_exports = {};\n__export(flow_exports, {\n  defineFlow: () => defineFlow,\n  flow: () => flow,\n  run: () => run\n});\nmodule.exports = __toCommonJS(flow_exports);\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nfunction flow(config, fn) {\n  const resolvedConfig = typeof config === \"string\" ? { name: config } : config;\n  return flowAction(resolvedConfig, fn);\n}\nfunction defineFlow(registry, config, fn) {\n  const f = flow(config, fn);\n  registry.registerAction(\"flow\", f);\n  return f;\n}\nfunction flowAction(config, fn) {\n  return (0, import_action.action)(\n    {\n      actionType: \"flow\",\n      name: config.name,\n      inputSchema: config.inputSchema,\n      outputSchema: config.outputSchema,\n      streamSchema: config.streamSchema,\n      metadata: config.metadata\n    },\n    async (input, { sendChunk, context, trace, abortSignal, streamingRequested }) => {\n      const ctx = sendChunk;\n      ctx.sendChunk = sendChunk;\n      ctx.context = context;\n      ctx.trace = trace;\n      ctx.abortSignal = abortSignal;\n      ctx.streamingRequested = streamingRequested;\n      return fn(input, ctx);\n    }\n  );\n}\nfunction run(name, funcOrInput, fnOrRegistry, _) {\n  let func;\n  let input;\n  let hasInput = false;\n  if (typeof funcOrInput === \"function\") {\n    func = funcOrInput;\n  } else {\n    input = funcOrInput;\n    hasInput = true;\n  }\n  if (typeof fnOrRegistry === \"function\") {\n    func = fnOrRegistry;\n  }\n  if (!func) {\n    throw new Error(\"unable to resolve run function\");\n  }\n  return (0, import_tracing.runInNewSpan)(\n    {\n      metadata: { name },\n      labels: {\n        [import_tracing.SPAN_TYPE_ATTR]: \"flowStep\"\n      }\n    },\n    async (meta) => {\n      meta.input = input;\n      const output = hasInput ? await func(input) : await func();\n      meta.output = JSON.stringify(output);\n      return output;\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=flow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Zsb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWE7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsb0ZBQWM7QUFDM0M7QUFDQSx3REFBd0QsZUFBZTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxvQkFBb0IsNERBQTREO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsTUFBTTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUlMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9mbG93LmpzPzgxY2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGZsb3dfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZmxvd19leHBvcnRzLCB7XG4gIGRlZmluZUZsb3c6ICgpID0+IGRlZmluZUZsb3csXG4gIGZsb3c6ICgpID0+IGZsb3csXG4gIHJ1bjogKCkgPT4gcnVuXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGZsb3dfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2FjdGlvbiA9IHJlcXVpcmUoXCIuL2FjdGlvbi5qc1wiKTtcbnZhciBpbXBvcnRfdHJhY2luZyA9IHJlcXVpcmUoXCIuL3RyYWNpbmcuanNcIik7XG5mdW5jdGlvbiBmbG93KGNvbmZpZywgZm4pIHtcbiAgY29uc3QgcmVzb2x2ZWRDb25maWcgPSB0eXBlb2YgY29uZmlnID09PSBcInN0cmluZ1wiID8geyBuYW1lOiBjb25maWcgfSA6IGNvbmZpZztcbiAgcmV0dXJuIGZsb3dBY3Rpb24ocmVzb2x2ZWRDb25maWcsIGZuKTtcbn1cbmZ1bmN0aW9uIGRlZmluZUZsb3cocmVnaXN0cnksIGNvbmZpZywgZm4pIHtcbiAgY29uc3QgZiA9IGZsb3coY29uZmlnLCBmbik7XG4gIHJlZ2lzdHJ5LnJlZ2lzdGVyQWN0aW9uKFwiZmxvd1wiLCBmKTtcbiAgcmV0dXJuIGY7XG59XG5mdW5jdGlvbiBmbG93QWN0aW9uKGNvbmZpZywgZm4pIHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfYWN0aW9uLmFjdGlvbikoXG4gICAge1xuICAgICAgYWN0aW9uVHlwZTogXCJmbG93XCIsXG4gICAgICBuYW1lOiBjb25maWcubmFtZSxcbiAgICAgIGlucHV0U2NoZW1hOiBjb25maWcuaW5wdXRTY2hlbWEsXG4gICAgICBvdXRwdXRTY2hlbWE6IGNvbmZpZy5vdXRwdXRTY2hlbWEsXG4gICAgICBzdHJlYW1TY2hlbWE6IGNvbmZpZy5zdHJlYW1TY2hlbWEsXG4gICAgICBtZXRhZGF0YTogY29uZmlnLm1ldGFkYXRhXG4gICAgfSxcbiAgICBhc3luYyAoaW5wdXQsIHsgc2VuZENodW5rLCBjb250ZXh0LCB0cmFjZSwgYWJvcnRTaWduYWwsIHN0cmVhbWluZ1JlcXVlc3RlZCB9KSA9PiB7XG4gICAgICBjb25zdCBjdHggPSBzZW5kQ2h1bms7XG4gICAgICBjdHguc2VuZENodW5rID0gc2VuZENodW5rO1xuICAgICAgY3R4LmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgY3R4LnRyYWNlID0gdHJhY2U7XG4gICAgICBjdHguYWJvcnRTaWduYWwgPSBhYm9ydFNpZ25hbDtcbiAgICAgIGN0eC5zdHJlYW1pbmdSZXF1ZXN0ZWQgPSBzdHJlYW1pbmdSZXF1ZXN0ZWQ7XG4gICAgICByZXR1cm4gZm4oaW5wdXQsIGN0eCk7XG4gICAgfVxuICApO1xufVxuZnVuY3Rpb24gcnVuKG5hbWUsIGZ1bmNPcklucHV0LCBmbk9yUmVnaXN0cnksIF8pIHtcbiAgbGV0IGZ1bmM7XG4gIGxldCBpbnB1dDtcbiAgbGV0IGhhc0lucHV0ID0gZmFsc2U7XG4gIGlmICh0eXBlb2YgZnVuY09ySW5wdXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZ1bmMgPSBmdW5jT3JJbnB1dDtcbiAgfSBlbHNlIHtcbiAgICBpbnB1dCA9IGZ1bmNPcklucHV0O1xuICAgIGhhc0lucHV0ID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGZuT3JSZWdpc3RyeSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZnVuYyA9IGZuT3JSZWdpc3RyeTtcbiAgfVxuICBpZiAoIWZ1bmMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmFibGUgdG8gcmVzb2x2ZSBydW4gZnVuY3Rpb25cIik7XG4gIH1cbiAgcmV0dXJuICgwLCBpbXBvcnRfdHJhY2luZy5ydW5Jbk5ld1NwYW4pKFxuICAgIHtcbiAgICAgIG1ldGFkYXRhOiB7IG5hbWUgfSxcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBbaW1wb3J0X3RyYWNpbmcuU1BBTl9UWVBFX0FUVFJdOiBcImZsb3dTdGVwXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIChtZXRhKSA9PiB7XG4gICAgICBtZXRhLmlucHV0ID0gaW5wdXQ7XG4gICAgICBjb25zdCBvdXRwdXQgPSBoYXNJbnB1dCA/IGF3YWl0IGZ1bmMoaW5wdXQpIDogYXdhaXQgZnVuYygpO1xuICAgICAgbWV0YS5vdXRwdXQgPSBKU09OLnN0cmluZ2lmeShvdXRwdXQpO1xuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG4gICk7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVmaW5lRmxvdyxcbiAgZmxvdyxcbiAgcnVuXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZsb3cuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar index_exports = {};\n__export(index_exports, {\n  GENKIT_CLIENT_HEADER: () => GENKIT_CLIENT_HEADER,\n  GENKIT_REFLECTION_API_SPEC_VERSION: () => GENKIT_REFLECTION_API_SPEC_VERSION,\n  GENKIT_VERSION: () => GENKIT_VERSION,\n  GenkitError: () => import_error.GenkitError,\n  OperationSchema: () => import_background_action.OperationSchema,\n  UnstableApiError: () => import_error.UnstableApiError,\n  UserFacingError: () => import_error.UserFacingError,\n  apiKey: () => import_context.apiKey,\n  assertUnstable: () => import_error.assertUnstable,\n  backgroundAction: () => import_background_action.backgroundAction,\n  defineBackgroundAction: () => import_background_action.defineBackgroundAction,\n  defineDynamicActionProvider: () => import_dynamic_action_provider.defineDynamicActionProvider,\n  defineFlow: () => import_flow.defineFlow,\n  defineJsonSchema: () => import_schema.defineJsonSchema,\n  defineSchema: () => import_schema.defineSchema,\n  flow: () => import_flow.flow,\n  getAsyncContext: () => import_async_context.getAsyncContext,\n  getCallableJSON: () => import_error.getCallableJSON,\n  getClientHeader: () => getClientHeader,\n  getContext: () => import_context.getContext,\n  getHttpStatus: () => import_error.getHttpStatus,\n  isBackgroundAction: () => import_background_action.isBackgroundAction,\n  registerBackgroundAction: () => import_background_action.registerBackgroundAction,\n  run: () => import_flow.run,\n  runWithContext: () => import_context.runWithContext,\n  setClientHeader: () => setClientHeader,\n  z: () => import_zod.z\n});\nmodule.exports = __toCommonJS(index_exports);\nvar import_version = __webpack_require__(/*! ./__codegen/version.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\");\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\");\n__reExport(index_exports, __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\"), module.exports);\nvar import_async_context = __webpack_require__(/*! ./async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\");\nvar import_background_action = __webpack_require__(/*! ./background-action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js\");\nvar import_context = __webpack_require__(/*! ./context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\");\nvar import_dynamic_action_provider = __webpack_require__(/*! ./dynamic-action-provider.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/dynamic-action-provider.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_flow = __webpack_require__(/*! ./flow.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js\");\n__reExport(index_exports, __webpack_require__(/*! ./plugin.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\"), module.exports);\n__reExport(index_exports, __webpack_require__(/*! ./reflection.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js\"), module.exports);\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\n__reExport(index_exports, __webpack_require__(/*! ./telemetryTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\"), module.exports);\n__reExport(index_exports, __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\"), module.exports);\nconst GENKIT_VERSION = import_version.version;\nconst GENKIT_CLIENT_HEADER = `genkit-node/${GENKIT_VERSION} gl-node/${process.versions.node}`;\nconst GENKIT_REFLECTION_API_SPEC_VERSION = 1;\nconst clientHeaderGlobalKey = \"__genkit_ClientHeader\";\nfunction getClientHeader() {\n  if (global[clientHeaderGlobalKey]) {\n    return GENKIT_CLIENT_HEADER + \" \" + global[clientHeaderGlobalKey];\n  }\n  return GENKIT_CLIENT_HEADER;\n}\nfunction setClientHeader(header) {\n  global[clientHeaderGlobalKey] = header;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsd0dBQXdCO0FBQ3JELGlCQUFpQixtQkFBTyxDQUFDLDBEQUFLO0FBQzlCLDBCQUEwQixtQkFBTyxDQUFDLGtGQUFhO0FBQy9DLDJCQUEyQixtQkFBTyxDQUFDLGdHQUFvQjtBQUN2RCwrQkFBK0IsbUJBQU8sQ0FBQyx3R0FBd0I7QUFDL0QscUJBQXFCLG1CQUFPLENBQUMsb0ZBQWM7QUFDM0MscUNBQXFDLG1CQUFPLENBQUMsb0hBQThCO0FBQzNFLG1CQUFtQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLDhFQUFXO0FBQ3JDLDBCQUEwQixtQkFBTyxDQUFDLGtGQUFhO0FBQy9DLDBCQUEwQixtQkFBTyxDQUFDLDBGQUFpQjtBQUNuRCxvQkFBb0IsbUJBQU8sQ0FBQyxrRkFBYTtBQUN6QywwQkFBMEIsbUJBQU8sQ0FBQyxrR0FBcUI7QUFDdkQsMEJBQTBCLG1CQUFPLENBQUMsZ0ZBQVk7QUFDOUM7QUFDQSw0Q0FBNEMsZ0JBQWdCLFVBQVUsc0JBQXNCO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FpQ0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4LmpzPzY4MDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3JlRXhwb3J0ID0gKHRhcmdldCwgbW9kLCBzZWNvbmRUYXJnZXQpID0+IChfX2NvcHlQcm9wcyh0YXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpLCBzZWNvbmRUYXJnZXQgJiYgX19jb3B5UHJvcHMoc2Vjb25kVGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBpbmRleF9leHBvcnRzID0ge307XG5fX2V4cG9ydChpbmRleF9leHBvcnRzLCB7XG4gIEdFTktJVF9DTElFTlRfSEVBREVSOiAoKSA9PiBHRU5LSVRfQ0xJRU5UX0hFQURFUixcbiAgR0VOS0lUX1JFRkxFQ1RJT05fQVBJX1NQRUNfVkVSU0lPTjogKCkgPT4gR0VOS0lUX1JFRkxFQ1RJT05fQVBJX1NQRUNfVkVSU0lPTixcbiAgR0VOS0lUX1ZFUlNJT046ICgpID0+IEdFTktJVF9WRVJTSU9OLFxuICBHZW5raXRFcnJvcjogKCkgPT4gaW1wb3J0X2Vycm9yLkdlbmtpdEVycm9yLFxuICBPcGVyYXRpb25TY2hlbWE6ICgpID0+IGltcG9ydF9iYWNrZ3JvdW5kX2FjdGlvbi5PcGVyYXRpb25TY2hlbWEsXG4gIFVuc3RhYmxlQXBpRXJyb3I6ICgpID0+IGltcG9ydF9lcnJvci5VbnN0YWJsZUFwaUVycm9yLFxuICBVc2VyRmFjaW5nRXJyb3I6ICgpID0+IGltcG9ydF9lcnJvci5Vc2VyRmFjaW5nRXJyb3IsXG4gIGFwaUtleTogKCkgPT4gaW1wb3J0X2NvbnRleHQuYXBpS2V5LFxuICBhc3NlcnRVbnN0YWJsZTogKCkgPT4gaW1wb3J0X2Vycm9yLmFzc2VydFVuc3RhYmxlLFxuICBiYWNrZ3JvdW5kQWN0aW9uOiAoKSA9PiBpbXBvcnRfYmFja2dyb3VuZF9hY3Rpb24uYmFja2dyb3VuZEFjdGlvbixcbiAgZGVmaW5lQmFja2dyb3VuZEFjdGlvbjogKCkgPT4gaW1wb3J0X2JhY2tncm91bmRfYWN0aW9uLmRlZmluZUJhY2tncm91bmRBY3Rpb24sXG4gIGRlZmluZUR5bmFtaWNBY3Rpb25Qcm92aWRlcjogKCkgPT4gaW1wb3J0X2R5bmFtaWNfYWN0aW9uX3Byb3ZpZGVyLmRlZmluZUR5bmFtaWNBY3Rpb25Qcm92aWRlcixcbiAgZGVmaW5lRmxvdzogKCkgPT4gaW1wb3J0X2Zsb3cuZGVmaW5lRmxvdyxcbiAgZGVmaW5lSnNvblNjaGVtYTogKCkgPT4gaW1wb3J0X3NjaGVtYS5kZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWE6ICgpID0+IGltcG9ydF9zY2hlbWEuZGVmaW5lU2NoZW1hLFxuICBmbG93OiAoKSA9PiBpbXBvcnRfZmxvdy5mbG93LFxuICBnZXRBc3luY0NvbnRleHQ6ICgpID0+IGltcG9ydF9hc3luY19jb250ZXh0LmdldEFzeW5jQ29udGV4dCxcbiAgZ2V0Q2FsbGFibGVKU09OOiAoKSA9PiBpbXBvcnRfZXJyb3IuZ2V0Q2FsbGFibGVKU09OLFxuICBnZXRDbGllbnRIZWFkZXI6ICgpID0+IGdldENsaWVudEhlYWRlcixcbiAgZ2V0Q29udGV4dDogKCkgPT4gaW1wb3J0X2NvbnRleHQuZ2V0Q29udGV4dCxcbiAgZ2V0SHR0cFN0YXR1czogKCkgPT4gaW1wb3J0X2Vycm9yLmdldEh0dHBTdGF0dXMsXG4gIGlzQmFja2dyb3VuZEFjdGlvbjogKCkgPT4gaW1wb3J0X2JhY2tncm91bmRfYWN0aW9uLmlzQmFja2dyb3VuZEFjdGlvbixcbiAgcmVnaXN0ZXJCYWNrZ3JvdW5kQWN0aW9uOiAoKSA9PiBpbXBvcnRfYmFja2dyb3VuZF9hY3Rpb24ucmVnaXN0ZXJCYWNrZ3JvdW5kQWN0aW9uLFxuICBydW46ICgpID0+IGltcG9ydF9mbG93LnJ1bixcbiAgcnVuV2l0aENvbnRleHQ6ICgpID0+IGltcG9ydF9jb250ZXh0LnJ1bldpdGhDb250ZXh0LFxuICBzZXRDbGllbnRIZWFkZXI6ICgpID0+IHNldENsaWVudEhlYWRlcixcbiAgejogKCkgPT4gaW1wb3J0X3pvZC56XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xudmFyIGltcG9ydF92ZXJzaW9uID0gcmVxdWlyZShcIi4vX19jb2RlZ2VuL3ZlcnNpb24uanNcIik7XG52YXIgaW1wb3J0X3pvZCA9IHJlcXVpcmUoXCJ6b2RcIik7XG5fX3JlRXhwb3J0KGluZGV4X2V4cG9ydHMsIHJlcXVpcmUoXCIuL2FjdGlvbi5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xudmFyIGltcG9ydF9hc3luY19jb250ZXh0ID0gcmVxdWlyZShcIi4vYXN5bmMtY29udGV4dC5qc1wiKTtcbnZhciBpbXBvcnRfYmFja2dyb3VuZF9hY3Rpb24gPSByZXF1aXJlKFwiLi9iYWNrZ3JvdW5kLWFjdGlvbi5qc1wiKTtcbnZhciBpbXBvcnRfY29udGV4dCA9IHJlcXVpcmUoXCIuL2NvbnRleHQuanNcIik7XG52YXIgaW1wb3J0X2R5bmFtaWNfYWN0aW9uX3Byb3ZpZGVyID0gcmVxdWlyZShcIi4vZHluYW1pYy1hY3Rpb24tcHJvdmlkZXIuanNcIik7XG52YXIgaW1wb3J0X2Vycm9yID0gcmVxdWlyZShcIi4vZXJyb3IuanNcIik7XG52YXIgaW1wb3J0X2Zsb3cgPSByZXF1aXJlKFwiLi9mbG93LmpzXCIpO1xuX19yZUV4cG9ydChpbmRleF9leHBvcnRzLCByZXF1aXJlKFwiLi9wbHVnaW4uanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbl9fcmVFeHBvcnQoaW5kZXhfZXhwb3J0cywgcmVxdWlyZShcIi4vcmVmbGVjdGlvbi5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xudmFyIGltcG9ydF9zY2hlbWEgPSByZXF1aXJlKFwiLi9zY2hlbWEuanNcIik7XG5fX3JlRXhwb3J0KGluZGV4X2V4cG9ydHMsIHJlcXVpcmUoXCIuL3RlbGVtZXRyeVR5cGVzLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KGluZGV4X2V4cG9ydHMsIHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5jb25zdCBHRU5LSVRfVkVSU0lPTiA9IGltcG9ydF92ZXJzaW9uLnZlcnNpb247XG5jb25zdCBHRU5LSVRfQ0xJRU5UX0hFQURFUiA9IGBnZW5raXQtbm9kZS8ke0dFTktJVF9WRVJTSU9OfSBnbC1ub2RlLyR7cHJvY2Vzcy52ZXJzaW9ucy5ub2RlfWA7XG5jb25zdCBHRU5LSVRfUkVGTEVDVElPTl9BUElfU1BFQ19WRVJTSU9OID0gMTtcbmNvbnN0IGNsaWVudEhlYWRlckdsb2JhbEtleSA9IFwiX19nZW5raXRfQ2xpZW50SGVhZGVyXCI7XG5mdW5jdGlvbiBnZXRDbGllbnRIZWFkZXIoKSB7XG4gIGlmIChnbG9iYWxbY2xpZW50SGVhZGVyR2xvYmFsS2V5XSkge1xuICAgIHJldHVybiBHRU5LSVRfQ0xJRU5UX0hFQURFUiArIFwiIFwiICsgZ2xvYmFsW2NsaWVudEhlYWRlckdsb2JhbEtleV07XG4gIH1cbiAgcmV0dXJuIEdFTktJVF9DTElFTlRfSEVBREVSO1xufVxuZnVuY3Rpb24gc2V0Q2xpZW50SGVhZGVyKGhlYWRlcikge1xuICBnbG9iYWxbY2xpZW50SGVhZGVyR2xvYmFsS2V5XSA9IGhlYWRlcjtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBHRU5LSVRfQ0xJRU5UX0hFQURFUixcbiAgR0VOS0lUX1JFRkxFQ1RJT05fQVBJX1NQRUNfVkVSU0lPTixcbiAgR0VOS0lUX1ZFUlNJT04sXG4gIEdlbmtpdEVycm9yLFxuICBPcGVyYXRpb25TY2hlbWEsXG4gIFVuc3RhYmxlQXBpRXJyb3IsXG4gIFVzZXJGYWNpbmdFcnJvcixcbiAgYXBpS2V5LFxuICBhc3NlcnRVbnN0YWJsZSxcbiAgYmFja2dyb3VuZEFjdGlvbixcbiAgZGVmaW5lQmFja2dyb3VuZEFjdGlvbixcbiAgZGVmaW5lRHluYW1pY0FjdGlvblByb3ZpZGVyLFxuICBkZWZpbmVGbG93LFxuICBkZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWEsXG4gIGZsb3csXG4gIGdldEFzeW5jQ29udGV4dCxcbiAgZ2V0Q2FsbGFibGVKU09OLFxuICBnZXRDbGllbnRIZWFkZXIsXG4gIGdldENvbnRleHQsXG4gIGdldEh0dHBTdGF0dXMsXG4gIGlzQmFja2dyb3VuZEFjdGlvbixcbiAgcmVnaXN0ZXJCYWNrZ3JvdW5kQWN0aW9uLFxuICBydW4sXG4gIHJ1bldpdGhDb250ZXh0LFxuICBzZXRDbGllbnRIZWFkZXIsXG4gIHosXG4gIC4uLnJlcXVpcmUoXCIuL2FjdGlvbi5qc1wiKSxcbiAgLi4ucmVxdWlyZShcIi4vcGx1Z2luLmpzXCIpLFxuICAuLi5yZXF1aXJlKFwiLi9yZWZsZWN0aW9uLmpzXCIpLFxuICAuLi5yZXF1aXJlKFwiLi90ZWxlbWV0cnlUeXBlcy5qc1wiKSxcbiAgLi4ucmVxdWlyZShcIi4vdXRpbHMuanNcIilcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/logging.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar logging_exports = {};\n__export(logging_exports, {\n  logger: () => logger\n});\nmodule.exports = __toCommonJS(logging_exports);\nconst LOG_LEVELS = [\"debug\", \"info\", \"warn\", \"error\"];\nconst loggerKey = \"__genkit_logger\";\nconst _defaultLogger = {\n  shouldLog(targetLevel) {\n    return LOG_LEVELS.indexOf(this.level) <= LOG_LEVELS.indexOf(targetLevel);\n  },\n  debug(...args) {\n    this.shouldLog(\"debug\") && console.debug(...args);\n  },\n  info(...args) {\n    this.shouldLog(\"info\") && console.info(...args);\n  },\n  warn(...args) {\n    this.shouldLog(\"warn\") && console.warn(...args);\n  },\n  error(...args) {\n    this.shouldLog(\"error\") && console.error(...args);\n  },\n  level: \"info\"\n};\nfunction getLogger() {\n  if (!global[loggerKey]) {\n    global[loggerKey] = _defaultLogger;\n  }\n  return global[loggerKey];\n}\nclass Logger {\n  defaultLogger = _defaultLogger;\n  init(fn) {\n    global[loggerKey] = fn;\n  }\n  info(...args) {\n    getLogger().info.apply(getLogger(), args);\n  }\n  debug(...args) {\n    getLogger().debug.apply(getLogger(), args);\n  }\n  error(...args) {\n    getLogger().error.apply(getLogger(), args);\n  }\n  warn(...args) {\n    getLogger().warn.apply(getLogger(), args);\n  }\n  setLogLevel(level) {\n    getLogger().level = level;\n  }\n  logStructured(msg, metadata) {\n    getLogger().info(msg, metadata);\n  }\n  logStructuredError(msg, metadata) {\n    getLogger().error(msg, metadata);\n  }\n}\nconst logger = new Logger();\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2xvZ2dpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2xvZ2dpbmcuanM/ZWI0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgbG9nZ2luZ19leHBvcnRzID0ge307XG5fX2V4cG9ydChsb2dnaW5nX2V4cG9ydHMsIHtcbiAgbG9nZ2VyOiAoKSA9PiBsb2dnZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMobG9nZ2luZ19leHBvcnRzKTtcbmNvbnN0IExPR19MRVZFTFMgPSBbXCJkZWJ1Z1wiLCBcImluZm9cIiwgXCJ3YXJuXCIsIFwiZXJyb3JcIl07XG5jb25zdCBsb2dnZXJLZXkgPSBcIl9fZ2Vua2l0X2xvZ2dlclwiO1xuY29uc3QgX2RlZmF1bHRMb2dnZXIgPSB7XG4gIHNob3VsZExvZyh0YXJnZXRMZXZlbCkge1xuICAgIHJldHVybiBMT0dfTEVWRUxTLmluZGV4T2YodGhpcy5sZXZlbCkgPD0gTE9HX0xFVkVMUy5pbmRleE9mKHRhcmdldExldmVsKTtcbiAgfSxcbiAgZGVidWcoLi4uYXJncykge1xuICAgIHRoaXMuc2hvdWxkTG9nKFwiZGVidWdcIikgJiYgY29uc29sZS5kZWJ1ZyguLi5hcmdzKTtcbiAgfSxcbiAgaW5mbyguLi5hcmdzKSB7XG4gICAgdGhpcy5zaG91bGRMb2coXCJpbmZvXCIpICYmIGNvbnNvbGUuaW5mbyguLi5hcmdzKTtcbiAgfSxcbiAgd2FybiguLi5hcmdzKSB7XG4gICAgdGhpcy5zaG91bGRMb2coXCJ3YXJuXCIpICYmIGNvbnNvbGUud2FybiguLi5hcmdzKTtcbiAgfSxcbiAgZXJyb3IoLi4uYXJncykge1xuICAgIHRoaXMuc2hvdWxkTG9nKFwiZXJyb3JcIikgJiYgY29uc29sZS5lcnJvciguLi5hcmdzKTtcbiAgfSxcbiAgbGV2ZWw6IFwiaW5mb1wiXG59O1xuZnVuY3Rpb24gZ2V0TG9nZ2VyKCkge1xuICBpZiAoIWdsb2JhbFtsb2dnZXJLZXldKSB7XG4gICAgZ2xvYmFsW2xvZ2dlcktleV0gPSBfZGVmYXVsdExvZ2dlcjtcbiAgfVxuICByZXR1cm4gZ2xvYmFsW2xvZ2dlcktleV07XG59XG5jbGFzcyBMb2dnZXIge1xuICBkZWZhdWx0TG9nZ2VyID0gX2RlZmF1bHRMb2dnZXI7XG4gIGluaXQoZm4pIHtcbiAgICBnbG9iYWxbbG9nZ2VyS2V5XSA9IGZuO1xuICB9XG4gIGluZm8oLi4uYXJncykge1xuICAgIGdldExvZ2dlcigpLmluZm8uYXBwbHkoZ2V0TG9nZ2VyKCksIGFyZ3MpO1xuICB9XG4gIGRlYnVnKC4uLmFyZ3MpIHtcbiAgICBnZXRMb2dnZXIoKS5kZWJ1Zy5hcHBseShnZXRMb2dnZXIoKSwgYXJncyk7XG4gIH1cbiAgZXJyb3IoLi4uYXJncykge1xuICAgIGdldExvZ2dlcigpLmVycm9yLmFwcGx5KGdldExvZ2dlcigpLCBhcmdzKTtcbiAgfVxuICB3YXJuKC4uLmFyZ3MpIHtcbiAgICBnZXRMb2dnZXIoKS53YXJuLmFwcGx5KGdldExvZ2dlcigpLCBhcmdzKTtcbiAgfVxuICBzZXRMb2dMZXZlbChsZXZlbCkge1xuICAgIGdldExvZ2dlcigpLmxldmVsID0gbGV2ZWw7XG4gIH1cbiAgbG9nU3RydWN0dXJlZChtc2csIG1ldGFkYXRhKSB7XG4gICAgZ2V0TG9nZ2VyKCkuaW5mbyhtc2csIG1ldGFkYXRhKTtcbiAgfVxuICBsb2dTdHJ1Y3R1cmVkRXJyb3IobXNnLCBtZXRhZGF0YSkge1xuICAgIGdldExvZ2dlcigpLmVycm9yKG1zZywgbWV0YWRhdGEpO1xuICB9XG59XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9nZ2VyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/node-async-context.js":
/*!****************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/node-async-context.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar node_async_context_exports = {};\n__export(node_async_context_exports, {\n  NodeAsyncContext: () => NodeAsyncContext,\n  initNodeAsyncContext: () => initNodeAsyncContext\n});\nmodule.exports = __toCommonJS(node_async_context_exports);\nvar import_node_async_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nvar import_async_context = __webpack_require__(/*! ./async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\");\nclass NodeAsyncContext {\n  asls = {};\n  getStore(key) {\n    return this.asls[key]?.getStore();\n  }\n  run(key, store, callback) {\n    if (!this.asls[key]) {\n      this.asls[key] = new import_node_async_hooks.AsyncLocalStorage();\n    }\n    return this.asls[key].run(store, callback);\n  }\n}\nfunction initNodeAsyncContext() {\n  (0, import_async_context.setAsyncContext)(new NodeAsyncContext());\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=node-async-context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL25vZGUtYXN5bmMtY29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsOEJBQThCLG1CQUFPLENBQUMsMENBQWtCO0FBQ3hELDJCQUEyQixtQkFBTyxDQUFDLGdHQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FHTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvbm9kZS1hc3luYy1jb250ZXh0LmpzPzgxNDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIG5vZGVfYXN5bmNfY29udGV4dF9leHBvcnRzID0ge307XG5fX2V4cG9ydChub2RlX2FzeW5jX2NvbnRleHRfZXhwb3J0cywge1xuICBOb2RlQXN5bmNDb250ZXh0OiAoKSA9PiBOb2RlQXN5bmNDb250ZXh0LFxuICBpbml0Tm9kZUFzeW5jQ29udGV4dDogKCkgPT4gaW5pdE5vZGVBc3luY0NvbnRleHRcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMobm9kZV9hc3luY19jb250ZXh0X2V4cG9ydHMpO1xudmFyIGltcG9ydF9ub2RlX2FzeW5jX2hvb2tzID0gcmVxdWlyZShcIm5vZGU6YXN5bmNfaG9va3NcIik7XG52YXIgaW1wb3J0X2FzeW5jX2NvbnRleHQgPSByZXF1aXJlKFwiLi9hc3luYy1jb250ZXh0LmpzXCIpO1xuY2xhc3MgTm9kZUFzeW5jQ29udGV4dCB7XG4gIGFzbHMgPSB7fTtcbiAgZ2V0U3RvcmUoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuYXNsc1trZXldPy5nZXRTdG9yZSgpO1xuICB9XG4gIHJ1bihrZXksIHN0b3JlLCBjYWxsYmFjaykge1xuICAgIGlmICghdGhpcy5hc2xzW2tleV0pIHtcbiAgICAgIHRoaXMuYXNsc1trZXldID0gbmV3IGltcG9ydF9ub2RlX2FzeW5jX2hvb2tzLkFzeW5jTG9jYWxTdG9yYWdlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFzbHNba2V5XS5ydW4oc3RvcmUsIGNhbGxiYWNrKTtcbiAgfVxufVxuZnVuY3Rpb24gaW5pdE5vZGVBc3luY0NvbnRleHQoKSB7XG4gICgwLCBpbXBvcnRfYXN5bmNfY29udGV4dC5zZXRBc3luY0NvbnRleHQpKG5ldyBOb2RlQXN5bmNDb250ZXh0KCkpO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIE5vZGVBc3luY0NvbnRleHQsXG4gIGluaXROb2RlQXN5bmNDb250ZXh0XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtYXN5bmMtY29udGV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/node-async-context.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/node.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/node.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar node_exports = {};\n__export(node_exports, {\n  initNodeFeatures: () => initNodeFeatures\n});\nmodule.exports = __toCommonJS(node_exports);\nvar import_node_async_context = __webpack_require__(/*! ./node-async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/node-async-context.js\");\nvar import_node_telemetry_provider = __webpack_require__(/*! ./tracing/node-telemetry-provider.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/node-telemetry-provider.js\");\nfunction initNodeFeatures() {\n  (0, import_node_async_context.initNodeAsyncContext)();\n  (0, import_node_telemetry_provider.initNodeTelemetryProvider)();\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL25vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxnQ0FBZ0MsbUJBQU8sQ0FBQywwR0FBeUI7QUFDakUscUNBQXFDLG1CQUFPLENBQUMsb0lBQXNDO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL25vZGUuanM/YzlhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgbm9kZV9leHBvcnRzID0ge307XG5fX2V4cG9ydChub2RlX2V4cG9ydHMsIHtcbiAgaW5pdE5vZGVGZWF0dXJlczogKCkgPT4gaW5pdE5vZGVGZWF0dXJlc1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhub2RlX2V4cG9ydHMpO1xudmFyIGltcG9ydF9ub2RlX2FzeW5jX2NvbnRleHQgPSByZXF1aXJlKFwiLi9ub2RlLWFzeW5jLWNvbnRleHQuanNcIik7XG52YXIgaW1wb3J0X25vZGVfdGVsZW1ldHJ5X3Byb3ZpZGVyID0gcmVxdWlyZShcIi4vdHJhY2luZy9ub2RlLXRlbGVtZXRyeS1wcm92aWRlci5qc1wiKTtcbmZ1bmN0aW9uIGluaXROb2RlRmVhdHVyZXMoKSB7XG4gICgwLCBpbXBvcnRfbm9kZV9hc3luY19jb250ZXh0LmluaXROb2RlQXN5bmNDb250ZXh0KSgpO1xuICAoMCwgaW1wb3J0X25vZGVfdGVsZW1ldHJ5X3Byb3ZpZGVyLmluaXROb2RlVGVsZW1ldHJ5UHJvdmlkZXIpKCk7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5pdE5vZGVGZWF0dXJlc1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/node.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/plugin.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar plugin_exports = {};\nmodule.exports = __toCommonJS(plugin_exports);\n//# sourceMappingURL=plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3BsdWdpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9wbHVnaW4uanM/ZDllMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgcGx1Z2luX2V4cG9ydHMgPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHBsdWdpbl9leHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsdWdpbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/reflection.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar reflection_exports = {};\n__export(reflection_exports, {\n  ReflectionServer: () => ReflectionServer,\n  RunActionResponseSchema: () => RunActionResponseSchema\n});\nmodule.exports = __toCommonJS(reflection_exports);\nvar import_express = __toESM(__webpack_require__(/*! express */ \"express\"));\nvar import_promises = __toESM(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nvar import_get_port = __toESM(__webpack_require__(/*! get-port */ \"(action-browser)/./node_modules/get-port/index.js\"));\nvar import_path = __toESM(__webpack_require__(/*! path */ \"path\"));\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\"));\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nconst RunActionResponseSchema = z.object({\n  result: z.unknown().optional(),\n  error: z.unknown().optional(),\n  telemetry: z.object({\n    traceId: z.string().optional()\n  }).optional()\n});\nclass ReflectionServer {\n  /** List of all running servers needed to be cleaned up on process exit. */\n  static RUNNING_SERVERS = [];\n  /** Registry instance to be used for API calls. */\n  registry;\n  /** Options for the reflection server. */\n  options;\n  /** Port the server is actually running on. This may differ from `options.port` if the original was occupied. Null if server is not running. */\n  port = null;\n  /** Express server instance. Null if server is not running. */\n  server = null;\n  /** Path to the runtime file. Null if server is not running. */\n  runtimeFilePath = null;\n  constructor(registry, options) {\n    this.registry = registry;\n    this.options = {\n      port: 3100,\n      bodyLimit: \"30mb\",\n      configuredEnvs: [\"dev\"],\n      ...options\n    };\n  }\n  /**\n   * Finds a free port to run the server on based on the original chosen port and environment.\n   */\n  async findPort() {\n    const chosenPort = this.options.port;\n    const freePort = await (0, import_get_port.default)({\n      port: (0, import_get_port.makeRange)(chosenPort, chosenPort + 100)\n    });\n    if (freePort !== chosenPort) {\n      import_logging.logger.warn(\n        `Port ${chosenPort} is already in use, using next available port ${freePort} instead.`\n      );\n    }\n    return freePort;\n  }\n  /**\n   * Starts the server.\n   *\n   * The server will be registered to be shut down on process exit.\n   */\n  async start() {\n    const server = (0, import_express.default)();\n    server.use(import_express.default.json({ limit: this.options.bodyLimit }));\n    server.use((req, res, next) => {\n      res.header(\"x-genkit-version\", import_index.GENKIT_VERSION);\n      next();\n    });\n    server.get(\"/api/__health\", async (_, response) => {\n      await this.registry.listActions();\n      response.status(200).send(\"OK\");\n    });\n    server.get(\"/api/__quitquitquit\", async (_, response) => {\n      import_logging.logger.debug(\"Received quitquitquit\");\n      response.status(200).send(\"OK\");\n      await this.stop();\n    });\n    server.get(\"/api/actions\", async (_, response, next) => {\n      import_logging.logger.debug(\"Fetching actions.\");\n      try {\n        const actions = await this.registry.listResolvableActions();\n        const convertedActions = {};\n        Object.keys(actions).forEach((key) => {\n          const action = actions[key];\n          convertedActions[key] = {\n            key,\n            name: action.name,\n            description: action.description,\n            metadata: action.metadata\n          };\n          if (action.inputSchema || action.inputJsonSchema) {\n            convertedActions[key].inputSchema = (0, import_schema.toJsonSchema)({\n              schema: action.inputSchema,\n              jsonSchema: action.inputJsonSchema\n            });\n          }\n          if (action.outputSchema || action.outputJsonSchema) {\n            convertedActions[key].outputSchema = (0, import_schema.toJsonSchema)({\n              schema: action.outputSchema,\n              jsonSchema: action.outputJsonSchema\n            });\n          }\n        });\n        response.send(convertedActions);\n      } catch (err) {\n        const { message, stack } = err;\n        next({ message, stack });\n      }\n    });\n    server.post(\"/api/runAction\", async (request, response, next) => {\n      const { key, input, context, telemetryLabels } = request.body;\n      const { stream } = request.query;\n      import_logging.logger.debug(`Running action \\`${key}\\` with stream=${stream}...`);\n      try {\n        const action = await this.registry.lookupAction(key);\n        if (!action) {\n          response.status(404).send(`action ${key} not found`);\n          return;\n        }\n        if (stream === \"true\") {\n          try {\n            const callback = (chunk) => {\n              response.write(JSON.stringify(chunk) + \"\\n\");\n            };\n            const result = await action.run(input, {\n              context,\n              onChunk: callback,\n              telemetryLabels\n            });\n            await (0, import_tracing.flushTracing)();\n            response.write(\n              JSON.stringify({\n                result: result.result,\n                telemetry: {\n                  traceId: result.telemetry.traceId\n                }\n              })\n            );\n            response.end();\n          } catch (err) {\n            const { message, stack } = err;\n            const errorResponse = {\n              code: import_action.StatusCodes.INTERNAL,\n              message,\n              details: {\n                stack\n              }\n            };\n            if (err.traceId) {\n              errorResponse.details.traceId = err.traceId;\n            }\n            response.write(\n              JSON.stringify({\n                error: errorResponse\n              })\n            );\n            response.end();\n          }\n        } else {\n          const result = await action.run(input, { context, telemetryLabels });\n          await (0, import_tracing.flushTracing)();\n          response.send({\n            result: result.result,\n            telemetry: {\n              traceId: result.telemetry.traceId\n            }\n          });\n        }\n      } catch (err) {\n        const { message, stack, traceId } = err;\n        next({ message, stack, traceId });\n      }\n    });\n    server.get(\"/api/envs\", async (_, response) => {\n      response.json(this.options.configuredEnvs);\n    });\n    server.post(\"/api/notify\", async (request, response) => {\n      const { telemetryServerUrl, reflectionApiSpecVersion } = request.body;\n      if (!process.env.GENKIT_TELEMETRY_SERVER) {\n        if (typeof telemetryServerUrl === \"string\") {\n          (0, import_tracing.setTelemetryServerUrl)(telemetryServerUrl);\n          import_logging.logger.debug(\n            `Connected to telemetry server on ${telemetryServerUrl}`\n          );\n        }\n      }\n      if (reflectionApiSpecVersion !== import_index.GENKIT_REFLECTION_API_SPEC_VERSION) {\n        if (!reflectionApiSpecVersion || reflectionApiSpecVersion < import_index.GENKIT_REFLECTION_API_SPEC_VERSION) {\n          import_logging.logger.warn(\n            \"WARNING: Genkit CLI version may be outdated. Please update `genkit-cli` to the latest version.\"\n          );\n        } else {\n          import_logging.logger.warn(\n            `Genkit CLI is newer than runtime library. Some feature may not be supported. Consider upgrading your runtime library version (debug info: expected ${import_index.GENKIT_REFLECTION_API_SPEC_VERSION}, got ${reflectionApiSpecVersion}).`\n          );\n        }\n      }\n      response.status(200).send(\"OK\");\n    });\n    server.use((err, req, res, next) => {\n      import_logging.logger.error(err.stack);\n      const error = err;\n      const { message, stack } = error;\n      const errorResponse = {\n        code: import_action.StatusCodes.INTERNAL,\n        message,\n        details: {\n          stack\n        }\n      };\n      if (err.traceId) {\n        errorResponse.details.traceId = err.traceId;\n      }\n      res.status(500).json(errorResponse);\n    });\n    this.port = await this.findPort();\n    this.server = server.listen(this.port, async () => {\n      import_logging.logger.debug(\n        `Reflection server (${process.pid}) running on http://localhost:${this.port}`\n      );\n      ReflectionServer.RUNNING_SERVERS.push(this);\n      await this.writeRuntimeFile();\n    });\n  }\n  /**\n   * Stops the server and removes it from the list of running servers to clean up on exit.\n   */\n  async stop() {\n    if (!this.server) {\n      return;\n    }\n    return new Promise(async (resolve, reject) => {\n      await this.cleanupRuntimeFile();\n      this.server.close(async (err) => {\n        if (err) {\n          import_logging.logger.error(\n            `Error shutting down reflection server on port ${this.port}: ${err}`\n          );\n          reject(err);\n        }\n        const index = ReflectionServer.RUNNING_SERVERS.indexOf(this);\n        if (index > -1) {\n          ReflectionServer.RUNNING_SERVERS.splice(index, 1);\n        }\n        import_logging.logger.debug(\n          `Reflection server on port ${this.port} has successfully shut down.`\n        );\n        this.port = null;\n        this.server = null;\n        resolve();\n      });\n    });\n  }\n  /**\n   * Writes the runtime file to the project root.\n   */\n  async writeRuntimeFile() {\n    try {\n      const rootDir = await findProjectRoot();\n      const runtimesDir = import_path.default.join(rootDir, \".genkit\", \"runtimes\");\n      const date = /* @__PURE__ */ new Date();\n      const time = date.getTime();\n      const timestamp = date.toISOString();\n      const runtimeId = `${process.pid}${this.port !== null ? `-${this.port}` : \"\"}`;\n      this.runtimeFilePath = import_path.default.join(\n        runtimesDir,\n        `${runtimeId}-${time}.json`\n      );\n      const fileContent = JSON.stringify(\n        {\n          id: process.env.GENKIT_RUNTIME_ID || runtimeId,\n          pid: process.pid,\n          name: this.options.name,\n          reflectionServerUrl: `http://localhost:${this.port}`,\n          timestamp,\n          genkitVersion: `nodejs/${import_index.GENKIT_VERSION}`,\n          reflectionApiSpecVersion: import_index.GENKIT_REFLECTION_API_SPEC_VERSION\n        },\n        null,\n        2\n      );\n      await import_promises.default.mkdir(runtimesDir, { recursive: true });\n      await import_promises.default.writeFile(this.runtimeFilePath, fileContent, \"utf8\");\n      import_logging.logger.debug(`Runtime file written: ${this.runtimeFilePath}`);\n    } catch (error) {\n      import_logging.logger.error(`Error writing runtime file: ${error}`);\n    }\n  }\n  /**\n   * Cleans up the port file.\n   */\n  async cleanupRuntimeFile() {\n    if (!this.runtimeFilePath) {\n      return;\n    }\n    try {\n      const fileContent = await import_promises.default.readFile(this.runtimeFilePath, \"utf8\");\n      const data = JSON.parse(fileContent);\n      if (data.pid === process.pid) {\n        await import_promises.default.unlink(this.runtimeFilePath);\n        import_logging.logger.debug(`Runtime file cleaned up: ${this.runtimeFilePath}`);\n      }\n    } catch (error) {\n      import_logging.logger.error(`Error cleaning up runtime file: ${error}`);\n    }\n  }\n  /**\n   * Stops all running reflection servers.\n   */\n  static async stopAll() {\n    return Promise.all(\n      ReflectionServer.RUNNING_SERVERS.map((server) => server.stop())\n    );\n  }\n}\nasync function findProjectRoot() {\n  let currentDir = process.cwd();\n  while (currentDir !== import_path.default.parse(currentDir).root) {\n    const packageJsonPath = import_path.default.join(currentDir, \"package.json\");\n    try {\n      await import_promises.default.access(packageJsonPath);\n      return currentDir;\n    } catch {\n      currentDir = import_path.default.dirname(currentDir);\n    }\n  }\n  throw new Error(\"Could not find project root (package.json not found)\");\n}\nif ( true && \"hot\" in module) {\n  module.hot.accept();\n  module.hot.dispose(async () => {\n    import_logging.logger.debug(\"Cleaning up reflection server(s) before module reload...\");\n    await ReflectionServer.stopAll();\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=reflection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js":
/*!******************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/registry.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar registry_exports = {};\n__export(registry_exports, {\n  Registry: () => Registry,\n  isActionType: () => isActionType,\n  parseRegistryKey: () => parseRegistryKey\n});\nmodule.exports = __toCommonJS(registry_exports);\nvar import_dotprompt = __webpack_require__(/*! dotprompt */ \"(action-browser)/./node_modules/dotprompt/dist/index.js\");\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_background_action = __webpack_require__(/*! ./background-action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js\");\nvar import_dynamic_action_provider = __webpack_require__(/*! ./dynamic-action-provider.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/dynamic-action-provider.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nconst ACTION_TYPES = [\n  \"custom\",\n  \"dynamic-action-provider\",\n  \"embedder\",\n  \"evaluator\",\n  \"executable-prompt\",\n  \"flow\",\n  \"indexer\",\n  \"model\",\n  \"background-model\",\n  \"check-operation\",\n  \"cancel-operation\",\n  \"prompt\",\n  \"reranker\",\n  \"retriever\",\n  \"tool\",\n  \"util\",\n  \"resource\"\n];\nfunction isActionType(value) {\n  return ACTION_TYPES.includes(value);\n}\nfunction parsePluginName(registryKey) {\n  const tokens = registryKey.split(\"/\");\n  if (tokens.length >= 4) {\n    return tokens[2];\n  }\n  return void 0;\n}\nfunction parseRegistryKey(registryKey) {\n  if (registryKey.startsWith(\"/dynamic-action-provider\")) {\n    const keyTokens = registryKey.split(\":\");\n    const hostTokens = keyTokens[0].split(\"/\");\n    if (hostTokens.length < 3) {\n      return void 0;\n    }\n    if (keyTokens.length < 2) {\n      return {\n        actionType: \"dynamic-action-provider\",\n        actionName: hostTokens[2]\n      };\n    }\n    const tokens2 = keyTokens[1].split(\"/\");\n    if (tokens2.length < 2 || !isActionType(tokens2[0])) {\n      return void 0;\n    }\n    return {\n      dynamicActionHost: hostTokens[2],\n      actionType: tokens2[0],\n      actionName: tokens2.slice(1).join(\"/\")\n    };\n  }\n  const tokens = registryKey.split(\"/\");\n  if (tokens.length < 3) {\n    return void 0;\n  }\n  if (tokens.length >= 4) {\n    return {\n      actionType: tokens[1],\n      pluginName: tokens[2],\n      actionName: tokens.slice(3).join(\"/\")\n    };\n  }\n  return {\n    actionType: tokens[1],\n    actionName: tokens[2]\n  };\n}\nclass Registry {\n  actionsById = {};\n  pluginsByName = {};\n  schemasByName = {};\n  valueByTypeAndName = {};\n  allPluginsInitialized = false;\n  apiStability = \"stable\";\n  dotprompt;\n  parent;\n  /** Additional runtime context data for flows and tools. */\n  context;\n  constructor(parent) {\n    if (parent) {\n      this.parent = parent;\n      this.apiStability = parent?.apiStability;\n      this.dotprompt = parent.dotprompt;\n    } else {\n      this.dotprompt = new import_dotprompt.Dotprompt({\n        schemaResolver: async (name) => {\n          const resolvedSchema = await this.lookupSchema(name);\n          if (!resolvedSchema) {\n            throw new import_error.GenkitError({\n              message: `Schema '${name}' not found`,\n              status: \"NOT_FOUND\"\n            });\n          }\n          return (0, import_schema.toJsonSchema)(resolvedSchema);\n        }\n      });\n    }\n  }\n  /**\n   * Creates a new registry overlaid onto the provided registry.\n   * @param parent The parent registry.\n   * @returns The new overlaid registry.\n   */\n  static withParent(parent) {\n    return new Registry(parent);\n  }\n  async resolveActionNames(key) {\n    const parsedKey = parseRegistryKey(key);\n    if (parsedKey?.dynamicActionHost) {\n      const hostId = `/dynamic-action-provider/${parsedKey.dynamicActionHost}`;\n      const dap = await this.actionsById[hostId];\n      if (!dap || !(0, import_dynamic_action_provider.isDynamicActionProvider)(dap)) {\n        return [];\n      }\n      return (await dap.listActionMetadata(parsedKey.actionType, parsedKey.actionName)).map((m) => `${hostId}:${parsedKey.actionType}/${m.name}`);\n    }\n    if (await this.lookupAction(key)) {\n      return [key];\n    }\n    return [];\n  }\n  /**\n   * Looks up an action in the registry.\n   * @param key The key of the action to lookup.\n   * @returns The action.\n   */\n  async lookupAction(key) {\n    const parsedKey = parseRegistryKey(key);\n    if (parsedKey?.dynamicActionHost && this.actionsById[`/dynamic-action-provider/${parsedKey.dynamicActionHost}`]) {\n      const action = await this.getDynamicAction(parsedKey);\n      if (action) {\n        return action;\n      }\n    }\n    if (parsedKey?.pluginName && this.pluginsByName[parsedKey.pluginName]) {\n      await this.initializePlugin(parsedKey.pluginName);\n      if (!this.actionsById[key]) {\n        await this.resolvePluginAction(\n          parsedKey.pluginName,\n          parsedKey.actionType,\n          parsedKey.actionName\n        );\n      }\n    }\n    return await this.actionsById[key] || this.parent?.lookupAction(key);\n  }\n  /**\n   * Looks up a background action from the registry.\n   * @param key The key of the action to lookup.\n   * @returns The action.\n   */\n  async lookupBackgroundAction(key) {\n    return (0, import_background_action.lookupBackgroundAction)(this, key);\n  }\n  /**\n   * Registers an action in the registry.\n   * @param type The type of the action to register.\n   * @param action The action to register.\n   */\n  registerAction(type, action, opts) {\n    if (type !== action.__action.actionType) {\n      throw new import_error.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `action type (${type}) does not match type on action (${action.__action.actionType})`\n      });\n    }\n    if (opts?.namespace && !action.__action.name.startsWith(`${opts.namespace}/`)) {\n      action.__action.name = `${opts.namespace}/${action.__action.name}`;\n    }\n    const key = `/${type}/${action.__action.name}`;\n    import_logging.logger.debug(`registering ${key}`);\n    if (this.actionsById.hasOwnProperty(key)) {\n      import_logging.logger.warn(\n        `WARNING: ${key} already has an entry in the registry. Overwriting.`\n      );\n    }\n    this.actionsById[key] = action;\n    if (action.__registry) {\n      import_logging.logger.error(`ERROR: ${key} already registered.`);\n    }\n    action.__registry = this;\n  }\n  /**\n   * Registers an action promise in the registry.\n   */\n  registerActionAsync(type, name, action, opts) {\n    if (opts?.namespace && !name.startsWith(`${opts.namespace}/`)) {\n      name = `${opts.namespace}/${name}`;\n    }\n    const key = `/${type}/${name}`;\n    import_logging.logger.debug(`registering ${key} (async)`);\n    if (this.actionsById.hasOwnProperty(key)) {\n      import_logging.logger.warn(\n        `WARNING: ${key} already has an entry in the registry. Overwriting.`\n      );\n    }\n    this.actionsById[key] = action;\n  }\n  /**\n   * Returns all actions that have been registered in the registry.\n   * @returns All actions in the registry as a map of <key, action>.\n   */\n  async listActions() {\n    await this.initializeAllPlugins();\n    const actions = {};\n    await Promise.all(\n      Object.entries(this.actionsById).map(async ([key, action]) => {\n        actions[key] = await action;\n      })\n    );\n    return {\n      ...await this.parent?.listActions(),\n      ...actions\n    };\n  }\n  /**\n   * Returns all actions that are resolvable by plugins as well as those that are already\n   * in the registry.\n   *\n   * NOTE: this method should not be used in latency sensitive code paths.\n   * It may rely on \"admin\" API calls such as \"list models\", which may cause increased cold start latency.\n   *\n   * @returns All resolvable action metadata as a map of <key, action metadata>.\n   */\n  async listResolvableActions() {\n    const resolvableActions = {};\n    await Promise.all(\n      Object.entries(this.pluginsByName).map(async ([pluginName, plugin]) => {\n        if (plugin.listActions) {\n          try {\n            (await plugin.listActions()).forEach((meta) => {\n              if (!meta.name) {\n                throw new import_error.GenkitError({\n                  status: \"INVALID_ARGUMENT\",\n                  message: `Invalid metadata when listing actions from ${pluginName} - name required`\n                });\n              }\n              if (!meta.actionType) {\n                throw new import_error.GenkitError({\n                  status: \"INVALID_ARGUMENT\",\n                  message: `Invalid metadata when listing actions from ${pluginName} - actionType required`\n                });\n              }\n              resolvableActions[`/${meta.actionType}/${meta.name}`] = meta;\n            });\n          } catch (e) {\n            import_logging.logger.error(`Error listing actions for ${pluginName}\n`, e);\n          }\n        }\n      })\n    );\n    for (const [key, action] of Object.entries(await this.listActions())) {\n      resolvableActions[key] = action.__action;\n    }\n    return {\n      ...await this.parent?.listResolvableActions(),\n      ...resolvableActions\n    };\n  }\n  /**\n   * Initializes all plugins in the registry.\n   */\n  async initializeAllPlugins() {\n    if (this.allPluginsInitialized) {\n      return;\n    }\n    for (const pluginName of Object.keys(this.pluginsByName)) {\n      await this.initializePlugin(pluginName);\n    }\n    this.allPluginsInitialized = true;\n  }\n  /**\n   * Registers a plugin provider. This plugin must be initialized before it can be used by calling {@link initializePlugin} or {@link initializeAllPlugins}.\n   * @param name The name of the plugin to register.\n   * @param provider The plugin provider.\n   */\n  registerPluginProvider(name, provider) {\n    if (this.pluginsByName[name]) {\n      throw new Error(`Plugin ${name} already registered`);\n    }\n    this.allPluginsInitialized = false;\n    let cached;\n    let isInitialized = false;\n    this.pluginsByName[name] = {\n      name: provider.name,\n      initializer: () => {\n        if (!isInitialized) {\n          cached = provider.initializer();\n          isInitialized = true;\n        }\n        return cached;\n      },\n      resolver: async (actionType, actionName) => {\n        if (provider.resolver) {\n          await provider.resolver(actionType, actionName);\n        }\n      },\n      listActions: async () => {\n        if (provider.listActions) {\n          return await provider.listActions();\n        }\n        return [];\n      }\n    };\n  }\n  /**\n   * Looks up a plugin.\n   * @param name The name of the plugin to lookup.\n   * @returns The plugin provider.\n   */\n  lookupPlugin(name) {\n    return this.pluginsByName[name] || this.parent?.lookupPlugin(name);\n  }\n  /**\n   * Resolves a new Action dynamically by registering it.\n   * @param pluginName The name of the plugin\n   * @param actionType The type of the action\n   * @param actionName The name of the action\n   * @returns\n   */\n  async resolvePluginAction(pluginName, actionType, actionName) {\n    const plugin = this.pluginsByName[pluginName];\n    if (plugin) {\n      return await (0, import_action.runOutsideActionRuntimeContext)(async () => {\n        if (plugin.resolver) {\n          await plugin.resolver(actionType, actionName);\n        }\n      });\n    }\n  }\n  async getDynamicAction(key) {\n    if (key.actionName.includes(\"*\")) {\n      return void 0;\n    }\n    const actionId = `/dynamic-action-provider/${key.dynamicActionHost}`;\n    const dap = await this.actionsById[actionId];\n    if (!dap || !(0, import_dynamic_action_provider.isDynamicActionProvider)(dap)) {\n      return void 0;\n    }\n    return await dap.getAction(key.actionType, key.actionName);\n  }\n  /**\n   * Initializes a plugin already registered with {@link registerPluginProvider}.\n   * @param name The name of the plugin to initialize.\n   * @returns The plugin.\n   */\n  async initializePlugin(name) {\n    if (this.pluginsByName[name]) {\n      return await (0, import_action.runOutsideActionRuntimeContext)(\n        () => this.pluginsByName[name].initializer()\n      );\n    }\n  }\n  /**\n   * Registers a schema.\n   * @param name The name of the schema to register.\n   * @param data The schema to register (either a Zod schema or a JSON schema).\n   */\n  registerSchema(name, data) {\n    if (this.schemasByName[name]) {\n      throw new Error(`Schema ${name} already registered`);\n    }\n    this.schemasByName[name] = data;\n  }\n  registerValue(type, name, value) {\n    if (!this.valueByTypeAndName[type]) {\n      this.valueByTypeAndName[type] = {};\n    }\n    this.valueByTypeAndName[type][name] = value;\n  }\n  async lookupValue(type, key) {\n    const pluginName = parsePluginName(key);\n    if (!this.valueByTypeAndName[type]?.[key] && pluginName) {\n      await this.initializePlugin(pluginName);\n    }\n    return this.valueByTypeAndName[type]?.[key] || this.parent?.lookupValue(type, key);\n  }\n  async listValues(type) {\n    await this.initializeAllPlugins();\n    return {\n      ...await this.parent?.listValues(type) || {},\n      ...this.valueByTypeAndName[type] || {}\n    };\n  }\n  /**\n   * Looks up a schema.\n   * @param name The name of the schema to lookup.\n   * @returns The schema.\n   */\n  lookupSchema(name) {\n    return this.schemasByName[name] || this.parent?.lookupSchema(name);\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/schema.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar schema_exports = {};\n__export(schema_exports, {\n  ValidationError: () => ValidationError,\n  defineJsonSchema: () => defineJsonSchema,\n  defineSchema: () => defineSchema,\n  parseSchema: () => parseSchema,\n  toJsonSchema: () => toJsonSchema,\n  validateSchema: () => validateSchema,\n  z: () => import_zod.z\n});\nmodule.exports = __toCommonJS(schema_exports);\nvar import_ajv = __toESM(__webpack_require__(/*! ajv */ \"(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/ajv.js\"));\nvar import_ajv_formats = __toESM(__webpack_require__(/*! ajv-formats */ \"(action-browser)/./node_modules/ajv-formats/dist/index.js\"));\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\");\nvar import_zod_to_json_schema = __toESM(__webpack_require__(/*! zod-to-json-schema */ \"(action-browser)/./node_modules/zod-to-json-schema/dist/cjs/index.js\"));\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nconst ajv = new import_ajv.default();\n(0, import_ajv_formats.default)(ajv);\nconst jsonSchemas = /* @__PURE__ */ new WeakMap();\nconst validators = /* @__PURE__ */ new WeakMap();\nclass ValidationError extends import_error.GenkitError {\n  constructor({\n    data,\n    errors,\n    schema\n  }) {\n    super({\n      status: \"INVALID_ARGUMENT\",\n      message: `Schema validation failed. Parse Errors:\n\n${errors.map((e) => `- ${e.path}: ${e.message}`).join(\"\\n\")}\n\nProvided data:\n\n${JSON.stringify(data, null, 2)}\n\nRequired JSON schema:\n\n${JSON.stringify(schema, null, 2)}`,\n      detail: { errors, schema }\n    });\n  }\n}\nfunction toJsonSchema({\n  jsonSchema,\n  schema\n}) {\n  if (!jsonSchema && !schema) return null;\n  if (jsonSchema) return jsonSchema;\n  if (jsonSchemas.has(schema)) return jsonSchemas.get(schema);\n  const outSchema = (0, import_zod_to_json_schema.default)(schema, {\n    $refStrategy: \"none\",\n    removeAdditionalStrategy: \"strict\"\n  });\n  jsonSchemas.set(schema, outSchema);\n  return outSchema;\n}\nfunction toErrorDetail(error) {\n  return {\n    path: error.instancePath.substring(1).replace(/\\//g, \".\") || \"(root)\",\n    message: error.message\n  };\n}\nfunction validateSchema(data, options) {\n  const toValidate = toJsonSchema(options);\n  if (!toValidate) {\n    return { valid: true, schema: toValidate };\n  }\n  const validator = validators.get(toValidate) || ajv.compile(toValidate);\n  const valid = validator(data);\n  const errors = validator.errors?.map((e) => e);\n  return { valid, errors: errors?.map(toErrorDetail), schema: toValidate };\n}\nfunction parseSchema(data, options) {\n  const { valid, errors, schema } = validateSchema(data, options);\n  if (!valid) {\n    throw new ValidationError({ data, errors, schema });\n  }\n  return data;\n}\nfunction defineSchema(registry, name, schema) {\n  registry.registerSchema(name, { schema });\n  return schema;\n}\nfunction defineJsonSchema(registry, name, jsonSchema) {\n  registry.registerSchema(name, { jsonSchema });\n  return jsonSchema;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3NjaGVtYS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSw4QkFBOEI7QUFDdkc7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQyx5RkFBSztBQUN0QyxpQ0FBaUMsbUJBQU8sQ0FBQyw4RUFBYTtBQUN0RCxpQkFBaUIsbUJBQU8sQ0FBQywwREFBSztBQUM5Qix3Q0FBd0MsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDcEUsbUJBQW1CLG1CQUFPLENBQUMsZ0ZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLHVCQUF1QixPQUFPLElBQUksVUFBVTs7QUFFOUM7O0FBRUEsRUFBRTs7QUFFRjs7QUFFQSxFQUFFLGdDQUFnQztBQUNsQyxnQkFBZ0I7QUFDaEIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEM7QUFDQSxnQ0FBZ0Msc0JBQXNCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFlBQVk7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQVFMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9zY2hlbWEuanM/MDFjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgc2NoZW1hX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNjaGVtYV9leHBvcnRzLCB7XG4gIFZhbGlkYXRpb25FcnJvcjogKCkgPT4gVmFsaWRhdGlvbkVycm9yLFxuICBkZWZpbmVKc29uU2NoZW1hOiAoKSA9PiBkZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWE6ICgpID0+IGRlZmluZVNjaGVtYSxcbiAgcGFyc2VTY2hlbWE6ICgpID0+IHBhcnNlU2NoZW1hLFxuICB0b0pzb25TY2hlbWE6ICgpID0+IHRvSnNvblNjaGVtYSxcbiAgdmFsaWRhdGVTY2hlbWE6ICgpID0+IHZhbGlkYXRlU2NoZW1hLFxuICB6OiAoKSA9PiBpbXBvcnRfem9kLnpcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc2NoZW1hX2V4cG9ydHMpO1xudmFyIGltcG9ydF9hanYgPSBfX3RvRVNNKHJlcXVpcmUoXCJhanZcIikpO1xudmFyIGltcG9ydF9hanZfZm9ybWF0cyA9IF9fdG9FU00ocmVxdWlyZShcImFqdi1mb3JtYXRzXCIpKTtcbnZhciBpbXBvcnRfem9kID0gcmVxdWlyZShcInpvZFwiKTtcbnZhciBpbXBvcnRfem9kX3RvX2pzb25fc2NoZW1hID0gX190b0VTTShyZXF1aXJlKFwiem9kLXRvLWpzb24tc2NoZW1hXCIpKTtcbnZhciBpbXBvcnRfZXJyb3IgPSByZXF1aXJlKFwiLi9lcnJvci5qc1wiKTtcbmNvbnN0IGFqdiA9IG5ldyBpbXBvcnRfYWp2LmRlZmF1bHQoKTtcbigwLCBpbXBvcnRfYWp2X2Zvcm1hdHMuZGVmYXVsdCkoYWp2KTtcbmNvbnN0IGpzb25TY2hlbWFzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCB2YWxpZGF0b3JzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jbGFzcyBWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBpbXBvcnRfZXJyb3IuR2Vua2l0RXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgZGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc2NoZW1hXG4gIH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBzdGF0dXM6IFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuICAgICAgbWVzc2FnZTogYFNjaGVtYSB2YWxpZGF0aW9uIGZhaWxlZC4gUGFyc2UgRXJyb3JzOlxuXG4ke2Vycm9ycy5tYXAoKGUpID0+IGAtICR7ZS5wYXRofTogJHtlLm1lc3NhZ2V9YCkuam9pbihcIlxcblwiKX1cblxuUHJvdmlkZWQgZGF0YTpcblxuJHtKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKX1cblxuUmVxdWlyZWQgSlNPTiBzY2hlbWE6XG5cbiR7SlNPTi5zdHJpbmdpZnkoc2NoZW1hLCBudWxsLCAyKX1gLFxuICAgICAgZGV0YWlsOiB7IGVycm9ycywgc2NoZW1hIH1cbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gdG9Kc29uU2NoZW1hKHtcbiAganNvblNjaGVtYSxcbiAgc2NoZW1hXG59KSB7XG4gIGlmICghanNvblNjaGVtYSAmJiAhc2NoZW1hKSByZXR1cm4gbnVsbDtcbiAgaWYgKGpzb25TY2hlbWEpIHJldHVybiBqc29uU2NoZW1hO1xuICBpZiAoanNvblNjaGVtYXMuaGFzKHNjaGVtYSkpIHJldHVybiBqc29uU2NoZW1hcy5nZXQoc2NoZW1hKTtcbiAgY29uc3Qgb3V0U2NoZW1hID0gKDAsIGltcG9ydF96b2RfdG9fanNvbl9zY2hlbWEuZGVmYXVsdCkoc2NoZW1hLCB7XG4gICAgJHJlZlN0cmF0ZWd5OiBcIm5vbmVcIixcbiAgICByZW1vdmVBZGRpdGlvbmFsU3RyYXRlZ3k6IFwic3RyaWN0XCJcbiAgfSk7XG4gIGpzb25TY2hlbWFzLnNldChzY2hlbWEsIG91dFNjaGVtYSk7XG4gIHJldHVybiBvdXRTY2hlbWE7XG59XG5mdW5jdGlvbiB0b0Vycm9yRGV0YWlsKGVycm9yKSB7XG4gIHJldHVybiB7XG4gICAgcGF0aDogZXJyb3IuaW5zdGFuY2VQYXRoLnN1YnN0cmluZygxKS5yZXBsYWNlKC9cXC8vZywgXCIuXCIpIHx8IFwiKHJvb3QpXCIsXG4gICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICB9O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVTY2hlbWEoZGF0YSwgb3B0aW9ucykge1xuICBjb25zdCB0b1ZhbGlkYXRlID0gdG9Kc29uU2NoZW1hKG9wdGlvbnMpO1xuICBpZiAoIXRvVmFsaWRhdGUpIHtcbiAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgc2NoZW1hOiB0b1ZhbGlkYXRlIH07XG4gIH1cbiAgY29uc3QgdmFsaWRhdG9yID0gdmFsaWRhdG9ycy5nZXQodG9WYWxpZGF0ZSkgfHwgYWp2LmNvbXBpbGUodG9WYWxpZGF0ZSk7XG4gIGNvbnN0IHZhbGlkID0gdmFsaWRhdG9yKGRhdGEpO1xuICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0b3IuZXJyb3JzPy5tYXAoKGUpID0+IGUpO1xuICByZXR1cm4geyB2YWxpZCwgZXJyb3JzOiBlcnJvcnM/Lm1hcCh0b0Vycm9yRGV0YWlsKSwgc2NoZW1hOiB0b1ZhbGlkYXRlIH07XG59XG5mdW5jdGlvbiBwYXJzZVNjaGVtYShkYXRhLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgdmFsaWQsIGVycm9ycywgc2NoZW1hIH0gPSB2YWxpZGF0ZVNjaGVtYShkYXRhLCBvcHRpb25zKTtcbiAgaWYgKCF2YWxpZCkge1xuICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoeyBkYXRhLCBlcnJvcnMsIHNjaGVtYSB9KTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGRlZmluZVNjaGVtYShyZWdpc3RyeSwgbmFtZSwgc2NoZW1hKSB7XG4gIHJlZ2lzdHJ5LnJlZ2lzdGVyU2NoZW1hKG5hbWUsIHsgc2NoZW1hIH0pO1xuICByZXR1cm4gc2NoZW1hO1xufVxuZnVuY3Rpb24gZGVmaW5lSnNvblNjaGVtYShyZWdpc3RyeSwgbmFtZSwganNvblNjaGVtYSkge1xuICByZWdpc3RyeS5yZWdpc3RlclNjaGVtYShuYW1lLCB7IGpzb25TY2hlbWEgfSk7XG4gIHJldHVybiBqc29uU2NoZW1hO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIFZhbGlkYXRpb25FcnJvcixcbiAgZGVmaW5lSnNvblNjaGVtYSxcbiAgZGVmaW5lU2NoZW1hLFxuICBwYXJzZVNjaGVtYSxcbiAgdG9Kc29uU2NoZW1hLFxuICB2YWxpZGF0ZVNjaGVtYSxcbiAgelxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlbWEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/statusTypes.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar statusTypes_exports = {};\n__export(statusTypes_exports, {\n  StatusCodes: () => StatusCodes,\n  StatusNameSchema: () => StatusNameSchema,\n  StatusSchema: () => StatusSchema,\n  httpStatusCode: () => httpStatusCode\n});\nmodule.exports = __toCommonJS(statusTypes_exports);\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\"));\nvar StatusCodes = /* @__PURE__ */ ((StatusCodes2) => {\n  StatusCodes2[StatusCodes2[\"OK\"] = 0] = \"OK\";\n  StatusCodes2[StatusCodes2[\"CANCELLED\"] = 1] = \"CANCELLED\";\n  StatusCodes2[StatusCodes2[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n  StatusCodes2[StatusCodes2[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n  StatusCodes2[StatusCodes2[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n  StatusCodes2[StatusCodes2[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n  StatusCodes2[StatusCodes2[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n  StatusCodes2[StatusCodes2[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n  StatusCodes2[StatusCodes2[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n  StatusCodes2[StatusCodes2[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n  StatusCodes2[StatusCodes2[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n  StatusCodes2[StatusCodes2[\"ABORTED\"] = 10] = \"ABORTED\";\n  StatusCodes2[StatusCodes2[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n  StatusCodes2[StatusCodes2[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n  StatusCodes2[StatusCodes2[\"INTERNAL\"] = 13] = \"INTERNAL\";\n  StatusCodes2[StatusCodes2[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n  StatusCodes2[StatusCodes2[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n  return StatusCodes2;\n})(StatusCodes || {});\nconst StatusNameSchema = z.enum([\n  \"OK\",\n  \"CANCELLED\",\n  \"UNKNOWN\",\n  \"INVALID_ARGUMENT\",\n  \"DEADLINE_EXCEEDED\",\n  \"NOT_FOUND\",\n  \"ALREADY_EXISTS\",\n  \"PERMISSION_DENIED\",\n  \"UNAUTHENTICATED\",\n  \"RESOURCE_EXHAUSTED\",\n  \"FAILED_PRECONDITION\",\n  \"ABORTED\",\n  \"OUT_OF_RANGE\",\n  \"UNIMPLEMENTED\",\n  \"INTERNAL\",\n  \"UNAVAILABLE\",\n  \"DATA_LOSS\"\n]);\nconst statusCodeMap = {\n  OK: 200,\n  CANCELLED: 499,\n  UNKNOWN: 500,\n  INVALID_ARGUMENT: 400,\n  DEADLINE_EXCEEDED: 504,\n  NOT_FOUND: 404,\n  ALREADY_EXISTS: 409,\n  PERMISSION_DENIED: 403,\n  UNAUTHENTICATED: 401,\n  RESOURCE_EXHAUSTED: 429,\n  FAILED_PRECONDITION: 400,\n  ABORTED: 409,\n  OUT_OF_RANGE: 400,\n  UNIMPLEMENTED: 501,\n  INTERNAL: 500,\n  UNAVAILABLE: 503,\n  DATA_LOSS: 500\n};\nfunction httpStatusCode(status) {\n  if (!(status in statusCodeMap)) {\n    throw new Error(`Invalid status code ${status}`);\n  }\n  return statusCodeMap[status];\n}\nconst StatusCodesSchema = z.nativeEnum(StatusCodes);\nconst StatusSchema = z.object({\n  code: StatusCodesSchema,\n  message: z.string(),\n  details: z.any().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=statusTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3N0YXR1c1R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLDBEQUFLO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtQkFBbUI7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsT0FBTztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsTUFBTSxDQUtMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9zdGF0dXNUeXBlcy5qcz8zMDdhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBzdGF0dXNUeXBlc19leHBvcnRzID0ge307XG5fX2V4cG9ydChzdGF0dXNUeXBlc19leHBvcnRzLCB7XG4gIFN0YXR1c0NvZGVzOiAoKSA9PiBTdGF0dXNDb2RlcyxcbiAgU3RhdHVzTmFtZVNjaGVtYTogKCkgPT4gU3RhdHVzTmFtZVNjaGVtYSxcbiAgU3RhdHVzU2NoZW1hOiAoKSA9PiBTdGF0dXNTY2hlbWEsXG4gIGh0dHBTdGF0dXNDb2RlOiAoKSA9PiBodHRwU3RhdHVzQ29kZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzdGF0dXNUeXBlc19leHBvcnRzKTtcbnZhciB6ID0gX190b0VTTShyZXF1aXJlKFwiem9kXCIpKTtcbnZhciBTdGF0dXNDb2RlcyA9IC8qIEBfX1BVUkVfXyAqLyAoKFN0YXR1c0NvZGVzMikgPT4ge1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiT0tcIl0gPSAwXSA9IFwiT0tcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkNBTkNFTExFRFwiXSA9IDFdID0gXCJDQU5DRUxMRURcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlVOS05PV05cIl0gPSAyXSA9IFwiVU5LTk9XTlwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJERUFETElORV9FWENFRURFRFwiXSA9IDRdID0gXCJERUFETElORV9FWENFRURFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiTk9UX0ZPVU5EXCJdID0gNV0gPSBcIk5PVF9GT1VORFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiQUxSRUFEWV9FWElTVFNcIl0gPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlBFUk1JU1NJT05fREVOSUVEXCJdID0gN10gPSBcIlBFUk1JU1NJT05fREVOSUVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJVTkFVVEhFTlRJQ0FURURcIl0gPSAxNl0gPSBcIlVOQVVUSEVOVElDQVRFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiUkVTT1VSQ0VfRVhIQVVTVEVEXCJdID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiRkFJTEVEX1BSRUNPTkRJVElPTlwiXSA9IDldID0gXCJGQUlMRURfUFJFQ09ORElUSU9OXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJBQk9SVEVEXCJdID0gMTBdID0gXCJBQk9SVEVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJPVVRfT0ZfUkFOR0VcIl0gPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiVU5JTVBMRU1FTlRFRFwiXSA9IDEyXSA9IFwiVU5JTVBMRU1FTlRFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiSU5URVJOQUxcIl0gPSAxM10gPSBcIklOVEVSTkFMXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJVTkFWQUlMQUJMRVwiXSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkRBVEFfTE9TU1wiXSA9IDE1XSA9IFwiREFUQV9MT1NTXCI7XG4gIHJldHVybiBTdGF0dXNDb2RlczI7XG59KShTdGF0dXNDb2RlcyB8fCB7fSk7XG5jb25zdCBTdGF0dXNOYW1lU2NoZW1hID0gei5lbnVtKFtcbiAgXCJPS1wiLFxuICBcIkNBTkNFTExFRFwiLFxuICBcIlVOS05PV05cIixcbiAgXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gIFwiREVBRExJTkVfRVhDRUVERURcIixcbiAgXCJOT1RfRk9VTkRcIixcbiAgXCJBTFJFQURZX0VYSVNUU1wiLFxuICBcIlBFUk1JU1NJT05fREVOSUVEXCIsXG4gIFwiVU5BVVRIRU5USUNBVEVEXCIsXG4gIFwiUkVTT1VSQ0VfRVhIQVVTVEVEXCIsXG4gIFwiRkFJTEVEX1BSRUNPTkRJVElPTlwiLFxuICBcIkFCT1JURURcIixcbiAgXCJPVVRfT0ZfUkFOR0VcIixcbiAgXCJVTklNUExFTUVOVEVEXCIsXG4gIFwiSU5URVJOQUxcIixcbiAgXCJVTkFWQUlMQUJMRVwiLFxuICBcIkRBVEFfTE9TU1wiXG5dKTtcbmNvbnN0IHN0YXR1c0NvZGVNYXAgPSB7XG4gIE9LOiAyMDAsXG4gIENBTkNFTExFRDogNDk5LFxuICBVTktOT1dOOiA1MDAsXG4gIElOVkFMSURfQVJHVU1FTlQ6IDQwMCxcbiAgREVBRExJTkVfRVhDRUVERUQ6IDUwNCxcbiAgTk9UX0ZPVU5EOiA0MDQsXG4gIEFMUkVBRFlfRVhJU1RTOiA0MDksXG4gIFBFUk1JU1NJT05fREVOSUVEOiA0MDMsXG4gIFVOQVVUSEVOVElDQVRFRDogNDAxLFxuICBSRVNPVVJDRV9FWEhBVVNURUQ6IDQyOSxcbiAgRkFJTEVEX1BSRUNPTkRJVElPTjogNDAwLFxuICBBQk9SVEVEOiA0MDksXG4gIE9VVF9PRl9SQU5HRTogNDAwLFxuICBVTklNUExFTUVOVEVEOiA1MDEsXG4gIElOVEVSTkFMOiA1MDAsXG4gIFVOQVZBSUxBQkxFOiA1MDMsXG4gIERBVEFfTE9TUzogNTAwXG59O1xuZnVuY3Rpb24gaHR0cFN0YXR1c0NvZGUoc3RhdHVzKSB7XG4gIGlmICghKHN0YXR1cyBpbiBzdGF0dXNDb2RlTWFwKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzdGF0dXMgY29kZSAke3N0YXR1c31gKTtcbiAgfVxuICByZXR1cm4gc3RhdHVzQ29kZU1hcFtzdGF0dXNdO1xufVxuY29uc3QgU3RhdHVzQ29kZXNTY2hlbWEgPSB6Lm5hdGl2ZUVudW0oU3RhdHVzQ29kZXMpO1xuY29uc3QgU3RhdHVzU2NoZW1hID0gei5vYmplY3Qoe1xuICBjb2RlOiBTdGF0dXNDb2Rlc1NjaGVtYSxcbiAgbWVzc2FnZTogei5zdHJpbmcoKSxcbiAgZGV0YWlsczogei5hbnkoKS5vcHRpb25hbCgpXG59KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBTdGF0dXNDb2RlcyxcbiAgU3RhdHVzTmFtZVNjaGVtYSxcbiAgU3RhdHVzU2NoZW1hLFxuICBodHRwU3RhdHVzQ29kZVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXNUeXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/telemetryTypes.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar telemetryTypes_exports = {};\nmodule.exports = __toCommonJS(telemetryTypes_exports);\n//# sourceMappingURL=telemetryTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RlbGVtZXRyeVR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RlbGVtZXRyeVR5cGVzLmpzP2Q1MDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHRlbGVtZXRyeVR5cGVzX2V4cG9ydHMgPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHRlbGVtZXRyeVR5cGVzX2V4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVsZW1ldHJ5VHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar tracing_exports = {};\n__export(tracing_exports, {\n  enableTelemetry: () => enableTelemetry,\n  ensureBasicTelemetryInstrumentation: () => ensureBasicTelemetryInstrumentation,\n  flushTracing: () => flushTracing,\n  setTelemetryProvider: () => setTelemetryProvider\n});\nmodule.exports = __toCommonJS(tracing_exports);\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/exporter.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/instrumentation.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/types.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js\"), module.exports);\nconst instrumentationKey = \"__GENKIT_TELEMETRY_INSTRUMENTED\";\nconst telemetryProviderKey = \"__GENKIT_TELEMETRY_PROVIDER\";\nasync function ensureBasicTelemetryInstrumentation() {\n  await checkFirebaseMonitoringAutoInit();\n  if (global[instrumentationKey]) {\n    return await global[instrumentationKey];\n  }\n  await enableTelemetry({});\n}\nasync function checkFirebaseMonitoringAutoInit() {\n  if (!global[instrumentationKey] && process.env.ENABLE_FIREBASE_MONITORING === \"true\") {\n    try {\n      const importModule = new Function(\n        \"moduleName\",\n        \"return import(moduleName)\"\n      );\n      const firebaseModule = await importModule(\"@genkit-ai/firebase\");\n      firebaseModule.enableFirebaseTelemetry();\n    } catch (e) {\n      import_logging.logger.warn(\n        \"It looks like you're trying to enable firebase monitoring, but haven't installed the firebase plugin. Please run `npm i --save @genkit-ai/firebase` and redeploy.\"\n      );\n    }\n  }\n}\nfunction getTelemetryProvider() {\n  if (global[telemetryProviderKey]) {\n    return global[telemetryProviderKey];\n  }\n  throw new import_error.GenkitError({\n    status: \"FAILED_PRECONDITION\",\n    message: \"TelemetryProvider is not initialized.\"\n  });\n}\nfunction setTelemetryProvider(provider) {\n  if (global[telemetryProviderKey]) return;\n  global[telemetryProviderKey] = provider;\n}\nasync function enableTelemetry(telemetryConfig) {\n  global[instrumentationKey] = telemetryConfig instanceof Promise ? telemetryConfig : Promise.resolve();\n  return getTelemetryProvider().enableTelemetry(telemetryConfig);\n}\nasync function flushTracing() {\n  return getTelemetryProvider().flushTracing();\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tracing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3ZDLHFCQUFxQixtQkFBTyxDQUFDLG9GQUFjO0FBQzNDLDRCQUE0QixtQkFBTyxDQUFDLHNHQUF1QjtBQUMzRCw0QkFBNEIsbUJBQU8sQ0FBQyxvSEFBOEI7QUFDbEUsNEJBQTRCLG1CQUFPLENBQUMsZ0dBQW9CO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQVFMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi90cmFjaW5nLmpzPzVkYjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3JlRXhwb3J0ID0gKHRhcmdldCwgbW9kLCBzZWNvbmRUYXJnZXQpID0+IChfX2NvcHlQcm9wcyh0YXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpLCBzZWNvbmRUYXJnZXQgJiYgX19jb3B5UHJvcHMoc2Vjb25kVGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB0cmFjaW5nX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHRyYWNpbmdfZXhwb3J0cywge1xuICBlbmFibGVUZWxlbWV0cnk6ICgpID0+IGVuYWJsZVRlbGVtZXRyeSxcbiAgZW5zdXJlQmFzaWNUZWxlbWV0cnlJbnN0cnVtZW50YXRpb246ICgpID0+IGVuc3VyZUJhc2ljVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uLFxuICBmbHVzaFRyYWNpbmc6ICgpID0+IGZsdXNoVHJhY2luZyxcbiAgc2V0VGVsZW1ldHJ5UHJvdmlkZXI6ICgpID0+IHNldFRlbGVtZXRyeVByb3ZpZGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHRyYWNpbmdfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2Vycm9yID0gcmVxdWlyZShcIi4vZXJyb3IuanNcIik7XG52YXIgaW1wb3J0X2xvZ2dpbmcgPSByZXF1aXJlKFwiLi9sb2dnaW5nLmpzXCIpO1xuX19yZUV4cG9ydCh0cmFjaW5nX2V4cG9ydHMsIHJlcXVpcmUoXCIuL3RyYWNpbmcvZXhwb3J0ZXIuanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbl9fcmVFeHBvcnQodHJhY2luZ19leHBvcnRzLCByZXF1aXJlKFwiLi90cmFjaW5nL2luc3RydW1lbnRhdGlvbi5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xuX19yZUV4cG9ydCh0cmFjaW5nX2V4cG9ydHMsIHJlcXVpcmUoXCIuL3RyYWNpbmcvdHlwZXMuanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbktleSA9IFwiX19HRU5LSVRfVEVMRU1FVFJZX0lOU1RSVU1FTlRFRFwiO1xuY29uc3QgdGVsZW1ldHJ5UHJvdmlkZXJLZXkgPSBcIl9fR0VOS0lUX1RFTEVNRVRSWV9QUk9WSURFUlwiO1xuYXN5bmMgZnVuY3Rpb24gZW5zdXJlQmFzaWNUZWxlbWV0cnlJbnN0cnVtZW50YXRpb24oKSB7XG4gIGF3YWl0IGNoZWNrRmlyZWJhc2VNb25pdG9yaW5nQXV0b0luaXQoKTtcbiAgaWYgKGdsb2JhbFtpbnN0cnVtZW50YXRpb25LZXldKSB7XG4gICAgcmV0dXJuIGF3YWl0IGdsb2JhbFtpbnN0cnVtZW50YXRpb25LZXldO1xuICB9XG4gIGF3YWl0IGVuYWJsZVRlbGVtZXRyeSh7fSk7XG59XG5hc3luYyBmdW5jdGlvbiBjaGVja0ZpcmViYXNlTW9uaXRvcmluZ0F1dG9Jbml0KCkge1xuICBpZiAoIWdsb2JhbFtpbnN0cnVtZW50YXRpb25LZXldICYmIHByb2Nlc3MuZW52LkVOQUJMRV9GSVJFQkFTRV9NT05JVE9SSU5HID09PSBcInRydWVcIikge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBpbXBvcnRNb2R1bGUgPSBuZXcgRnVuY3Rpb24oXG4gICAgICAgIFwibW9kdWxlTmFtZVwiLFxuICAgICAgICBcInJldHVybiBpbXBvcnQobW9kdWxlTmFtZSlcIlxuICAgICAgKTtcbiAgICAgIGNvbnN0IGZpcmViYXNlTW9kdWxlID0gYXdhaXQgaW1wb3J0TW9kdWxlKFwiQGdlbmtpdC1haS9maXJlYmFzZVwiKTtcbiAgICAgIGZpcmViYXNlTW9kdWxlLmVuYWJsZUZpcmViYXNlVGVsZW1ldHJ5KCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaW1wb3J0X2xvZ2dpbmcubG9nZ2VyLndhcm4oXG4gICAgICAgIFwiSXQgbG9va3MgbGlrZSB5b3UncmUgdHJ5aW5nIHRvIGVuYWJsZSBmaXJlYmFzZSBtb25pdG9yaW5nLCBidXQgaGF2ZW4ndCBpbnN0YWxsZWQgdGhlIGZpcmViYXNlIHBsdWdpbi4gUGxlYXNlIHJ1biBgbnBtIGkgLS1zYXZlIEBnZW5raXQtYWkvZmlyZWJhc2VgIGFuZCByZWRlcGxveS5cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRlbGVtZXRyeVByb3ZpZGVyKCkge1xuICBpZiAoZ2xvYmFsW3RlbGVtZXRyeVByb3ZpZGVyS2V5XSkge1xuICAgIHJldHVybiBnbG9iYWxbdGVsZW1ldHJ5UHJvdmlkZXJLZXldO1xuICB9XG4gIHRocm93IG5ldyBpbXBvcnRfZXJyb3IuR2Vua2l0RXJyb3Ioe1xuICAgIHN0YXR1czogXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gICAgbWVzc2FnZTogXCJUZWxlbWV0cnlQcm92aWRlciBpcyBub3QgaW5pdGlhbGl6ZWQuXCJcbiAgfSk7XG59XG5mdW5jdGlvbiBzZXRUZWxlbWV0cnlQcm92aWRlcihwcm92aWRlcikge1xuICBpZiAoZ2xvYmFsW3RlbGVtZXRyeVByb3ZpZGVyS2V5XSkgcmV0dXJuO1xuICBnbG9iYWxbdGVsZW1ldHJ5UHJvdmlkZXJLZXldID0gcHJvdmlkZXI7XG59XG5hc3luYyBmdW5jdGlvbiBlbmFibGVUZWxlbWV0cnkodGVsZW1ldHJ5Q29uZmlnKSB7XG4gIGdsb2JhbFtpbnN0cnVtZW50YXRpb25LZXldID0gdGVsZW1ldHJ5Q29uZmlnIGluc3RhbmNlb2YgUHJvbWlzZSA/IHRlbGVtZXRyeUNvbmZpZyA6IFByb21pc2UucmVzb2x2ZSgpO1xuICByZXR1cm4gZ2V0VGVsZW1ldHJ5UHJvdmlkZXIoKS5lbmFibGVUZWxlbWV0cnkodGVsZW1ldHJ5Q29uZmlnKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGZsdXNoVHJhY2luZygpIHtcbiAgcmV0dXJuIGdldFRlbGVtZXRyeVByb3ZpZGVyKCkuZmx1c2hUcmFjaW5nKCk7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZW5hYmxlVGVsZW1ldHJ5LFxuICBlbnN1cmVCYXNpY1RlbGVtZXRyeUluc3RydW1lbnRhdGlvbixcbiAgZmx1c2hUcmFjaW5nLFxuICBzZXRUZWxlbWV0cnlQcm92aWRlcixcbiAgLi4ucmVxdWlyZShcIi4vdHJhY2luZy9leHBvcnRlci5qc1wiKSxcbiAgLi4ucmVxdWlyZShcIi4vdHJhY2luZy9pbnN0cnVtZW50YXRpb24uanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL3RyYWNpbmcvdHlwZXMuanNcIilcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2luZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js":
/*!**************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/exporter.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar exporter_exports = {};\n__export(exporter_exports, {\n  TraceServerExporter: () => TraceServerExporter,\n  setTelemetryServerUrl: () => setTelemetryServerUrl,\n  telemetryServerUrl: () => telemetryServerUrl\n});\nmodule.exports = __toCommonJS(exporter_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(action-browser)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_core = __webpack_require__(/*! @opentelemetry/core */ \"(action-browser)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nvar import_logging = __webpack_require__(/*! ../logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_utils = __webpack_require__(/*! ../utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\");\nlet telemetryServerUrl;\nfunction setTelemetryServerUrl(url) {\n  telemetryServerUrl = url;\n}\nclass TraceServerExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(spans, resultCallback) {\n    this._sendSpans(spans, resultCallback);\n  }\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown() {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n  /**\n   * Converts span info into trace store format.\n   * @param span\n   */\n  _exportInfo(span) {\n    const spanData = {\n      spanId: span.spanContext().spanId,\n      traceId: span.spanContext().traceId,\n      startTime: transformTime(span.startTime),\n      endTime: transformTime(span.endTime),\n      attributes: { ...span.attributes },\n      displayName: span.name,\n      links: span.links,\n      spanKind: import_api.SpanKind[span.kind],\n      parentSpanId: span.parentSpanId,\n      sameProcessAsParentSpan: { value: !span.spanContext().isRemote },\n      status: span.status,\n      timeEvents: {\n        timeEvent: span.events.map((e) => ({\n          time: transformTime(e.time),\n          annotation: {\n            attributes: e.attributes ?? {},\n            description: e.name\n          }\n        }))\n      }\n    };\n    if (span.instrumentationLibrary !== void 0) {\n      spanData.instrumentationLibrary = {\n        name: span.instrumentationLibrary.name\n      };\n      if (span.instrumentationLibrary.schemaUrl !== void 0) {\n        spanData.instrumentationLibrary.schemaUrl = span.instrumentationLibrary.schemaUrl;\n      }\n      if (span.instrumentationLibrary.version !== void 0) {\n        spanData.instrumentationLibrary.version = span.instrumentationLibrary.version;\n      }\n    }\n    (0, import_utils.deleteUndefinedProps)(spanData);\n    return spanData;\n  }\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush() {\n    return Promise.resolve();\n  }\n  async _sendSpans(spans, done) {\n    const traces = {};\n    for (const span of spans) {\n      if (!traces[span.spanContext().traceId]) {\n        traces[span.spanContext().traceId] = [];\n      }\n      traces[span.spanContext().traceId].push(span);\n    }\n    let error = false;\n    for (const traceId of Object.keys(traces)) {\n      try {\n        await this.save(traceId, traces[traceId]);\n      } catch (e) {\n        error = true;\n        import_logging.logger.error(`Failed to save trace ${traceId}`, e);\n      }\n      if (done) {\n        return done({\n          code: error ? import_core.ExportResultCode.FAILED : import_core.ExportResultCode.SUCCESS\n        });\n      }\n    }\n  }\n  async save(traceId, spans) {\n    if (!telemetryServerUrl) {\n      import_logging.logger.debug(\n        `Telemetry server is not configured, trace ${traceId} not saved!`\n      );\n      return;\n    }\n    const data = {\n      traceId,\n      spans: {}\n    };\n    for (const span of spans) {\n      const convertedSpan = this._exportInfo(span);\n      data.spans[convertedSpan.spanId] = convertedSpan;\n      if (!convertedSpan.parentSpanId) {\n        data.displayName = convertedSpan.displayName;\n        data.startTime = convertedSpan.startTime;\n        data.endTime = convertedSpan.endTime;\n      }\n    }\n    await fetch(`${telemetryServerUrl}/api/traces`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  }\n}\nfunction transformTime(time) {\n  return (0, import_core.hrTimeToMilliseconds)(time);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=exporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar instrumentation_exports = {};\n__export(instrumentation_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  SPAN_TYPE_ATTR: () => SPAN_TYPE_ATTR,\n  appendSpan: () => appendSpan,\n  disableOTelRootSpanDetection: () => disableOTelRootSpanDetection,\n  runInNewSpan: () => runInNewSpan,\n  setCustomMetadataAttribute: () => setCustomMetadataAttribute,\n  setCustomMetadataAttributes: () => setCustomMetadataAttributes,\n  spanMetadataAlsKey: () => spanMetadataAlsKey,\n  toDisplayPath: () => toDisplayPath\n});\nmodule.exports = __toCommonJS(instrumentation_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(action-browser)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nvar import_async_context = __webpack_require__(/*! ../async-context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async-context.js\");\nvar import_tracing = __webpack_require__(/*! ../tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nconst spanMetadataAlsKey = \"core.tracing.instrumentation.span\";\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_TYPE_ATTR = ATTR_PREFIX + \":type\";\nconst TRACER_NAME = \"genkit-tracer\";\nconst TRACER_VERSION = \"v1\";\nasync function runInNewSpan(registryOrOprs, optsOrFn, fnMaybe) {\n  let opts;\n  let fn;\n  if (arguments.length === 3) {\n    opts = optsOrFn;\n    fn = fnMaybe;\n  } else {\n    opts = registryOrOprs;\n    fn = optsOrFn;\n  }\n  await (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n  const tracer = import_api.trace.getTracer(TRACER_NAME, TRACER_VERSION);\n  const parentStep = (0, import_async_context.getAsyncContext)().getStore(spanMetadataAlsKey);\n  const isInRoot = parentStep?.metadata?.isRoot === true;\n  if (!parentStep) opts.metadata.isRoot ||= true;\n  const spanOptions = { links: opts.links };\n  if (!isDisableRootSpanDetection()) {\n    spanOptions.root = opts.metadata.isRoot;\n  }\n  return await tracer.startActiveSpan(\n    opts.metadata.name,\n    spanOptions,\n    async (otSpan) => {\n      if (opts.labels) otSpan.setAttributes(opts.labels);\n      const spanContext = {\n        ...parentStep,\n        metadata: opts.metadata\n      };\n      try {\n        opts.metadata.path = buildPath(\n          opts.metadata.name,\n          parentStep?.metadata?.path || \"\",\n          opts.labels\n        );\n        const output = await (0, import_async_context.getAsyncContext)().run(\n          spanMetadataAlsKey,\n          spanContext,\n          () => fn(opts.metadata, otSpan, isInRoot)\n        );\n        if (opts.metadata.state !== \"error\") {\n          opts.metadata.state = \"success\";\n        }\n        recordPath(opts.metadata, spanContext);\n        return output;\n      } catch (e) {\n        recordPath(opts.metadata, spanContext, e);\n        opts.metadata.state = \"error\";\n        otSpan.setStatus({\n          code: import_api.SpanStatusCode.ERROR,\n          message: getErrorMessage(e)\n        });\n        if (e instanceof Error) {\n          otSpan.recordException(e);\n        }\n        if (typeof e === \"object\") {\n          if (!e.ignoreFailedSpan) {\n            opts.metadata.isFailureSource = true;\n          }\n          e.ignoreFailedSpan = true;\n        }\n        throw e;\n      } finally {\n        otSpan.setAttributes(metadataToAttributes(opts.metadata));\n        otSpan.end();\n      }\n    }\n  );\n}\nasync function appendSpan(traceId, parentSpanId, metadata, labels) {\n  await (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n  const tracer = import_api.trace.getTracer(TRACER_NAME, TRACER_VERSION);\n  const spanContext = import_api.trace.setSpanContext(import_api.ROOT_CONTEXT, {\n    traceId,\n    traceFlags: 1,\n    // sampled\n    spanId: parentSpanId\n  });\n  const span = tracer.startSpan(metadata.name, {}, spanContext);\n  span.setAttributes(metadataToAttributes(metadata));\n  if (labels) {\n    span.setAttributes(labels);\n  }\n  span.end();\n}\nfunction getErrorMessage(e) {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return `${e}`;\n}\nfunction metadataToAttributes(metadata) {\n  const out = {};\n  Object.keys(metadata).forEach((key) => {\n    if (key === \"metadata\" && typeof metadata[key] === \"object\" && metadata.metadata) {\n      Object.entries(metadata.metadata).forEach(([metaKey, value]) => {\n        out[ATTR_PREFIX + \":metadata:\" + metaKey] = value;\n      });\n    } else if (key === \"input\" || typeof metadata[key] === \"object\") {\n      out[ATTR_PREFIX + \":\" + key] = JSON.stringify(metadata[key]);\n    } else {\n      out[ATTR_PREFIX + \":\" + key] = metadata[key];\n    }\n  });\n  return out;\n}\nfunction setCustomMetadataAttribute(key, value) {\n  const currentStep = getCurrentSpan();\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  currentStep.metadata[key] = value;\n}\nfunction setCustomMetadataAttributes(values) {\n  const currentStep = getCurrentSpan();\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  for (const [key, value] of Object.entries(values)) {\n    currentStep.metadata[key] = value;\n  }\n}\nfunction toDisplayPath(path) {\n  const pathPartRegex = /\\{([^\\,}]+),[^\\}]+\\}/g;\n  return Array.from(path.matchAll(pathPartRegex), (m) => m[1]).join(\" > \");\n}\nfunction getCurrentSpan() {\n  const step = (0, import_async_context.getAsyncContext)().getStore(spanMetadataAlsKey);\n  if (!step) {\n    throw new Error(\"running outside step context\");\n  }\n  return step.metadata;\n}\nfunction buildPath(name, parentPath, labels) {\n  const stepType = labels && labels[\"genkit:type\"] ? `,t:${labels[\"genkit:metadata:subtype\"] === \"flow\" ? \"flow\" : labels[\"genkit:type\"]}` : \"\";\n  return parentPath + `/{${name}${stepType}}`;\n}\nfunction recordPath(spanMeta, spanContext, err) {\n  const path = spanMeta.path || \"\";\n  const decoratedPath = decoratePathWithSubtype(spanMeta);\n  const paths = Array.from(spanContext?.paths || /* @__PURE__ */ new Set());\n  const status = err ? \"failure\" : \"success\";\n  if (!paths.some((p) => p.path.startsWith(path) && p.status === status)) {\n    const now = import_node_perf_hooks.performance.now();\n    const start = spanContext?.timestamp || now;\n    spanContext?.paths?.add({\n      path: decoratedPath,\n      error: err?.name,\n      latency: now - start,\n      status\n    });\n  }\n  spanMeta.path = decoratedPath;\n}\nfunction decoratePathWithSubtype(metadata) {\n  if (!metadata.path) {\n    return \"\";\n  }\n  const pathComponents = metadata.path.split(\"}/{\");\n  if (pathComponents.length == 1) {\n    return metadata.path;\n  }\n  const stepSubtype = metadata.metadata && metadata.metadata[\"subtype\"] ? `,s:${metadata.metadata[\"subtype\"]}` : \"\";\n  const root = `${pathComponents.slice(0, -1).join(\"}/{\")}}/`;\n  const decoratedStep = `{${pathComponents.at(-1)?.slice(0, -1)}${stepSubtype}}`;\n  return root + decoratedStep;\n}\nconst rootSpanDetectionKey = \"__genkit_disableRootSpanDetection\";\nfunction isDisableRootSpanDetection() {\n  return global[rootSpanDetectionKey] === true;\n}\nfunction disableOTelRootSpanDetection() {\n  global[rootSpanDetectionKey] = true;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/node-telemetry-provider.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/node-telemetry-provider.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar node_telemetry_provider_exports = {};\n__export(node_telemetry_provider_exports, {\n  initNodeTelemetryProvider: () => initNodeTelemetryProvider\n});\nmodule.exports = __toCommonJS(node_telemetry_provider_exports);\nvar import_sdk_node = __webpack_require__(/*! @opentelemetry/sdk-node */ \"(action-browser)/./node_modules/@opentelemetry/sdk-node/build/src/index.js\");\nvar import_sdk_trace_base = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(action-browser)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nvar import_logging = __webpack_require__(/*! ../logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_tracing = __webpack_require__(/*! ../tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_utils = __webpack_require__(/*! ../utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\");\nvar import_exporter = __webpack_require__(/*! ./exporter.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\");\nlet telemetrySDK = null;\nlet nodeOtelConfig = null;\nfunction initNodeTelemetryProvider() {\n  (0, import_tracing.setTelemetryProvider)({\n    enableTelemetry,\n    flushTracing\n  });\n}\nasync function enableTelemetry(telemetryConfig) {\n  if (process.env.GENKIT_TELEMETRY_SERVER) {\n    (0, import_exporter.setTelemetryServerUrl)(process.env.GENKIT_TELEMETRY_SERVER);\n  }\n  telemetryConfig = telemetryConfig instanceof Promise ? await telemetryConfig : telemetryConfig;\n  nodeOtelConfig = telemetryConfig || {};\n  const processors = [createTelemetryServerProcessor()];\n  if (nodeOtelConfig.traceExporter) {\n    throw new Error(\"Please specify spanProcessors instead.\");\n  }\n  if (nodeOtelConfig.spanProcessors) {\n    processors.push(...nodeOtelConfig.spanProcessors);\n  }\n  if (nodeOtelConfig.spanProcessor) {\n    processors.push(nodeOtelConfig.spanProcessor);\n    delete nodeOtelConfig.spanProcessor;\n  }\n  nodeOtelConfig.spanProcessors = processors;\n  telemetrySDK = new import_sdk_node.NodeSDK(nodeOtelConfig);\n  telemetrySDK.start();\n  process.on(\"SIGTERM\", async () => await cleanUpTracing());\n}\nasync function cleanUpTracing() {\n  if (!telemetrySDK) {\n    return;\n  }\n  await maybeFlushMetrics();\n  await telemetrySDK.shutdown();\n  import_logging.logger.debug(\"OpenTelemetry SDK shut down.\");\n  telemetrySDK = null;\n}\nfunction createTelemetryServerProcessor() {\n  const exporter = new import_exporter.TraceServerExporter();\n  return (0, import_utils.isDevEnv)() ? new import_sdk_trace_base.SimpleSpanProcessor(exporter) : new import_sdk_trace_base.BatchSpanProcessor(exporter);\n}\nfunction maybeFlushMetrics() {\n  if (nodeOtelConfig?.metricReader) {\n    return nodeOtelConfig.metricReader.forceFlush();\n  }\n  return Promise.resolve();\n}\nasync function flushTracing() {\n  if (nodeOtelConfig?.spanProcessors) {\n    await Promise.all(nodeOtelConfig.spanProcessors.map((p) => p.forceFlush()));\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=node-telemetry-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvbm9kZS10ZWxlbWV0cnktcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxzQkFBc0IsbUJBQU8sQ0FBQywyR0FBeUI7QUFDdkQsNEJBQTRCLG1CQUFPLENBQUMsdUhBQStCO0FBQ25FLHFCQUFxQixtQkFBTyxDQUFDLHFGQUFlO0FBQzVDLHFCQUFxQixtQkFBTyxDQUFDLHFGQUFlO0FBQzVDLG1CQUFtQixtQkFBTyxDQUFDLGlGQUFhO0FBQ3hDLHNCQUFzQixtQkFBTyxDQUFDLDhGQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvbm9kZS10ZWxlbWV0cnktcHJvdmlkZXIuanM/ZGE4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgbm9kZV90ZWxlbWV0cnlfcHJvdmlkZXJfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQobm9kZV90ZWxlbWV0cnlfcHJvdmlkZXJfZXhwb3J0cywge1xuICBpbml0Tm9kZVRlbGVtZXRyeVByb3ZpZGVyOiAoKSA9PiBpbml0Tm9kZVRlbGVtZXRyeVByb3ZpZGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKG5vZGVfdGVsZW1ldHJ5X3Byb3ZpZGVyX2V4cG9ydHMpO1xudmFyIGltcG9ydF9zZGtfbm9kZSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9zZGstbm9kZVwiKTtcbnZhciBpbXBvcnRfc2RrX3RyYWNlX2Jhc2UgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2VcIik7XG52YXIgaW1wb3J0X2xvZ2dpbmcgPSByZXF1aXJlKFwiLi4vbG9nZ2luZy5qc1wiKTtcbnZhciBpbXBvcnRfdHJhY2luZyA9IHJlcXVpcmUoXCIuLi90cmFjaW5nLmpzXCIpO1xudmFyIGltcG9ydF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlscy5qc1wiKTtcbnZhciBpbXBvcnRfZXhwb3J0ZXIgPSByZXF1aXJlKFwiLi9leHBvcnRlci5qc1wiKTtcbmxldCB0ZWxlbWV0cnlTREsgPSBudWxsO1xubGV0IG5vZGVPdGVsQ29uZmlnID0gbnVsbDtcbmZ1bmN0aW9uIGluaXROb2RlVGVsZW1ldHJ5UHJvdmlkZXIoKSB7XG4gICgwLCBpbXBvcnRfdHJhY2luZy5zZXRUZWxlbWV0cnlQcm92aWRlcikoe1xuICAgIGVuYWJsZVRlbGVtZXRyeSxcbiAgICBmbHVzaFRyYWNpbmdcbiAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiBlbmFibGVUZWxlbWV0cnkodGVsZW1ldHJ5Q29uZmlnKSB7XG4gIGlmIChwcm9jZXNzLmVudi5HRU5LSVRfVEVMRU1FVFJZX1NFUlZFUikge1xuICAgICgwLCBpbXBvcnRfZXhwb3J0ZXIuc2V0VGVsZW1ldHJ5U2VydmVyVXJsKShwcm9jZXNzLmVudi5HRU5LSVRfVEVMRU1FVFJZX1NFUlZFUik7XG4gIH1cbiAgdGVsZW1ldHJ5Q29uZmlnID0gdGVsZW1ldHJ5Q29uZmlnIGluc3RhbmNlb2YgUHJvbWlzZSA/IGF3YWl0IHRlbGVtZXRyeUNvbmZpZyA6IHRlbGVtZXRyeUNvbmZpZztcbiAgbm9kZU90ZWxDb25maWcgPSB0ZWxlbWV0cnlDb25maWcgfHwge307XG4gIGNvbnN0IHByb2Nlc3NvcnMgPSBbY3JlYXRlVGVsZW1ldHJ5U2VydmVyUHJvY2Vzc29yKCldO1xuICBpZiAobm9kZU90ZWxDb25maWcudHJhY2VFeHBvcnRlcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBzcGVjaWZ5IHNwYW5Qcm9jZXNzb3JzIGluc3RlYWQuXCIpO1xuICB9XG4gIGlmIChub2RlT3RlbENvbmZpZy5zcGFuUHJvY2Vzc29ycykge1xuICAgIHByb2Nlc3NvcnMucHVzaCguLi5ub2RlT3RlbENvbmZpZy5zcGFuUHJvY2Vzc29ycyk7XG4gIH1cbiAgaWYgKG5vZGVPdGVsQ29uZmlnLnNwYW5Qcm9jZXNzb3IpIHtcbiAgICBwcm9jZXNzb3JzLnB1c2gobm9kZU90ZWxDb25maWcuc3BhblByb2Nlc3Nvcik7XG4gICAgZGVsZXRlIG5vZGVPdGVsQ29uZmlnLnNwYW5Qcm9jZXNzb3I7XG4gIH1cbiAgbm9kZU90ZWxDb25maWcuc3BhblByb2Nlc3NvcnMgPSBwcm9jZXNzb3JzO1xuICB0ZWxlbWV0cnlTREsgPSBuZXcgaW1wb3J0X3Nka19ub2RlLk5vZGVTREsobm9kZU90ZWxDb25maWcpO1xuICB0ZWxlbWV0cnlTREsuc3RhcnQoKTtcbiAgcHJvY2Vzcy5vbihcIlNJR1RFUk1cIiwgYXN5bmMgKCkgPT4gYXdhaXQgY2xlYW5VcFRyYWNpbmcoKSk7XG59XG5hc3luYyBmdW5jdGlvbiBjbGVhblVwVHJhY2luZygpIHtcbiAgaWYgKCF0ZWxlbWV0cnlTREspIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYXdhaXQgbWF5YmVGbHVzaE1ldHJpY3MoKTtcbiAgYXdhaXQgdGVsZW1ldHJ5U0RLLnNodXRkb3duKCk7XG4gIGltcG9ydF9sb2dnaW5nLmxvZ2dlci5kZWJ1ZyhcIk9wZW5UZWxlbWV0cnkgU0RLIHNodXQgZG93bi5cIik7XG4gIHRlbGVtZXRyeVNESyA9IG51bGw7XG59XG5mdW5jdGlvbiBjcmVhdGVUZWxlbWV0cnlTZXJ2ZXJQcm9jZXNzb3IoKSB7XG4gIGNvbnN0IGV4cG9ydGVyID0gbmV3IGltcG9ydF9leHBvcnRlci5UcmFjZVNlcnZlckV4cG9ydGVyKCk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3V0aWxzLmlzRGV2RW52KSgpID8gbmV3IGltcG9ydF9zZGtfdHJhY2VfYmFzZS5TaW1wbGVTcGFuUHJvY2Vzc29yKGV4cG9ydGVyKSA6IG5ldyBpbXBvcnRfc2RrX3RyYWNlX2Jhc2UuQmF0Y2hTcGFuUHJvY2Vzc29yKGV4cG9ydGVyKTtcbn1cbmZ1bmN0aW9uIG1heWJlRmx1c2hNZXRyaWNzKCkge1xuICBpZiAobm9kZU90ZWxDb25maWc/Lm1ldHJpY1JlYWRlcikge1xuICAgIHJldHVybiBub2RlT3RlbENvbmZpZy5tZXRyaWNSZWFkZXIuZm9yY2VGbHVzaCgpO1xuICB9XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGZsdXNoVHJhY2luZygpIHtcbiAgaWYgKG5vZGVPdGVsQ29uZmlnPy5zcGFuUHJvY2Vzc29ycykge1xuICAgIGF3YWl0IFByb21pc2UuYWxsKG5vZGVPdGVsQ29uZmlnLnNwYW5Qcm9jZXNzb3JzLm1hcCgocCkgPT4gcC5mb3JjZUZsdXNoKCkpKTtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluaXROb2RlVGVsZW1ldHJ5UHJvdmlkZXJcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS10ZWxlbWV0cnktcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/node-telemetry-provider.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/types.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  InstrumentationLibrarySchema: () => InstrumentationLibrarySchema,\n  LinkSchema: () => LinkSchema,\n  PathMetadataSchema: () => PathMetadataSchema,\n  SpanContextSchema: () => SpanContextSchema,\n  SpanDataSchema: () => SpanDataSchema,\n  SpanMetadataSchema: () => SpanMetadataSchema,\n  SpanStatusSchema: () => SpanStatusSchema,\n  TimeEventSchema: () => TimeEventSchema,\n  TraceDataSchema: () => TraceDataSchema,\n  TraceMetadataSchema: () => TraceMetadataSchema\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/index.cjs\");\nconst PathMetadataSchema = import_zod.z.object({\n  path: import_zod.z.string(),\n  status: import_zod.z.string(),\n  error: import_zod.z.string().optional(),\n  latency: import_zod.z.number()\n});\nconst TraceMetadataSchema = import_zod.z.object({\n  featureName: import_zod.z.string().optional(),\n  paths: import_zod.z.set(PathMetadataSchema).optional(),\n  timestamp: import_zod.z.number()\n});\nconst SpanMetadataSchema = import_zod.z.object({\n  name: import_zod.z.string(),\n  state: import_zod.z.enum([\"success\", \"error\"]).optional(),\n  input: import_zod.z.any().optional(),\n  output: import_zod.z.any().optional(),\n  isRoot: import_zod.z.boolean().optional(),\n  metadata: import_zod.z.record(import_zod.z.string(), import_zod.z.string()).optional(),\n  path: import_zod.z.string().optional(),\n  // Indicates a \"leaf\" span that is the source of a failure.\n  isFailureSource: import_zod.z.boolean().optional()\n});\nconst SpanStatusSchema = import_zod.z.object({\n  code: import_zod.z.number(),\n  message: import_zod.z.string().optional()\n});\nconst TimeEventSchema = import_zod.z.object({\n  time: import_zod.z.number(),\n  annotation: import_zod.z.object({\n    attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n    description: import_zod.z.string()\n  })\n});\nconst SpanContextSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  spanId: import_zod.z.string(),\n  isRemote: import_zod.z.boolean().optional(),\n  traceFlags: import_zod.z.number()\n});\nconst LinkSchema = import_zod.z.object({\n  context: SpanContextSchema.optional(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()).optional(),\n  droppedAttributesCount: import_zod.z.number().optional()\n});\nconst InstrumentationLibrarySchema = import_zod.z.object({\n  name: import_zod.z.string().readonly(),\n  version: import_zod.z.string().optional().readonly(),\n  schemaUrl: import_zod.z.string().optional().readonly()\n});\nconst SpanDataSchema = import_zod.z.object({\n  spanId: import_zod.z.string(),\n  traceId: import_zod.z.string(),\n  parentSpanId: import_zod.z.string().optional(),\n  startTime: import_zod.z.number(),\n  endTime: import_zod.z.number(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n  displayName: import_zod.z.string(),\n  links: import_zod.z.array(LinkSchema).optional(),\n  instrumentationLibrary: InstrumentationLibrarySchema,\n  spanKind: import_zod.z.string(),\n  sameProcessAsParentSpan: import_zod.z.object({ value: import_zod.z.boolean() }).optional(),\n  status: SpanStatusSchema.optional(),\n  timeEvents: import_zod.z.object({\n    timeEvent: import_zod.z.array(TimeEventSchema)\n  }).optional(),\n  truncated: import_zod.z.boolean().optional()\n});\nconst TraceDataSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  displayName: import_zod.z.string().optional(),\n  startTime: import_zod.z.number().optional().describe(\"trace start time in milliseconds since the epoch\"),\n  endTime: import_zod.z.number().optional().describe(\"end time in milliseconds since the epoch\"),\n  spans: import_zod.z.record(import_zod.z.string(), SpanDataSchema)\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQywwREFBSztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsK0JBQStCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxNQUFNLENBV0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvdHlwZXMuanM/ZmVkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdHlwZXNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQodHlwZXNfZXhwb3J0cywge1xuICBJbnN0cnVtZW50YXRpb25MaWJyYXJ5U2NoZW1hOiAoKSA9PiBJbnN0cnVtZW50YXRpb25MaWJyYXJ5U2NoZW1hLFxuICBMaW5rU2NoZW1hOiAoKSA9PiBMaW5rU2NoZW1hLFxuICBQYXRoTWV0YWRhdGFTY2hlbWE6ICgpID0+IFBhdGhNZXRhZGF0YVNjaGVtYSxcbiAgU3BhbkNvbnRleHRTY2hlbWE6ICgpID0+IFNwYW5Db250ZXh0U2NoZW1hLFxuICBTcGFuRGF0YVNjaGVtYTogKCkgPT4gU3BhbkRhdGFTY2hlbWEsXG4gIFNwYW5NZXRhZGF0YVNjaGVtYTogKCkgPT4gU3Bhbk1ldGFkYXRhU2NoZW1hLFxuICBTcGFuU3RhdHVzU2NoZW1hOiAoKSA9PiBTcGFuU3RhdHVzU2NoZW1hLFxuICBUaW1lRXZlbnRTY2hlbWE6ICgpID0+IFRpbWVFdmVudFNjaGVtYSxcbiAgVHJhY2VEYXRhU2NoZW1hOiAoKSA9PiBUcmFjZURhdGFTY2hlbWEsXG4gIFRyYWNlTWV0YWRhdGFTY2hlbWE6ICgpID0+IFRyYWNlTWV0YWRhdGFTY2hlbWFcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlModHlwZXNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3pvZCA9IHJlcXVpcmUoXCJ6b2RcIik7XG5jb25zdCBQYXRoTWV0YWRhdGFTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgcGF0aDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBzdGF0dXM6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgZXJyb3I6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBsYXRlbmN5OiBpbXBvcnRfem9kLnoubnVtYmVyKClcbn0pO1xuY29uc3QgVHJhY2VNZXRhZGF0YVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBmZWF0dXJlTmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHBhdGhzOiBpbXBvcnRfem9kLnouc2V0KFBhdGhNZXRhZGF0YVNjaGVtYSkub3B0aW9uYWwoKSxcbiAgdGltZXN0YW1wOiBpbXBvcnRfem9kLnoubnVtYmVyKClcbn0pO1xuY29uc3QgU3Bhbk1ldGFkYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIG5hbWU6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgc3RhdGU6IGltcG9ydF96b2Quei5lbnVtKFtcInN1Y2Nlc3NcIiwgXCJlcnJvclwiXSkub3B0aW9uYWwoKSxcbiAgaW5wdXQ6IGltcG9ydF96b2Quei5hbnkoKS5vcHRpb25hbCgpLFxuICBvdXRwdXQ6IGltcG9ydF96b2Quei5hbnkoKS5vcHRpb25hbCgpLFxuICBpc1Jvb3Q6IGltcG9ydF96b2Quei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgbWV0YWRhdGE6IGltcG9ydF96b2Quei5yZWNvcmQoaW1wb3J0X3pvZC56LnN0cmluZygpLCBpbXBvcnRfem9kLnouc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gIHBhdGg6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAvLyBJbmRpY2F0ZXMgYSBcImxlYWZcIiBzcGFuIHRoYXQgaXMgdGhlIHNvdXJjZSBvZiBhIGZhaWx1cmUuXG4gIGlzRmFpbHVyZVNvdXJjZTogaW1wb3J0X3pvZC56LmJvb2xlYW4oKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFNwYW5TdGF0dXNTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgY29kZTogaW1wb3J0X3pvZC56Lm51bWJlcigpLFxuICBtZXNzYWdlOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKVxufSk7XG5jb25zdCBUaW1lRXZlbnRTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgdGltZTogaW1wb3J0X3pvZC56Lm51bWJlcigpLFxuICBhbm5vdGF0aW9uOiBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgICBhdHRyaWJ1dGVzOiBpbXBvcnRfem9kLnoucmVjb3JkKGltcG9ydF96b2Quei5zdHJpbmcoKSwgaW1wb3J0X3pvZC56LmFueSgpKSxcbiAgICBkZXNjcmlwdGlvbjogaW1wb3J0X3pvZC56LnN0cmluZygpXG4gIH0pXG59KTtcbmNvbnN0IFNwYW5Db250ZXh0U2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHRyYWNlSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgc3BhbklkOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIGlzUmVtb3RlOiBpbXBvcnRfem9kLnouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gIHRyYWNlRmxhZ3M6IGltcG9ydF96b2Quei5udW1iZXIoKVxufSk7XG5jb25zdCBMaW5rU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIGNvbnRleHQ6IFNwYW5Db250ZXh0U2NoZW1hLm9wdGlvbmFsKCksXG4gIGF0dHJpYnV0ZXM6IGltcG9ydF96b2Quei5yZWNvcmQoaW1wb3J0X3pvZC56LnN0cmluZygpLCBpbXBvcnRfem9kLnouYW55KCkpLm9wdGlvbmFsKCksXG4gIGRyb3BwZWRBdHRyaWJ1dGVzQ291bnQ6IGltcG9ydF96b2Quei5udW1iZXIoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgbmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLnJlYWRvbmx5KCksXG4gIHZlcnNpb246IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpLnJlYWRvbmx5KCksXG4gIHNjaGVtYVVybDogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCkucmVhZG9ubHkoKVxufSk7XG5jb25zdCBTcGFuRGF0YVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBzcGFuSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgdHJhY2VJZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBwYXJlbnRTcGFuSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBzdGFydFRpbWU6IGltcG9ydF96b2Quei5udW1iZXIoKSxcbiAgZW5kVGltZTogaW1wb3J0X3pvZC56Lm51bWJlcigpLFxuICBhdHRyaWJ1dGVzOiBpbXBvcnRfem9kLnoucmVjb3JkKGltcG9ydF96b2Quei5zdHJpbmcoKSwgaW1wb3J0X3pvZC56LmFueSgpKSxcbiAgZGlzcGxheU5hbWU6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgbGlua3M6IGltcG9ydF96b2Quei5hcnJheShMaW5rU2NoZW1hKS5vcHRpb25hbCgpLFxuICBpbnN0cnVtZW50YXRpb25MaWJyYXJ5OiBJbnN0cnVtZW50YXRpb25MaWJyYXJ5U2NoZW1hLFxuICBzcGFuS2luZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBzYW1lUHJvY2Vzc0FzUGFyZW50U3BhbjogaW1wb3J0X3pvZC56Lm9iamVjdCh7IHZhbHVlOiBpbXBvcnRfem9kLnouYm9vbGVhbigpIH0pLm9wdGlvbmFsKCksXG4gIHN0YXR1czogU3BhblN0YXR1c1NjaGVtYS5vcHRpb25hbCgpLFxuICB0aW1lRXZlbnRzOiBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgICB0aW1lRXZlbnQ6IGltcG9ydF96b2Quei5hcnJheShUaW1lRXZlbnRTY2hlbWEpXG4gIH0pLm9wdGlvbmFsKCksXG4gIHRydW5jYXRlZDogaW1wb3J0X3pvZC56LmJvb2xlYW4oKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFRyYWNlRGF0YVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICB0cmFjZUlkOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIGRpc3BsYXlOYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgc3RhcnRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCkub3B0aW9uYWwoKS5kZXNjcmliZShcInRyYWNlIHN0YXJ0IHRpbWUgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBlcG9jaFwiKSxcbiAgZW5kVGltZTogaW1wb3J0X3pvZC56Lm51bWJlcigpLm9wdGlvbmFsKCkuZGVzY3JpYmUoXCJlbmQgdGltZSBpbiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGVwb2NoXCIpLFxuICBzcGFuczogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIFNwYW5EYXRhU2NoZW1hKVxufSk7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgSW5zdHJ1bWVudGF0aW9uTGlicmFyeVNjaGVtYSxcbiAgTGlua1NjaGVtYSxcbiAgUGF0aE1ldGFkYXRhU2NoZW1hLFxuICBTcGFuQ29udGV4dFNjaGVtYSxcbiAgU3BhbkRhdGFTY2hlbWEsXG4gIFNwYW5NZXRhZGF0YVNjaGVtYSxcbiAgU3BhblN0YXR1c1NjaGVtYSxcbiAgVGltZUV2ZW50U2NoZW1hLFxuICBUcmFjZURhdGFTY2hlbWEsXG4gIFRyYWNlTWV0YWRhdGFTY2hlbWFcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/utils.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  deleteUndefinedProps: () => deleteUndefinedProps,\n  featureMetadataPrefix: () => featureMetadataPrefix,\n  getCurrentEnv: () => getCurrentEnv,\n  isDevEnv: () => isDevEnv,\n  stripUndefinedProps: () => stripUndefinedProps\n});\nmodule.exports = __toCommonJS(utils_exports);\nfunction deleteUndefinedProps(obj) {\n  for (const prop in obj) {\n    if (obj[prop] === void 0) {\n      delete obj[prop];\n    } else {\n      if (typeof obj[prop] === \"object\") {\n        deleteUndefinedProps(obj[prop]);\n      }\n    }\n  }\n}\nfunction stripUndefinedProps(input) {\n  if (input === void 0 || input === null || Array.isArray(input) || typeof input !== \"object\") {\n    return input;\n  }\n  const out = {};\n  for (const key in input) {\n    if (input[key] !== void 0) {\n      out[key] = stripUndefinedProps(input[key]);\n    }\n  }\n  return out;\n}\nfunction getCurrentEnv() {\n  return process.env.GENKIT_ENV || \"prod\";\n}\nfunction isDevEnv() {\n  return getCurrentEnv() === \"dev\";\n}\nfunction featureMetadataPrefix(name) {\n  return `feature:${name}`;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixLQUFLO0FBQ3pCO0FBQ0E7QUFDQSxNQUFNLENBTUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3V0aWxzLmpzPzc5ZmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHV0aWxzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHV0aWxzX2V4cG9ydHMsIHtcbiAgZGVsZXRlVW5kZWZpbmVkUHJvcHM6ICgpID0+IGRlbGV0ZVVuZGVmaW5lZFByb3BzLFxuICBmZWF0dXJlTWV0YWRhdGFQcmVmaXg6ICgpID0+IGZlYXR1cmVNZXRhZGF0YVByZWZpeCxcbiAgZ2V0Q3VycmVudEVudjogKCkgPT4gZ2V0Q3VycmVudEVudixcbiAgaXNEZXZFbnY6ICgpID0+IGlzRGV2RW52LFxuICBzdHJpcFVuZGVmaW5lZFByb3BzOiAoKSA9PiBzdHJpcFVuZGVmaW5lZFByb3BzXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHV0aWxzX2V4cG9ydHMpO1xuZnVuY3Rpb24gZGVsZXRlVW5kZWZpbmVkUHJvcHMob2JqKSB7XG4gIGZvciAoY29uc3QgcHJvcCBpbiBvYmopIHtcbiAgICBpZiAob2JqW3Byb3BdID09PSB2b2lkIDApIHtcbiAgICAgIGRlbGV0ZSBvYmpbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW3Byb3BdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGRlbGV0ZVVuZGVmaW5lZFByb3BzKG9ialtwcm9wXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzdHJpcFVuZGVmaW5lZFByb3BzKGlucHV0KSB7XG4gIGlmIChpbnB1dCA9PT0gdm9pZCAwIHx8IGlucHV0ID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkoaW5wdXQpIHx8IHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuICBjb25zdCBvdXQgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gaW5wdXQpIHtcbiAgICBpZiAoaW5wdXRba2V5XSAhPT0gdm9pZCAwKSB7XG4gICAgICBvdXRba2V5XSA9IHN0cmlwVW5kZWZpbmVkUHJvcHMoaW5wdXRba2V5XSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiBnZXRDdXJyZW50RW52KCkge1xuICByZXR1cm4gcHJvY2Vzcy5lbnYuR0VOS0lUX0VOViB8fCBcInByb2RcIjtcbn1cbmZ1bmN0aW9uIGlzRGV2RW52KCkge1xuICByZXR1cm4gZ2V0Q3VycmVudEVudigpID09PSBcImRldlwiO1xufVxuZnVuY3Rpb24gZmVhdHVyZU1ldGFkYXRhUHJlZml4KG5hbWUpIHtcbiAgcmV0dXJuIGBmZWF0dXJlOiR7bmFtZX1gO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlbGV0ZVVuZGVmaW5lZFByb3BzLFxuICBmZWF0dXJlTWV0YWRhdGFQcmVmaXgsXG4gIGdldEN1cnJlbnRFbnYsXG4gIGlzRGV2RW52LFxuICBzdHJpcFVuZGVmaW5lZFByb3BzXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/common.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar common_exports = {};\n__export(common_exports, {\n  getApiKeyFromEnvVar: () => getApiKeyFromEnvVar,\n  getGenkitClientHeader: () => getGenkitClientHeader\n});\nmodule.exports = __toCommonJS(common_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_process = __toESM(__webpack_require__(/*! process */ \"process\"));\nfunction getApiKeyFromEnvVar() {\n  return import_process.default.env.GEMINI_API_KEY || import_process.default.env.GOOGLE_API_KEY || import_process.default.env.GOOGLE_GENAI_API_KEY;\n}\nfunction getGenkitClientHeader() {\n  if (import_process.default.env.MONOSPACE_ENV == \"true\") {\n    return (0, import_genkit.getClientHeader)() + \" firebase-studio-vm\";\n  }\n  return (0, import_genkit.getClientHeader)();\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxvQkFBb0IsbUJBQU8sQ0FBQyxtRUFBUTtBQUNwQyw2QkFBNkIsbUJBQU8sQ0FBQyx3QkFBUztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FHTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2NvbW1vbi5qcz8wZTkzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBjb21tb25fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoY29tbW9uX2V4cG9ydHMsIHtcbiAgZ2V0QXBpS2V5RnJvbUVudlZhcjogKCkgPT4gZ2V0QXBpS2V5RnJvbUVudlZhcixcbiAgZ2V0R2Vua2l0Q2xpZW50SGVhZGVyOiAoKSA9PiBnZXRHZW5raXRDbGllbnRIZWFkZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoY29tbW9uX2V4cG9ydHMpO1xudmFyIGltcG9ydF9nZW5raXQgPSByZXF1aXJlKFwiZ2Vua2l0XCIpO1xudmFyIGltcG9ydF9wcm9jZXNzID0gX190b0VTTShyZXF1aXJlKFwicHJvY2Vzc1wiKSk7XG5mdW5jdGlvbiBnZXRBcGlLZXlGcm9tRW52VmFyKCkge1xuICByZXR1cm4gaW1wb3J0X3Byb2Nlc3MuZGVmYXVsdC5lbnYuR0VNSU5JX0FQSV9LRVkgfHwgaW1wb3J0X3Byb2Nlc3MuZGVmYXVsdC5lbnYuR09PR0xFX0FQSV9LRVkgfHwgaW1wb3J0X3Byb2Nlc3MuZGVmYXVsdC5lbnYuR09PR0xFX0dFTkFJX0FQSV9LRVk7XG59XG5mdW5jdGlvbiBnZXRHZW5raXRDbGllbnRIZWFkZXIoKSB7XG4gIGlmIChpbXBvcnRfcHJvY2Vzcy5kZWZhdWx0LmVudi5NT05PU1BBQ0VfRU5WID09IFwidHJ1ZVwiKSB7XG4gICAgcmV0dXJuICgwLCBpbXBvcnRfZ2Vua2l0LmdldENsaWVudEhlYWRlcikoKSArIFwiIGZpcmViYXNlLXN0dWRpby12bVwiO1xuICB9XG4gIHJldHVybiAoMCwgaW1wb3J0X2dlbmtpdC5nZXRDbGllbnRIZWFkZXIpKCk7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0QXBpS2V5RnJvbUVudlZhcixcbiAgZ2V0R2Vua2l0Q2xpZW50SGVhZGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar constants_exports = {};\n__export(constants_exports, {\n  CONTEXT_CACHE_SUPPORTED_MODELS: () => CONTEXT_CACHE_SUPPORTED_MODELS,\n  DEFAULT_TTL: () => DEFAULT_TTL,\n  INVALID_ARGUMENT_MESSAGES: () => INVALID_ARGUMENT_MESSAGES\n});\nmodule.exports = __toCommonJS(constants_exports);\nconst CONTEXT_CACHE_SUPPORTED_MODELS = [\n  \"gemini-1.5-flash-001\",\n  \"gemini-1.5-pro-001\"\n];\nconst INVALID_ARGUMENT_MESSAGES = {\n  modelVersion: `Model version is required for context caching, supported only in ${CONTEXT_CACHE_SUPPORTED_MODELS.join(\",\")} models.`,\n  tools: \"Context caching cannot be used simultaneously with tools.\",\n  codeExecution: \"Context caching cannot be used simultaneously with code execution.\"\n};\nconst DEFAULT_TTL = 300;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsMENBQTBDO0FBQzlIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvY29uc3RhbnRzLmpzPzM0YjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGNvbnN0YW50c19leHBvcnRzID0ge307XG5fX2V4cG9ydChjb25zdGFudHNfZXhwb3J0cywge1xuICBDT05URVhUX0NBQ0hFX1NVUFBPUlRFRF9NT0RFTFM6ICgpID0+IENPTlRFWFRfQ0FDSEVfU1VQUE9SVEVEX01PREVMUyxcbiAgREVGQVVMVF9UVEw6ICgpID0+IERFRkFVTFRfVFRMLFxuICBJTlZBTElEX0FSR1VNRU5UX01FU1NBR0VTOiAoKSA9PiBJTlZBTElEX0FSR1VNRU5UX01FU1NBR0VTXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGNvbnN0YW50c19leHBvcnRzKTtcbmNvbnN0IENPTlRFWFRfQ0FDSEVfU1VQUE9SVEVEX01PREVMUyA9IFtcbiAgXCJnZW1pbmktMS41LWZsYXNoLTAwMVwiLFxuICBcImdlbWluaS0xLjUtcHJvLTAwMVwiXG5dO1xuY29uc3QgSU5WQUxJRF9BUkdVTUVOVF9NRVNTQUdFUyA9IHtcbiAgbW9kZWxWZXJzaW9uOiBgTW9kZWwgdmVyc2lvbiBpcyByZXF1aXJlZCBmb3IgY29udGV4dCBjYWNoaW5nLCBzdXBwb3J0ZWQgb25seSBpbiAke0NPTlRFWFRfQ0FDSEVfU1VQUE9SVEVEX01PREVMUy5qb2luKFwiLFwiKX0gbW9kZWxzLmAsXG4gIHRvb2xzOiBcIkNvbnRleHQgY2FjaGluZyBjYW5ub3QgYmUgdXNlZCBzaW11bHRhbmVvdXNseSB3aXRoIHRvb2xzLlwiLFxuICBjb2RlRXhlY3V0aW9uOiBcIkNvbnRleHQgY2FjaGluZyBjYW5ub3QgYmUgdXNlZCBzaW11bHRhbmVvdXNseSB3aXRoIGNvZGUgZXhlY3V0aW9uLlwiXG59O1xuY29uc3QgREVGQVVMVF9UVEwgPSAzMDA7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ09OVEVYVF9DQUNIRV9TVVBQT1JURURfTU9ERUxTLFxuICBERUZBVUxUX1RUTCxcbiAgSU5WQUxJRF9BUkdVTUVOVF9NRVNTQUdFU1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/index.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar context_caching_exports = {};\n__export(context_caching_exports, {\n  handleCacheIfNeeded: () => handleCacheIfNeeded,\n  handleContextCache: () => handleContextCache\n});\nmodule.exports = __toCommonJS(context_caching_exports);\nvar import_server = __webpack_require__(/*! @google/generative-ai/server */ \"(action-browser)/./node_modules/@google/generative-ai/dist/server/index.js\");\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_logging = __webpack_require__(/*! genkit/logging */ \"(action-browser)/./node_modules/genkit/lib/logging.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js\");\nasync function handleContextCache(apiKey, request, chatRequest, modelVersion, cacheConfigDetails) {\n  const cacheManager = new import_server.GoogleAICacheManager(apiKey);\n  const { cachedContent, chatRequest: newChatRequest } = (0, import_utils.getContentForCache)(\n    request,\n    chatRequest,\n    modelVersion,\n    cacheConfigDetails\n  );\n  cachedContent.model = modelVersion;\n  const cacheKey = (0, import_utils.generateCacheKey)(cachedContent);\n  cachedContent.displayName = cacheKey;\n  let cache = await (0, import_utils.lookupContextCache)(cacheManager, cacheKey);\n  import_logging.logger.debug(`Cache hit: ${cache ? \"true\" : \"false\"}`);\n  if (!cache) {\n    try {\n      import_logging.logger.debug(\"No cache found, creating one.\");\n      const createParams = {\n        ...cachedContent,\n        ttlSeconds: (0, import_utils.calculateTTL)(cacheConfigDetails)\n      };\n      cache = await cacheManager.create(createParams);\n      import_logging.logger.debug(`Created new cache entry with key: ${cacheKey}`);\n    } catch (cacheError) {\n      import_logging.logger.error(\n        `Failed to create cache with key ${cacheKey}: ${cacheError}`\n      );\n      throw new import_genkit.GenkitError({\n        status: \"INTERNAL\",\n        message: `Failed to create cache: ${cacheError}`\n      });\n    }\n  }\n  if (!cache) {\n    throw new import_genkit.GenkitError({\n      status: \"INTERNAL\",\n      message: \"Failed to use context cache feature\"\n    });\n  }\n  return { cache, newChatRequest };\n}\nasync function handleCacheIfNeeded(apiKey, request, chatRequest, modelVersion, cacheConfigDetails) {\n  if (!cacheConfigDetails || !(0, import_utils.validateContextCacheRequest)(request, modelVersion)) {\n    return { chatRequest, cache: null };\n  }\n  const { cache, newChatRequest } = await handleContextCache(\n    apiKey,\n    request,\n    chatRequest,\n    modelVersion,\n    cacheConfigDetails\n  );\n  return { chatRequest: newChatRequest, cache };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLGdIQUE4QjtBQUMxRCxvQkFBb0IsbUJBQU8sQ0FBQyxtRUFBUTtBQUNwQyxxQkFBcUIsbUJBQU8sQ0FBQyw2RUFBZ0I7QUFDN0MsbUJBQW1CLG1CQUFPLENBQUMsb0dBQVk7QUFDdkM7QUFDQTtBQUNBLFVBQVUsNkNBQTZDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qyx5QkFBeUI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxTQUFTO0FBQ2hGLE1BQU07QUFDTjtBQUNBLDJDQUEyQyxTQUFTLElBQUksV0FBVztBQUNuRTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsV0FBVztBQUN2RCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9nb29nbGVhaS9saWIvY29udGV4dC1jYWNoaW5nL2luZGV4LmpzPzBjOWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGNvbnRleHRfY2FjaGluZ19leHBvcnRzID0ge307XG5fX2V4cG9ydChjb250ZXh0X2NhY2hpbmdfZXhwb3J0cywge1xuICBoYW5kbGVDYWNoZUlmTmVlZGVkOiAoKSA9PiBoYW5kbGVDYWNoZUlmTmVlZGVkLFxuICBoYW5kbGVDb250ZXh0Q2FjaGU6ICgpID0+IGhhbmRsZUNvbnRleHRDYWNoZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhjb250ZXh0X2NhY2hpbmdfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3NlcnZlciA9IHJlcXVpcmUoXCJAZ29vZ2xlL2dlbmVyYXRpdmUtYWkvc2VydmVyXCIpO1xudmFyIGltcG9ydF9nZW5raXQgPSByZXF1aXJlKFwiZ2Vua2l0XCIpO1xudmFyIGltcG9ydF9sb2dnaW5nID0gcmVxdWlyZShcImdlbmtpdC9sb2dnaW5nXCIpO1xudmFyIGltcG9ydF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ29udGV4dENhY2hlKGFwaUtleSwgcmVxdWVzdCwgY2hhdFJlcXVlc3QsIG1vZGVsVmVyc2lvbiwgY2FjaGVDb25maWdEZXRhaWxzKSB7XG4gIGNvbnN0IGNhY2hlTWFuYWdlciA9IG5ldyBpbXBvcnRfc2VydmVyLkdvb2dsZUFJQ2FjaGVNYW5hZ2VyKGFwaUtleSk7XG4gIGNvbnN0IHsgY2FjaGVkQ29udGVudCwgY2hhdFJlcXVlc3Q6IG5ld0NoYXRSZXF1ZXN0IH0gPSAoMCwgaW1wb3J0X3V0aWxzLmdldENvbnRlbnRGb3JDYWNoZSkoXG4gICAgcmVxdWVzdCxcbiAgICBjaGF0UmVxdWVzdCxcbiAgICBtb2RlbFZlcnNpb24sXG4gICAgY2FjaGVDb25maWdEZXRhaWxzXG4gICk7XG4gIGNhY2hlZENvbnRlbnQubW9kZWwgPSBtb2RlbFZlcnNpb247XG4gIGNvbnN0IGNhY2hlS2V5ID0gKDAsIGltcG9ydF91dGlscy5nZW5lcmF0ZUNhY2hlS2V5KShjYWNoZWRDb250ZW50KTtcbiAgY2FjaGVkQ29udGVudC5kaXNwbGF5TmFtZSA9IGNhY2hlS2V5O1xuICBsZXQgY2FjaGUgPSBhd2FpdCAoMCwgaW1wb3J0X3V0aWxzLmxvb2t1cENvbnRleHRDYWNoZSkoY2FjaGVNYW5hZ2VyLCBjYWNoZUtleSk7XG4gIGltcG9ydF9sb2dnaW5nLmxvZ2dlci5kZWJ1ZyhgQ2FjaGUgaGl0OiAke2NhY2hlID8gXCJ0cnVlXCIgOiBcImZhbHNlXCJ9YCk7XG4gIGlmICghY2FjaGUpIHtcbiAgICB0cnkge1xuICAgICAgaW1wb3J0X2xvZ2dpbmcubG9nZ2VyLmRlYnVnKFwiTm8gY2FjaGUgZm91bmQsIGNyZWF0aW5nIG9uZS5cIik7XG4gICAgICBjb25zdCBjcmVhdGVQYXJhbXMgPSB7XG4gICAgICAgIC4uLmNhY2hlZENvbnRlbnQsXG4gICAgICAgIHR0bFNlY29uZHM6ICgwLCBpbXBvcnRfdXRpbHMuY2FsY3VsYXRlVFRMKShjYWNoZUNvbmZpZ0RldGFpbHMpXG4gICAgICB9O1xuICAgICAgY2FjaGUgPSBhd2FpdCBjYWNoZU1hbmFnZXIuY3JlYXRlKGNyZWF0ZVBhcmFtcyk7XG4gICAgICBpbXBvcnRfbG9nZ2luZy5sb2dnZXIuZGVidWcoYENyZWF0ZWQgbmV3IGNhY2hlIGVudHJ5IHdpdGgga2V5OiAke2NhY2hlS2V5fWApO1xuICAgIH0gY2F0Y2ggKGNhY2hlRXJyb3IpIHtcbiAgICAgIGltcG9ydF9sb2dnaW5nLmxvZ2dlci5lcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBjcmVhdGUgY2FjaGUgd2l0aCBrZXkgJHtjYWNoZUtleX06ICR7Y2FjaGVFcnJvcn1gXG4gICAgICApO1xuICAgICAgdGhyb3cgbmV3IGltcG9ydF9nZW5raXQuR2Vua2l0RXJyb3Ioe1xuICAgICAgICBzdGF0dXM6IFwiSU5URVJOQUxcIixcbiAgICAgICAgbWVzc2FnZTogYEZhaWxlZCB0byBjcmVhdGUgY2FjaGU6ICR7Y2FjaGVFcnJvcn1gXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKCFjYWNoZSkge1xuICAgIHRocm93IG5ldyBpbXBvcnRfZ2Vua2l0LkdlbmtpdEVycm9yKHtcbiAgICAgIHN0YXR1czogXCJJTlRFUk5BTFwiLFxuICAgICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gdXNlIGNvbnRleHQgY2FjaGUgZmVhdHVyZVwiXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHsgY2FjaGUsIG5ld0NoYXRSZXF1ZXN0IH07XG59XG5hc3luYyBmdW5jdGlvbiBoYW5kbGVDYWNoZUlmTmVlZGVkKGFwaUtleSwgcmVxdWVzdCwgY2hhdFJlcXVlc3QsIG1vZGVsVmVyc2lvbiwgY2FjaGVDb25maWdEZXRhaWxzKSB7XG4gIGlmICghY2FjaGVDb25maWdEZXRhaWxzIHx8ICEoMCwgaW1wb3J0X3V0aWxzLnZhbGlkYXRlQ29udGV4dENhY2hlUmVxdWVzdCkocmVxdWVzdCwgbW9kZWxWZXJzaW9uKSkge1xuICAgIHJldHVybiB7IGNoYXRSZXF1ZXN0LCBjYWNoZTogbnVsbCB9O1xuICB9XG4gIGNvbnN0IHsgY2FjaGUsIG5ld0NoYXRSZXF1ZXN0IH0gPSBhd2FpdCBoYW5kbGVDb250ZXh0Q2FjaGUoXG4gICAgYXBpS2V5LFxuICAgIHJlcXVlc3QsXG4gICAgY2hhdFJlcXVlc3QsXG4gICAgbW9kZWxWZXJzaW9uLFxuICAgIGNhY2hlQ29uZmlnRGV0YWlsc1xuICApO1xuICByZXR1cm4geyBjaGF0UmVxdWVzdDogbmV3Q2hhdFJlcXVlc3QsIGNhY2hlIH07XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgaGFuZGxlQ2FjaGVJZk5lZWRlZCxcbiAgaGFuZGxlQ29udGV4dENhY2hlXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/types.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/types.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  cacheConfigDetailsSchema: () => cacheConfigDetailsSchema,\n  cacheConfigSchema: () => cacheConfigSchema\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nconst cacheConfigSchema = import_genkit.z.union([\n  import_genkit.z.boolean(),\n  import_genkit.z.object({ ttlSeconds: import_genkit.z.number().optional() }).passthrough()\n]);\nconst cacheConfigDetailsSchema = import_genkit.z.object({\n  cacheConfig: cacheConfigSchema,\n  endOfCachedContents: import_genkit.z.number()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLG1FQUFRO0FBQ3BDO0FBQ0E7QUFDQSwyQkFBMkIsaURBQWlEO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGFsby1zYW50b3MvLi9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9nb29nbGVhaS9saWIvY29udGV4dC1jYWNoaW5nL3R5cGVzLmpzPzNmN2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHR5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHR5cGVzX2V4cG9ydHMsIHtcbiAgY2FjaGVDb25maWdEZXRhaWxzU2NoZW1hOiAoKSA9PiBjYWNoZUNvbmZpZ0RldGFpbHNTY2hlbWEsXG4gIGNhY2hlQ29uZmlnU2NoZW1hOiAoKSA9PiBjYWNoZUNvbmZpZ1NjaGVtYVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh0eXBlc19leHBvcnRzKTtcbnZhciBpbXBvcnRfZ2Vua2l0ID0gcmVxdWlyZShcImdlbmtpdFwiKTtcbmNvbnN0IGNhY2hlQ29uZmlnU2NoZW1hID0gaW1wb3J0X2dlbmtpdC56LnVuaW9uKFtcbiAgaW1wb3J0X2dlbmtpdC56LmJvb2xlYW4oKSxcbiAgaW1wb3J0X2dlbmtpdC56Lm9iamVjdCh7IHR0bFNlY29uZHM6IGltcG9ydF9nZW5raXQuei5udW1iZXIoKS5vcHRpb25hbCgpIH0pLnBhc3N0aHJvdWdoKClcbl0pO1xuY29uc3QgY2FjaGVDb25maWdEZXRhaWxzU2NoZW1hID0gaW1wb3J0X2dlbmtpdC56Lm9iamVjdCh7XG4gIGNhY2hlQ29uZmlnOiBjYWNoZUNvbmZpZ1NjaGVtYSxcbiAgZW5kT2ZDYWNoZWRDb250ZW50czogaW1wb3J0X2dlbmtpdC56Lm51bWJlcigpXG59KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBjYWNoZUNvbmZpZ0RldGFpbHNTY2hlbWEsXG4gIGNhY2hlQ29uZmlnU2NoZW1hXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  calculateTTL: () => calculateTTL,\n  extractCacheConfig: () => extractCacheConfig,\n  findLastIndex: () => findLastIndex,\n  generateCacheKey: () => generateCacheKey,\n  getContentForCache: () => getContentForCache,\n  lookupContextCache: () => lookupContextCache,\n  validateContextCacheRequest: () => validateContextCacheRequest\n});\nmodule.exports = __toCommonJS(utils_exports);\nvar import_crypto = __toESM(__webpack_require__(/*! crypto */ \"crypto\"));\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_constants = __webpack_require__(/*! ./constants */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js\");\nvar import_types = __webpack_require__(/*! ./types */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/types.js\");\nfunction generateCacheKey(request) {\n  return import_crypto.default.createHash(\"sha256\").update(JSON.stringify(request)).digest(\"hex\");\n}\nfunction getContentForCache(request, chatRequest, modelVersion, cacheConfigDetails) {\n  if (!modelVersion) {\n    throw new Error(\"No model version provided for context caching\");\n  }\n  if (!chatRequest.history?.length) {\n    throw new Error(\"No history provided for context caching\");\n  }\n  validateHistoryLength(request, chatRequest);\n  const { endOfCachedContents, cacheConfig } = cacheConfigDetails;\n  const cachedContent = {\n    model: modelVersion,\n    contents: chatRequest.history.slice(0, endOfCachedContents + 1)\n  };\n  chatRequest.history = chatRequest.history.slice(endOfCachedContents + 1);\n  return { cachedContent, chatRequest, cacheConfig };\n}\nfunction validateHistoryLength(request, chatRequest) {\n  if (chatRequest.history?.length !== request.messages.length - 1) {\n    throw new import_genkit.GenkitError({\n      status: \"INTERNAL\",\n      message: \"Genkit request history and Gemini chat request history length do not match\"\n    });\n  }\n}\nasync function lookupContextCache(cacheManager, cacheKey, maxPages = 100, pageSize = 100) {\n  let currentPage = 0;\n  let pageToken;\n  try {\n    while (currentPage < maxPages) {\n      const { cachedContents, nextPageToken } = await cacheManager.list({\n        pageSize,\n        pageToken\n      });\n      const found = cachedContents?.find(\n        (content) => content.displayName === cacheKey\n      );\n      if (found) return found;\n      if (!nextPageToken) break;\n      pageToken = nextPageToken;\n      currentPage++;\n    }\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"Unknown Network Error\";\n    throw new import_genkit.GenkitError({\n      status: \"INTERNAL\",\n      message: `Error looking up context cache: ${message}`\n    });\n  }\n  return null;\n}\nconst extractCacheConfig = (request) => {\n  const endOfCachedContents = findLastIndex(\n    request.messages,\n    (message) => !!message.metadata?.cache\n  );\n  return endOfCachedContents === -1 ? null : {\n    endOfCachedContents,\n    cacheConfig: import_types.cacheConfigSchema.parse(\n      request.messages[endOfCachedContents].metadata?.cache\n    )\n  };\n};\nfunction validateContextCacheRequest(request, modelVersion) {\n  if (!modelVersion || !import_constants.CONTEXT_CACHE_SUPPORTED_MODELS.includes(modelVersion)) {\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: import_constants.INVALID_ARGUMENT_MESSAGES.modelVersion\n    });\n  }\n  if (request.tools?.length)\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: import_constants.INVALID_ARGUMENT_MESSAGES.tools\n    });\n  if (request.config?.codeExecution)\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: import_constants.INVALID_ARGUMENT_MESSAGES.codeExecution\n    });\n  return true;\n}\nfunction findLastIndex(array, callback) {\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (callback(array[i], i, array)) return i;\n  }\n  return -1;\n}\nfunction calculateTTL(cacheConfig) {\n  if (cacheConfig.cacheConfig === true) {\n    return import_constants.DEFAULT_TTL;\n  }\n  if (cacheConfig.cacheConfig === false) {\n    return 0;\n  }\n  return cacheConfig.cacheConfig.ttlSeconds || import_constants.DEFAULT_TTL;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js":
/*!**********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/embedder.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar embedder_exports = {};\n__export(embedder_exports, {\n  GeminiEmbeddingConfigSchema: () => GeminiEmbeddingConfigSchema,\n  SUPPORTED_MODELS: () => SUPPORTED_MODELS,\n  TaskTypeSchema: () => TaskTypeSchema,\n  defineGoogleAIEmbedder: () => defineGoogleAIEmbedder,\n  geminiEmbedding001: () => geminiEmbedding001,\n  textEmbedding004: () => textEmbedding004,\n  textEmbeddingGecko001: () => textEmbeddingGecko001\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_generative_ai = __webpack_require__(/*! @google/generative-ai */ \"(action-browser)/./node_modules/@google/generative-ai/dist/index.js\");\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_embedder = __webpack_require__(/*! genkit/embedder */ \"(action-browser)/./node_modules/genkit/lib/embedder.js\");\nvar import_common = __webpack_require__(/*! ./common.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nconst TaskTypeSchema = import_genkit.z.enum([\n  \"RETRIEVAL_DOCUMENT\",\n  \"RETRIEVAL_QUERY\",\n  \"SEMANTIC_SIMILARITY\",\n  \"CLASSIFICATION\",\n  \"CLUSTERING\"\n]);\nconst GeminiEmbeddingConfigSchema = import_genkit.z.object({\n  /** Override the API key provided at plugin initialization. */\n  apiKey: import_genkit.z.string().optional(),\n  /**\n   * The `task_type` parameter is defined as the intended downstream application to help the model\n   * produce better quality embeddings.\n   **/\n  taskType: TaskTypeSchema.optional(),\n  title: import_genkit.z.string().optional(),\n  version: import_genkit.z.string().optional(),\n  /**\n   * The `outputDimensionality` parameter allows you to specify the dimensionality of the embedding output.\n   * By default, the model generates embeddings with 768 dimensions. Models such as\n   * `text-embedding-004`, `text-embedding-005`, and `text-multilingual-embedding-002`\n   * allow the output dimensionality to be adjusted between 1 and 768.\n   * By selecting a smaller output dimensionality, users can save memory and storage space, leading to more efficient computations.\n   **/\n  outputDimensionality: import_genkit.z.number().min(1).max(768).optional()\n});\nconst textEmbeddingGecko001 = (0, import_embedder.embedderRef)({\n  name: \"googleai/embedding-001\",\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: \"Google Gen AI - Text Embedding Gecko (Legacy)\",\n    supports: {\n      input: [\"text\"]\n    }\n  }\n});\nconst textEmbedding004 = (0, import_embedder.embedderRef)({\n  name: \"googleai/text-embedding-004\",\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: \"Google Gen AI - Text Embedding 001\",\n    supports: {\n      input: [\"text\"]\n    }\n  }\n});\nconst geminiEmbedding001 = (0, import_embedder.embedderRef)({\n  name: \"googleai/gemini-embedding-001\",\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: \"Google Gen AI - Gemini Embedding 001\",\n    supports: {\n      input: [\"text\"]\n    }\n  }\n});\nconst SUPPORTED_MODELS = {\n  \"embedding-001\": textEmbeddingGecko001,\n  \"text-embedding-004\": textEmbedding004,\n  \"gemini-embedding-001\": geminiEmbedding001\n};\nfunction defineGoogleAIEmbedder(ai, name, pluginOptions) {\n  let apiKey;\n  if (pluginOptions.apiKey !== false) {\n    apiKey = pluginOptions?.apiKey || (0, import_common.getApiKeyFromEnvVar)();\n    if (!apiKey)\n      throw new Error(\n        \"Please pass in the API key or set either GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://genkit.dev/docs/plugins/google-genai\"\n      );\n  }\n  const embedder = SUPPORTED_MODELS[name] ?? (0, import_embedder.embedderRef)({\n    name,\n    configSchema: GeminiEmbeddingConfigSchema,\n    info: {\n      dimensions: 768,\n      label: `Google AI - ${name}`,\n      supports: {\n        input: [\"text\", \"image\", \"video\"]\n      }\n    }\n  });\n  const apiModelName = embedder.name.startsWith(\"googleai/\") ? embedder.name.substring(\"googleai/\".length) : embedder.name;\n  return ai.defineEmbedder(\n    {\n      name: embedder.name,\n      configSchema: GeminiEmbeddingConfigSchema,\n      info: embedder.info\n    },\n    async (input, options) => {\n      if (pluginOptions.apiKey === false && !options?.apiKey) {\n        throw new import_genkit.GenkitError({\n          status: \"INVALID_ARGUMENT\",\n          message: \"GoogleAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.\"\n        });\n      }\n      const client = new import_generative_ai.GoogleGenerativeAI(\n        options?.apiKey || apiKey\n      ).getGenerativeModel({\n        model: options?.version || embedder.config?.version || embedder.version || apiModelName\n      });\n      const embeddings = await Promise.all(\n        input.map(async (doc) => {\n          const response = await client.embedContent({\n            taskType: options?.taskType,\n            title: options?.title,\n            content: {\n              role: \"\",\n              parts: [{ text: doc.text }]\n            },\n            outputDimensionality: options?.outputDimensionality\n          });\n          const values = response.embedding.values;\n          return { embedding: values };\n        })\n      );\n      return { embeddings };\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/gemini.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar gemini_exports = {};\n__export(gemini_exports, {\n  GENERIC_GEMINI_MODEL: () => GENERIC_GEMINI_MODEL,\n  GeminiConfigSchema: () => GeminiConfigSchema,\n  GeminiGemmaConfigSchema: () => GeminiGemmaConfigSchema,\n  GeminiTtsConfigSchema: () => GeminiTtsConfigSchema,\n  SUPPORTED_GEMINI_MODELS: () => SUPPORTED_GEMINI_MODELS,\n  aggregateResponses: () => aggregateResponses,\n  cleanSchema: () => cleanSchema,\n  defineGoogleAIModel: () => defineGoogleAIModel,\n  fromGeminiCandidate: () => fromGeminiCandidate,\n  gemini: () => gemini,\n  gemini10Pro: () => gemini10Pro,\n  gemini15Flash: () => gemini15Flash,\n  gemini15Flash8b: () => gemini15Flash8b,\n  gemini15Pro: () => gemini15Pro,\n  gemini20Flash: () => gemini20Flash,\n  gemini20FlashExp: () => gemini20FlashExp,\n  gemini20FlashLite: () => gemini20FlashLite,\n  gemini20ProExp0205: () => gemini20ProExp0205,\n  gemini25Flash: () => gemini25Flash,\n  gemini25FlashLite: () => gemini25FlashLite,\n  gemini25FlashPreview0417: () => gemini25FlashPreview0417,\n  gemini25FlashPreviewTts: () => gemini25FlashPreviewTts,\n  gemini25Pro: () => gemini25Pro,\n  gemini25ProExp0325: () => gemini25ProExp0325,\n  gemini25ProPreview0325: () => gemini25ProPreview0325,\n  gemini25ProPreviewTts: () => gemini25ProPreviewTts,\n  gemma312bit: () => gemma312bit,\n  gemma31bit: () => gemma31bit,\n  gemma327bit: () => gemma327bit,\n  gemma34bit: () => gemma34bit,\n  gemma3ne4bit: () => gemma3ne4bit,\n  toGeminiMessage: () => toGeminiMessage,\n  toGeminiSystemInstruction: () => toGeminiSystemInstruction,\n  toGeminiTool: () => toGeminiTool\n});\nmodule.exports = __toCommonJS(gemini_exports);\nvar import_generative_ai = __webpack_require__(/*! @google/generative-ai */ \"(action-browser)/./node_modules/@google/generative-ai/dist/index.js\");\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_middleware = __webpack_require__(/*! genkit/model/middleware */ \"(action-browser)/./node_modules/genkit/lib/middleware.js\");\nvar import_tracing = __webpack_require__(/*! genkit/tracing */ \"(action-browser)/./node_modules/genkit/lib/tracing.js\");\nvar import_common = __webpack_require__(/*! ./common */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nvar import_context_caching = __webpack_require__(/*! ./context-caching */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/index.js\");\nvar import_utils = __webpack_require__(/*! ./context-caching/utils */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js\");\nconst SafetySettingsSchema = import_genkit.z.object({\n  category: import_genkit.z.enum([\n    \"HARM_CATEGORY_UNSPECIFIED\",\n    \"HARM_CATEGORY_HATE_SPEECH\",\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    \"HARM_CATEGORY_HARASSMENT\",\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n    \"HARM_CATEGORY_CIVIC_INTEGRITY\"\n  ]),\n  threshold: import_genkit.z.enum([\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\"\n  ])\n});\nconst VoiceConfigSchema = import_genkit.z.object({\n  prebuiltVoiceConfig: import_genkit.z.object({\n    // TODO: Make this an array of objects so we can also specify the description\n    // for each voiceName.\n    voiceName: import_genkit.z.union([\n      import_genkit.z.enum([\n        \"Zephyr\",\n        \"Puck\",\n        \"Charon\",\n        \"Kore\",\n        \"Fenrir\",\n        \"Leda\",\n        \"Orus\",\n        \"Aoede\",\n        \"Callirrhoe\",\n        \"Autonoe\",\n        \"Enceladus\",\n        \"Iapetus\",\n        \"Umbriel\",\n        \"Algieba\",\n        \"Despina\",\n        \"Erinome\",\n        \"Algenib\",\n        \"Rasalgethi\",\n        \"Laomedeia\",\n        \"Achernar\",\n        \"Alnilam\",\n        \"Schedar\",\n        \"Gacrux\",\n        \"Pulcherrima\",\n        \"Achird\",\n        \"Zubenelgenubi\",\n        \"Vindemiatrix\",\n        \"Sadachbia\",\n        \"Sadaltager\",\n        \"Sulafat\"\n      ]),\n      // To allow any new string values\n      import_genkit.z.string()\n    ]).describe(\"Name of the preset voice to use\").optional()\n  }).describe(\"Configuration for the prebuilt speaker to use\").passthrough().optional()\n}).describe(\"Configuration for the voice to use\").passthrough();\nconst GeminiConfigSchema = import_model.GenerationCommonConfigSchema.extend({\n  temperature: import_genkit.z.number().min(0).max(2).describe(\n    import_model.GenerationCommonConfigDescriptions.temperature + \" The default value is 1.0.\"\n  ).optional(),\n  topP: import_genkit.z.number().min(0).max(1).describe(\n    import_model.GenerationCommonConfigDescriptions.topP + \" The default value is 0.95.\"\n  ).optional(),\n  apiKey: import_genkit.z.string().describe(\"Overrides the plugin-configured API key, if specified.\").optional(),\n  safetySettings: import_genkit.z.array(SafetySettingsSchema).describe(\n    \"Adjust how likely you are to see responses that could be harmful. Content is blocked based on the probability that it is harmful.\"\n  ).optional(),\n  codeExecution: import_genkit.z.union([import_genkit.z.boolean(), import_genkit.z.object({}).strict()]).describe(\"Enables the model to generate and run code.\").optional(),\n  contextCache: import_genkit.z.boolean().describe(\n    \"Context caching allows you to save and reuse precomputed input tokens that you wish to use repeatedly.\"\n  ).optional(),\n  functionCallingConfig: import_genkit.z.object({\n    mode: import_genkit.z.enum([\"MODE_UNSPECIFIED\", \"AUTO\", \"ANY\", \"NONE\"]).optional(),\n    allowedFunctionNames: import_genkit.z.array(import_genkit.z.string()).optional()\n  }).describe(\n    \"Controls how the model uses the provided tools (function declarations). With AUTO (Default) mode, the model decides whether to generate a natural language response or suggest a function call based on the prompt and context. With ANY, the model is constrained to always predict a function call and guarantee function schema adherence. With NONE, the model is prohibited from making function calls.\"\n  ).optional(),\n  responseModalities: import_genkit.z.array(import_genkit.z.enum([\"TEXT\", \"IMAGE\", \"AUDIO\"])).describe(\n    \"The modalities to be used in response. Only supported for 'gemini-2.0-flash-exp' model at present.\"\n  ).optional(),\n  googleSearchRetrieval: import_genkit.z.union([import_genkit.z.boolean(), import_genkit.z.object({}).passthrough()]).describe(\n    \"Retrieve public web data for grounding, powered by Google Search.\"\n  ).optional(),\n  thinkingConfig: import_genkit.z.object({\n    includeThoughts: import_genkit.z.boolean().describe(\n      \"Indicates whether to include thoughts in the response.If true, thoughts are returned only when available.\"\n    ).optional(),\n    thinkingBudget: import_genkit.z.number().min(0).max(24576).describe(\n      \"The thinking budget parameter gives the model guidance on the number of thinking tokens it can use when generating a response. A greater number of tokens is typically associated with more detailed thinking, which is needed for solving more complex tasks. Setting the thinking budget to 0 disables thinking.\"\n    ).optional()\n  }).optional()\n}).passthrough();\nconst GeminiGemmaConfigSchema = GeminiConfigSchema.extend({\n  temperature: import_genkit.z.number().min(0).max(1).describe(\n    import_model.GenerationCommonConfigDescriptions.temperature + \" The default value is 1.0.\"\n  ).optional()\n}).passthrough();\nconst GeminiTtsConfigSchema = GeminiConfigSchema.extend({\n  speechConfig: import_genkit.z.object({\n    voiceConfig: VoiceConfigSchema.optional(),\n    multiSpeakerVoiceConfig: import_genkit.z.object({\n      speakerVoiceConfigs: import_genkit.z.array(\n        import_genkit.z.object({\n          speaker: import_genkit.z.string().describe(\"Name of the speaker to use\"),\n          voiceConfig: VoiceConfigSchema\n        }).describe(\n          \"Configuration for a single speaker in a multi speaker setup\"\n        ).passthrough()\n      ).describe(\"Configuration for all the enabled speaker voices\")\n    }).describe(\"Configuration for multi-speaker setup\").passthrough().optional()\n  }).describe(\"Speech generation config\").passthrough().optional()\n}).passthrough();\nconst gemini10Pro = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.0-pro\",\n  info: {\n    label: \"Google AI - Gemini Pro\",\n    versions: [\"gemini-pro\", \"gemini-1.0-pro-latest\", \"gemini-1.0-pro-001\"],\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Pro = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-pro\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Pro\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    },\n    versions: [\n      \"gemini-1.5-pro-latest\",\n      \"gemini-1.5-pro-001\",\n      \"gemini-1.5-pro-002\"\n    ]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Flash = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-flash\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Flash\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\",\n      // @ts-ignore\n      contextCache: true\n    },\n    versions: [\n      \"gemini-1.5-flash-latest\",\n      \"gemini-1.5-flash-001\",\n      \"gemini-1.5-flash-002\"\n    ]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Flash8b = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-flash-8b\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Flash\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    },\n    versions: [\"gemini-1.5-flash-8b-latest\", \"gemini-1.5-flash-8b-001\"]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20Flash = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-flash\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Flash\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20FlashExp = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-flash-exp\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Flash (Experimental)\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20FlashLite = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-flash-lite\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Flash Lite\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20ProExp0205 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-pro-exp-02-05\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Pro Exp 02-05\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25FlashPreview0417 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-flash-preview-04-17\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Flash Preview 04-17\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25FlashPreviewTts = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-flash-preview-tts\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Flash Preview TTS\",\n    versions: [],\n    supports: {\n      multiturn: false,\n      media: false,\n      tools: false,\n      toolChoice: false,\n      systemRole: false,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiTtsConfigSchema\n});\nconst gemini25ProExp0325 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-pro-exp-03-25\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Pro Exp 03-25\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25ProPreview0325 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-pro-preview-03-25\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Pro Preview 03-25\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25ProPreviewTts = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-pro-preview-tts\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Pro Preview TTS\",\n    versions: [],\n    supports: {\n      multiturn: false,\n      media: false,\n      tools: false,\n      toolChoice: false,\n      systemRole: false,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiTtsConfigSchema\n});\nconst gemini25Pro = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-pro\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Pro\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25Flash = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-flash\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Flash\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25FlashLite = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-flash-lite\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Flash Lite\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemma312bit = (0, import_model.modelRef)({\n  name: \"googleai/gemma-3-12b-it\",\n  info: {\n    label: \"Google AI - Gemma 3 12B\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiGemmaConfigSchema\n});\nconst gemma31bit = (0, import_model.modelRef)({\n  name: \"googleai/gemma-3-1b-it\",\n  info: {\n    label: \"Google AI - Gemma 3 1B\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiGemmaConfigSchema\n});\nconst gemma327bit = (0, import_model.modelRef)({\n  name: \"googleai/gemma-3-27b-it\",\n  info: {\n    label: \"Google AI - Gemma 3 27B\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiGemmaConfigSchema\n});\nconst gemma34bit = (0, import_model.modelRef)({\n  name: \"googleai/gemma-3-4b-it\",\n  info: {\n    label: \"Google AI - Gemma 3 4B\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiGemmaConfigSchema\n});\nconst gemma3ne4bit = (0, import_model.modelRef)({\n  name: \"googleai/gemma-3n-e4b-it\",\n  info: {\n    label: \"Google AI - Gemma 3n E4B\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiGemmaConfigSchema\n});\nconst SUPPORTED_GEMINI_MODELS = {\n  \"gemini-1.5-pro\": gemini15Pro,\n  \"gemini-1.5-flash\": gemini15Flash,\n  \"gemini-1.5-flash-8b\": gemini15Flash8b,\n  \"gemini-2.0-pro-exp-02-05\": gemini20ProExp0205,\n  \"gemini-2.0-flash\": gemini20Flash,\n  \"gemini-2.0-flash-lite\": gemini20FlashLite,\n  \"gemini-2.0-flash-exp\": gemini20FlashExp,\n  \"gemini-2.5-pro-exp-03-25\": gemini25ProExp0325,\n  \"gemini-2.5-pro-preview-03-25\": gemini25ProPreview0325,\n  \"gemini-2.5-pro-preview-tts\": gemini25ProPreviewTts,\n  \"gemini-2.5-flash-preview-04-17\": gemini25FlashPreview0417,\n  \"gemini-2.5-flash-preview-tts\": gemini25FlashPreviewTts,\n  \"gemini-2.5-flash\": gemini25Flash,\n  \"gemini-2.5-flash-lite\": gemini25FlashLite,\n  \"gemini-2.5-pro\": gemini25Pro,\n  \"gemma-3-12b-it\": gemma312bit,\n  \"gemma-3-1b-it\": gemma31bit,\n  \"gemma-3-27b-it\": gemma327bit,\n  \"gemma-3-4b-it\": gemma34bit,\n  \"gemma-3n-e4b-it\": gemma3ne4bit\n};\nconst GENERIC_GEMINI_MODEL = (0, import_model.modelRef)({\n  name: \"googleai/gemini\",\n  configSchema: GeminiConfigSchema,\n  info: {\n    label: \"Google Gemini\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  }\n});\nfunction longestMatchingPrefix(version, potentialMatches) {\n  return potentialMatches.filter((p) => version.startsWith(p)).reduce(\n    (longest, current) => current.length > longest.length ? current : longest,\n    \"\"\n  );\n}\nfunction gemini(version, options = {}) {\n  const nearestModel = nearestGeminiModelRef(version);\n  return (0, import_model.modelRef)({\n    name: `googleai/${version}`,\n    config: options,\n    configSchema: GeminiConfigSchema,\n    info: {\n      ...nearestModel.info,\n      // If exact suffix match for a known model, use its label, otherwise create a new label\n      label: nearestModel.name.endsWith(version) ? nearestModel.info?.label : `Google AI - ${version}`\n    }\n  });\n}\nfunction nearestGeminiModelRef(version, options = {}) {\n  const matchingKey = longestMatchingPrefix(\n    version,\n    Object.keys(SUPPORTED_GEMINI_MODELS)\n  );\n  if (matchingKey) {\n    return SUPPORTED_GEMINI_MODELS[matchingKey].withConfig({\n      ...options,\n      version\n    });\n  }\n  return GENERIC_GEMINI_MODEL.withConfig({ ...options, version });\n}\nfunction toGeminiRole(role, model) {\n  switch (role) {\n    case \"user\":\n      return \"user\";\n    case \"model\":\n      return \"model\";\n    case \"system\":\n      if (model?.info?.supports?.systemRole) {\n        throw new Error(\n          \"system role is only supported for a single message in the first position\"\n        );\n      } else {\n        throw new Error(\"system role is not supported\");\n      }\n    case \"tool\":\n      return \"function\";\n    default:\n      return \"user\";\n  }\n}\nfunction convertSchemaProperty(property) {\n  if (!property || !property.type) {\n    return void 0;\n  }\n  const baseSchema = {};\n  if (property.description) {\n    baseSchema.description = property.description;\n  }\n  if (property.enum) {\n    baseSchema.type = import_generative_ai.SchemaType.STRING;\n    baseSchema.enum = property.enum;\n  }\n  if (property.nullable) {\n    baseSchema.nullable = property.nullable;\n  }\n  let propertyType;\n  if (Array.isArray(property.type)) {\n    const types = property.type;\n    if (types.includes(\"null\")) {\n      baseSchema.nullable = true;\n    }\n    propertyType = types.find((t) => t !== \"null\");\n  } else {\n    propertyType = property.type;\n  }\n  if (propertyType === \"object\") {\n    const nestedProperties = {};\n    Object.keys(property.properties ?? {}).forEach((key) => {\n      nestedProperties[key] = convertSchemaProperty(property.properties[key]);\n    });\n    return {\n      ...baseSchema,\n      type: import_generative_ai.SchemaType.OBJECT,\n      properties: nestedProperties,\n      required: property.required\n    };\n  } else if (propertyType === \"array\") {\n    return {\n      ...baseSchema,\n      type: import_generative_ai.SchemaType.ARRAY,\n      items: convertSchemaProperty(property.items)\n    };\n  } else {\n    const schemaType = import_generative_ai.SchemaType[propertyType.toUpperCase()];\n    if (!schemaType) {\n      throw new import_genkit.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Unsupported property type ${propertyType.toUpperCase()}`\n      });\n    }\n    return {\n      ...baseSchema,\n      type: schemaType\n    };\n  }\n}\nfunction toGeminiTool(tool) {\n  const declaration = {\n    name: tool.name.replace(/\\//g, \"__\"),\n    // Gemini throws on '/' in tool name\n    description: tool.description,\n    parameters: convertSchemaProperty(tool.inputSchema)\n  };\n  return declaration;\n}\nfunction toInlineData(part) {\n  const dataUrl = part.media.url;\n  const b64Data = dataUrl.substring(dataUrl.indexOf(\",\") + 1);\n  const contentType = part.media.contentType || dataUrl.substring(dataUrl.indexOf(\":\") + 1, dataUrl.indexOf(\";\"));\n  return { inlineData: { mimeType: contentType, data: b64Data } };\n}\nfunction toFileData(part) {\n  if (!part.media.contentType)\n    throw new Error(\n      \"Must supply a `contentType` when sending File URIs to Gemini.\"\n    );\n  return {\n    fileData: { mimeType: part.media.contentType, fileUri: part.media.url }\n  };\n}\nfunction fromInlineData(inlinePart) {\n  if (!inlinePart.inlineData || !inlinePart.inlineData.hasOwnProperty(\"mimeType\") || !inlinePart.inlineData.hasOwnProperty(\"data\")) {\n    throw new Error(\"Invalid InlineDataPart: missing required properties\");\n  }\n  const { mimeType, data } = inlinePart.inlineData;\n  const dataUrl = `data:${mimeType};base64,${data}`;\n  return {\n    media: {\n      url: dataUrl,\n      contentType: mimeType\n    }\n  };\n}\nfunction toFunctionCall(part) {\n  if (!part?.toolRequest?.input) {\n    throw Error(\"Invalid ToolRequestPart: input was missing.\");\n  }\n  return {\n    functionCall: {\n      name: part.toolRequest.name,\n      args: part.toolRequest.input\n    }\n  };\n}\nfunction fromFunctionCall(part, ref) {\n  if (!part.functionCall) {\n    throw Error(\"Invalid FunctionCallPart\");\n  }\n  return {\n    toolRequest: {\n      name: part.functionCall.name,\n      input: part.functionCall.args,\n      ref\n    }\n  };\n}\nfunction toFunctionResponse(part) {\n  if (!part?.toolResponse?.output) {\n    throw Error(\"Invalid ToolResponsePart: output was missing.\");\n  }\n  return {\n    functionResponse: {\n      name: part.toolResponse.name,\n      response: {\n        name: part.toolResponse.name,\n        content: part.toolResponse.output\n      }\n    }\n  };\n}\nfunction fromFunctionResponse(part) {\n  if (!part.functionResponse) {\n    throw new Error(\"Invalid FunctionResponsePart.\");\n  }\n  return {\n    toolResponse: {\n      name: part.functionResponse.name.replace(/__/g, \"/\"),\n      // restore slashes\n      output: part.functionResponse.response\n    }\n  };\n}\nfunction fromExecutableCode(part) {\n  if (!part.executableCode) {\n    throw new Error(\"Invalid GeminiPart: missing executableCode\");\n  }\n  return {\n    custom: {\n      executableCode: {\n        language: part.executableCode.language,\n        code: part.executableCode.code\n      }\n    }\n  };\n}\nfunction fromCodeExecutionResult(part) {\n  if (!part.codeExecutionResult) {\n    throw new Error(\"Invalid GeminiPart: missing codeExecutionResult\");\n  }\n  return {\n    custom: {\n      codeExecutionResult: {\n        outcome: part.codeExecutionResult.outcome,\n        output: part.codeExecutionResult.output\n      }\n    }\n  };\n}\nfunction fromThought(part) {\n  return {\n    reasoning: part.text || \"\",\n    metadata: { thoughtSignature: part.thoughtSignature }\n  };\n}\nfunction toCustomPart(part) {\n  if (!part.custom) {\n    throw new Error(\"Invalid GeminiPart: missing custom\");\n  }\n  if (part.custom.codeExecutionResult) {\n    return { codeExecutionResult: part.custom.codeExecutionResult };\n  }\n  if (part.custom.executableCode) {\n    return { executableCode: part.custom.executableCode };\n  }\n  throw new Error(\"Unsupported Custom Part type\");\n}\nfunction toThought(part) {\n  const outPart = { thought: true };\n  if (part.metadata?.thoughtSignature)\n    outPart.thoughtSignature = part.metadata.thoughtSignature;\n  if (part.reasoning?.length) outPart.text = part.reasoning;\n  return outPart;\n}\nfunction toGeminiPart(part) {\n  if (part.text !== void 0) return { text: part.text || \" \" };\n  if (part.media) {\n    if (part.media.url.startsWith(\"data:\")) return toInlineData(part);\n    return toFileData(part);\n  }\n  if (part.toolRequest) return toFunctionCall(part);\n  if (part.toolResponse) return toFunctionResponse(part);\n  if (part.custom) return toCustomPart(part);\n  if (typeof part.reasoning === \"string\") return toThought(part);\n  throw new Error(\"Unsupported Part type\" + JSON.stringify(part));\n}\nfunction fromGeminiPart(part, jsonMode, ref) {\n  if (\"thought\" in part) return fromThought(part);\n  if (typeof part.text === \"string\") return { text: part.text };\n  if (part.inlineData) return fromInlineData(part);\n  if (part.functionCall) return fromFunctionCall(part, ref);\n  if (part.functionResponse) return fromFunctionResponse(part);\n  if (part.executableCode) return fromExecutableCode(part);\n  if (part.codeExecutionResult) return fromCodeExecutionResult(part);\n  throw new Error(\"Unsupported GeminiPart type: \" + JSON.stringify(part));\n}\nfunction toGeminiMessage(message, model) {\n  let sortedParts = message.content;\n  if (message.role === \"tool\") {\n    sortedParts = [...message.content].sort((a, b) => {\n      const aRef = a.toolResponse?.ref;\n      const bRef = b.toolResponse?.ref;\n      if (!aRef && !bRef) return 0;\n      if (!aRef) return 1;\n      if (!bRef) return -1;\n      return Number.parseInt(aRef, 10) - Number.parseInt(bRef, 10);\n    });\n  }\n  return {\n    role: toGeminiRole(message.role, model),\n    parts: sortedParts.map(toGeminiPart)\n  };\n}\nfunction toGeminiSystemInstruction(message) {\n  return {\n    role: \"user\",\n    parts: message.content.map(toGeminiPart)\n  };\n}\nfunction fromGeminiFinishReason(reason) {\n  if (!reason) return \"unknown\";\n  switch (reason) {\n    case \"STOP\":\n      return \"stop\";\n    case \"MAX_TOKENS\":\n      return \"length\";\n    case \"SAFETY\":\n    // blocked for safety\n    case \"RECITATION\":\n      return \"blocked\";\n    default:\n      return \"unknown\";\n  }\n}\nfunction fromGeminiCandidate(candidate, jsonMode = false) {\n  const parts = candidate.content?.parts || [];\n  const genkitCandidate = {\n    index: candidate.index || 0,\n    message: {\n      role: \"model\",\n      content: parts.map(\n        (part, index) => fromGeminiPart(part, jsonMode, index.toString())\n      )\n    },\n    finishReason: fromGeminiFinishReason(candidate.finishReason),\n    finishMessage: candidate.finishMessage,\n    custom: {\n      safetyRatings: candidate.safetyRatings,\n      citationMetadata: candidate.citationMetadata\n    }\n  };\n  return genkitCandidate;\n}\nfunction cleanSchema(schema) {\n  const out = structuredClone(schema);\n  for (const key in out) {\n    if (key === \"$schema\" || key === \"additionalProperties\") {\n      delete out[key];\n      continue;\n    }\n    if (typeof out[key] === \"object\") {\n      out[key] = cleanSchema(out[key]);\n    }\n    if (key === \"type\" && Array.isArray(out[key])) {\n      out[key] = out[key].find((t) => t !== \"null\");\n    }\n  }\n  return out;\n}\nfunction defineGoogleAIModel({\n  ai,\n  name,\n  apiKey: apiKeyOption,\n  apiVersion,\n  baseUrl,\n  info,\n  defaultConfig,\n  debugTraces\n}) {\n  let apiKey;\n  if (apiKeyOption !== false) {\n    apiKey = apiKeyOption || (0, import_common.getApiKeyFromEnvVar)();\n    if (!apiKey) {\n      throw new import_genkit.GenkitError({\n        status: \"FAILED_PRECONDITION\",\n        message: \"Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://genkit.dev/docs/plugins/google-genai\"\n      });\n    }\n  }\n  const apiModelName = name.startsWith(\"googleai/\") ? name.substring(\"googleai/\".length) : name;\n  const model = SUPPORTED_GEMINI_MODELS[apiModelName] ?? (0, import_model.modelRef)({\n    name: `googleai/${apiModelName}`,\n    info: {\n      label: `Google AI - ${apiModelName}`,\n      supports: {\n        multiturn: true,\n        media: true,\n        tools: true,\n        systemRole: true,\n        output: [\"text\", \"json\"]\n      },\n      ...info\n    },\n    configSchema: GeminiConfigSchema\n  });\n  const middleware = [];\n  if (model.info?.supports?.media) {\n    middleware.push(\n      (0, import_middleware.downloadRequestMedia)({\n        maxBytes: 1024 * 1024 * 10,\n        // don't downlaod files that have been uploaded using the Files API\n        filter: (part) => {\n          try {\n            const url = new URL(part.media.url);\n            if (\n              // Gemini can handle these URLs\n              [\n                \"generativelanguage.googleapis.com\",\n                \"www.youtube.com\",\n                \"youtube.com\",\n                \"youtu.be\"\n              ].includes(url.hostname)\n            )\n              return false;\n          } catch {\n          }\n          return true;\n        }\n      })\n    );\n  }\n  return ai.defineModel(\n    {\n      apiVersion: \"v2\",\n      name: model.name,\n      ...model.info,\n      configSchema: model.configSchema,\n      use: middleware\n    },\n    async (request, { streamingRequested, sendChunk, abortSignal }) => {\n      const options = { apiClient: (0, import_common.getGenkitClientHeader)() };\n      if (apiVersion) {\n        options.apiVersion = apiVersion;\n      }\n      if (apiVersion) {\n        options.baseUrl = baseUrl;\n      }\n      const requestConfig = {\n        ...defaultConfig,\n        ...request.config\n      };\n      const messages = [...request.messages];\n      if (messages.length === 0) throw new Error(\"No messages provided.\");\n      let systemInstruction = void 0;\n      if (model.info?.supports?.systemRole) {\n        const systemMessage = messages.find((m) => m.role === \"system\");\n        if (systemMessage) {\n          messages.splice(messages.indexOf(systemMessage), 1);\n          systemInstruction = toGeminiSystemInstruction(systemMessage);\n        }\n      }\n      const tools = [];\n      if (request.tools?.length) {\n        tools.push({\n          functionDeclarations: request.tools.map(toGeminiTool)\n        });\n      }\n      const {\n        apiKey: apiKeyFromConfig,\n        safetySettings: safetySettingsFromConfig,\n        codeExecution: codeExecutionFromConfig,\n        version: versionFromConfig,\n        functionCallingConfig,\n        googleSearchRetrieval,\n        tools: toolsFromConfig,\n        ...restOfConfigOptions\n      } = requestConfig;\n      if (codeExecutionFromConfig) {\n        tools.push({\n          codeExecution: request.config.codeExecution === true ? {} : request.config.codeExecution\n        });\n      }\n      if (toolsFromConfig) {\n        tools.push(...toolsFromConfig);\n      }\n      if (googleSearchRetrieval) {\n        tools.push({\n          googleSearch: googleSearchRetrieval === true ? {} : googleSearchRetrieval\n        });\n      }\n      let toolConfig;\n      if (functionCallingConfig) {\n        toolConfig = {\n          functionCallingConfig: {\n            allowedFunctionNames: functionCallingConfig.allowedFunctionNames,\n            mode: toFunctionModeEnum(functionCallingConfig.mode)\n          }\n        };\n      } else if (request.toolChoice) {\n        toolConfig = {\n          functionCallingConfig: {\n            mode: toGeminiFunctionModeEnum(request.toolChoice)\n          }\n        };\n      }\n      const jsonMode = request.output?.format === \"json\" || request.output?.contentType === \"application/json\" && tools.length === 0;\n      const generationConfig = {\n        ...restOfConfigOptions,\n        candidateCount: request.candidates || void 0,\n        responseMimeType: jsonMode ? \"application/json\" : void 0\n      };\n      if (request.output?.constrained && jsonMode) {\n        generationConfig.responseSchema = cleanSchema(request.output.schema);\n      }\n      const msg = toGeminiMessage(messages[messages.length - 1], model);\n      const fromJSONModeScopedGeminiCandidate = (candidate) => {\n        return fromGeminiCandidate(candidate, jsonMode);\n      };\n      const chatRequest = {\n        systemInstruction,\n        generationConfig,\n        tools: tools.length ? tools : void 0,\n        toolConfig,\n        history: messages.slice(0, -1).map((message) => toGeminiMessage(message, model)),\n        safetySettings: safetySettingsFromConfig\n      };\n      const modelVersion = versionFromConfig || model.version || apiModelName;\n      const cacheConfigDetails = (0, import_utils.extractCacheConfig)(request);\n      const { chatRequest: updatedChatRequest, cache } = await (0, import_context_caching.handleCacheIfNeeded)(\n        apiKey,\n        request,\n        chatRequest,\n        modelVersion,\n        cacheConfigDetails\n      );\n      if (!apiKeyFromConfig && !apiKey) {\n        throw new import_genkit.GenkitError({\n          status: \"INVALID_ARGUMENT\",\n          message: \"GoogleAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.\"\n        });\n      }\n      const client = new import_generative_ai.GoogleGenerativeAI(apiKeyFromConfig || apiKey);\n      let genModel;\n      if (cache) {\n        genModel = client.getGenerativeModelFromCachedContent(\n          cache,\n          {\n            model: modelVersion\n          },\n          options\n        );\n      } else {\n        genModel = client.getGenerativeModel(\n          {\n            model: modelVersion\n          },\n          options\n        );\n      }\n      const callGemini = async () => {\n        let response;\n        if (streamingRequested) {\n          const result = await genModel.startChat(updatedChatRequest).sendMessageStream(msg.parts, { ...options, signal: abortSignal });\n          const chunks = [];\n          for await (const item of result.stream) {\n            chunks.push(item);\n            item.candidates?.forEach(\n              (candidate) => {\n                const c = fromJSONModeScopedGeminiCandidate(candidate);\n                sendChunk({\n                  index: c.index,\n                  content: c.message.content\n                });\n              }\n            );\n          }\n          response = aggregateResponses(chunks);\n        } else {\n          const result = await genModel.startChat(updatedChatRequest).sendMessage(msg.parts, { ...options, signal: abortSignal });\n          response = result.response;\n        }\n        const candidates = response.candidates || [];\n        if (response.candidates?.[\"undefined\"]) {\n          candidates.push(response.candidates[\"undefined\"]);\n        }\n        if (!candidates.length) {\n          throw new import_genkit.GenkitError({\n            status: \"FAILED_PRECONDITION\",\n            message: \"No valid candidates returned.\"\n          });\n        }\n        const candidateData = candidates.map(fromJSONModeScopedGeminiCandidate) || [];\n        const usageMetadata = response.usageMetadata;\n        return {\n          candidates: candidateData,\n          custom: response,\n          usage: {\n            ...(0, import_model.getBasicUsageStats)(request.messages, candidateData),\n            inputTokens: usageMetadata?.promptTokenCount,\n            outputTokens: usageMetadata?.candidatesTokenCount,\n            thoughtsTokens: usageMetadata?.thoughtsTokenCount,\n            totalTokens: usageMetadata?.totalTokenCount,\n            cachedContentTokens: usageMetadata?.cachedContentTokenCount\n          }\n        };\n      };\n      return debugTraces ? await (0, import_tracing.runInNewSpan)(\n        ai.registry,\n        {\n          metadata: {\n            name: streamingRequested ? \"sendMessageStream\" : \"sendMessage\"\n          }\n        },\n        async (metadata) => {\n          metadata.input = {\n            sdk: \"@google/generative-ai\",\n            cache,\n            model: genModel.model,\n            chatOptions: updatedChatRequest,\n            parts: msg.parts,\n            options\n          };\n          const response = await callGemini();\n          metadata.output = response.custom;\n          return response;\n        }\n      ) : await callGemini();\n    }\n  );\n}\nfunction toFunctionModeEnum(configEnum) {\n  if (configEnum === void 0) {\n    return void 0;\n  }\n  switch (configEnum) {\n    case \"MODE_UNSPECIFIED\": {\n      return import_generative_ai.FunctionCallingMode.MODE_UNSPECIFIED;\n    }\n    case \"ANY\": {\n      return import_generative_ai.FunctionCallingMode.ANY;\n    }\n    case \"AUTO\": {\n      return import_generative_ai.FunctionCallingMode.AUTO;\n    }\n    case \"NONE\": {\n      return import_generative_ai.FunctionCallingMode.NONE;\n    }\n    default:\n      throw new Error(`unsupported function calling mode: ${configEnum}`);\n  }\n}\nfunction toGeminiFunctionModeEnum(genkitMode) {\n  if (genkitMode === void 0) {\n    return void 0;\n  }\n  switch (genkitMode) {\n    case \"required\": {\n      return import_generative_ai.FunctionCallingMode.ANY;\n    }\n    case \"auto\": {\n      return import_generative_ai.FunctionCallingMode.AUTO;\n    }\n    case \"none\": {\n      return import_generative_ai.FunctionCallingMode.NONE;\n    }\n    default:\n      throw new Error(`unsupported function calling mode: ${genkitMode}`);\n  }\n}\nfunction aggregateResponses(responses) {\n  const lastResponse = responses[responses.length - 1];\n  const aggregatedResponse = {\n    promptFeedback: lastResponse?.promptFeedback\n  };\n  for (const response of responses) {\n    if (response.candidates) {\n      let candidateIndex = 0;\n      for (const candidate of response.candidates) {\n        if (!aggregatedResponse.candidates) {\n          aggregatedResponse.candidates = [];\n        }\n        if (!aggregatedResponse.candidates[candidateIndex]) {\n          aggregatedResponse.candidates[candidateIndex] = {\n            index: candidateIndex\n          };\n        }\n        aggregatedResponse.candidates[candidateIndex].citationMetadata = candidate.citationMetadata;\n        aggregatedResponse.candidates[candidateIndex].groundingMetadata = candidate.groundingMetadata;\n        aggregatedResponse.candidates[candidateIndex].finishReason = candidate.finishReason;\n        aggregatedResponse.candidates[candidateIndex].finishMessage = candidate.finishMessage;\n        aggregatedResponse.candidates[candidateIndex].safetyRatings = candidate.safetyRatings;\n        if (candidate.content && candidate.content.parts) {\n          if (!aggregatedResponse.candidates[candidateIndex].content) {\n            aggregatedResponse.candidates[candidateIndex].content = {\n              role: candidate.content.role || \"user\",\n              parts: []\n            };\n          }\n          for (const part of candidate.content.parts) {\n            const newPart = {};\n            if (part.text) {\n              newPart.text = part.text;\n            }\n            if (part.thought) {\n              newPart.thought = part.thought;\n            }\n            if (part.thoughtSignature) {\n              newPart.thoughtSignature = part.thoughtSignature;\n            }\n            if (part.functionCall) {\n              newPart.functionCall = part.functionCall;\n            }\n            if (part.executableCode) {\n              newPart.executableCode = part.executableCode;\n            }\n            if (part.codeExecutionResult) {\n              newPart.codeExecutionResult = part.codeExecutionResult;\n            }\n            if (Object.keys(newPart).length === 0) {\n              newPart.text = \"\";\n            }\n            aggregatedResponse.candidates[candidateIndex].content.parts.push(\n              newPart\n            );\n          }\n        }\n      }\n      candidateIndex++;\n    }\n    if (response.usageMetadata) {\n      aggregatedResponse.usageMetadata = response.usageMetadata;\n    }\n  }\n  return aggregatedResponse;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=gemini.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/imagen.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/imagen.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar imagen_exports = {};\n__export(imagen_exports, {\n  GENERIC_IMAGEN_INFO: () => GENERIC_IMAGEN_INFO,\n  ImagenConfigSchema: () => ImagenConfigSchema,\n  defineImagenModel: () => defineImagenModel\n});\nmodule.exports = __toCommonJS(imagen_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_common = __webpack_require__(/*! ./common.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nvar import_predict = __webpack_require__(/*! ./predict.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/predict.js\");\nconst ImagenConfigSchema = import_genkit.z.object({\n  numberOfImages: import_genkit.z.number().describe(\n    \"The number of images to generate, from 1 to 4 (inclusive). The default is 1.\"\n  ).optional(),\n  aspectRatio: import_genkit.z.enum([\"1:1\", \"9:16\", \"16:9\", \"3:4\", \"4:3\"]).describe(\"Desired aspect ratio of the output image.\").optional(),\n  personGeneration: import_genkit.z.enum([\"dont_allow\", \"allow_adult\", \"allow_all\"]).describe(\n    \"Control if/how images of people will be generated by the model.\"\n  ).optional()\n}).passthrough();\nfunction toParameters(request) {\n  const out = {\n    sampleCount: request.config?.numberOfImages ?? 1,\n    ...request?.config\n  };\n  for (const k in out) {\n    if (!out[k]) delete out[k];\n  }\n  return out;\n}\nfunction extractText(request) {\n  return request.messages.at(-1).content.map((c) => c.text || \"\").join(\"\");\n}\nfunction extractBaseImage(request) {\n  return request.messages.at(-1)?.content.find((p) => !!p.media)?.media?.url.split(\",\")[1];\n}\nconst GENERIC_IMAGEN_INFO = {\n  label: `Google AI - Generic Imagen`,\n  supports: {\n    media: true,\n    multiturn: false,\n    tools: false,\n    systemRole: false,\n    output: [\"media\"]\n  }\n};\nfunction defineImagenModel(ai, name, apiKey) {\n  if (apiKey !== false) {\n    apiKey = apiKey || (0, import_common.getApiKeyFromEnvVar)();\n    if (!apiKey) {\n      throw new import_genkit.GenkitError({\n        status: \"FAILED_PRECONDITION\",\n        message: \"Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://genkit.dev/docs/plugins/google-genai\"\n      });\n    }\n  }\n  const modelName = `googleai/${name}`;\n  const model = (0, import_model.modelRef)({\n    name: modelName,\n    info: {\n      ...GENERIC_IMAGEN_INFO,\n      label: `Google AI - ${name}`\n    },\n    configSchema: ImagenConfigSchema\n  });\n  return ai.defineModel(\n    {\n      name: modelName,\n      ...model.info,\n      configSchema: ImagenConfigSchema\n    },\n    async (request) => {\n      const instance = {\n        prompt: extractText(request)\n      };\n      const baseImage = extractBaseImage(request);\n      if (baseImage) {\n        instance.image = { bytesBase64Encoded: baseImage };\n      }\n      const predictClient = (0, import_predict.predictModel)(model.version || name, apiKey, \"predict\");\n      const response = await predictClient([instance], toParameters(request));\n      if (!response.predictions || response.predictions.length == 0) {\n        throw new Error(\n          \"Model returned no predictions. Possibly due to content filters.\"\n        );\n      }\n      const message = {\n        role: \"model\",\n        content: []\n      };\n      response.predictions.forEach((p, i) => {\n        const b64data = p.bytesBase64Encoded;\n        const mimeType = p.mimeType;\n        message.content.push({\n          media: {\n            url: `data:${mimeType};base64,${b64data}`,\n            contentType: mimeType\n          }\n        });\n      });\n      return {\n        finishReason: \"stop\",\n        message,\n        usage: (0, import_model.getBasicUsageStats)(request.messages, message),\n        custom: response\n      };\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=imagen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9pbWFnZW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsbUVBQVE7QUFDcEMsbUJBQW1CLG1CQUFPLENBQUMseUVBQWM7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsc0ZBQWE7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsd0ZBQWM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLGdDQUFnQyxLQUFLO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLEtBQUs7QUFDakMsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsVUFBVSxTQUFTLFFBQVE7QUFDcEQ7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2l0YWxvLXNhbnRvcy8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9pbWFnZW4uanM/NmM4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgaW1hZ2VuX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGltYWdlbl9leHBvcnRzLCB7XG4gIEdFTkVSSUNfSU1BR0VOX0lORk86ICgpID0+IEdFTkVSSUNfSU1BR0VOX0lORk8sXG4gIEltYWdlbkNvbmZpZ1NjaGVtYTogKCkgPT4gSW1hZ2VuQ29uZmlnU2NoZW1hLFxuICBkZWZpbmVJbWFnZW5Nb2RlbDogKCkgPT4gZGVmaW5lSW1hZ2VuTW9kZWxcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoaW1hZ2VuX2V4cG9ydHMpO1xudmFyIGltcG9ydF9nZW5raXQgPSByZXF1aXJlKFwiZ2Vua2l0XCIpO1xudmFyIGltcG9ydF9tb2RlbCA9IHJlcXVpcmUoXCJnZW5raXQvbW9kZWxcIik7XG52YXIgaW1wb3J0X2NvbW1vbiA9IHJlcXVpcmUoXCIuL2NvbW1vbi5qc1wiKTtcbnZhciBpbXBvcnRfcHJlZGljdCA9IHJlcXVpcmUoXCIuL3ByZWRpY3QuanNcIik7XG5jb25zdCBJbWFnZW5Db25maWdTY2hlbWEgPSBpbXBvcnRfZ2Vua2l0Lnoub2JqZWN0KHtcbiAgbnVtYmVyT2ZJbWFnZXM6IGltcG9ydF9nZW5raXQuei5udW1iZXIoKS5kZXNjcmliZShcbiAgICBcIlRoZSBudW1iZXIgb2YgaW1hZ2VzIHRvIGdlbmVyYXRlLCBmcm9tIDEgdG8gNCAoaW5jbHVzaXZlKS4gVGhlIGRlZmF1bHQgaXMgMS5cIlxuICApLm9wdGlvbmFsKCksXG4gIGFzcGVjdFJhdGlvOiBpbXBvcnRfZ2Vua2l0LnouZW51bShbXCIxOjFcIiwgXCI5OjE2XCIsIFwiMTY6OVwiLCBcIjM6NFwiLCBcIjQ6M1wiXSkuZGVzY3JpYmUoXCJEZXNpcmVkIGFzcGVjdCByYXRpbyBvZiB0aGUgb3V0cHV0IGltYWdlLlwiKS5vcHRpb25hbCgpLFxuICBwZXJzb25HZW5lcmF0aW9uOiBpbXBvcnRfZ2Vua2l0LnouZW51bShbXCJkb250X2FsbG93XCIsIFwiYWxsb3dfYWR1bHRcIiwgXCJhbGxvd19hbGxcIl0pLmRlc2NyaWJlKFxuICAgIFwiQ29udHJvbCBpZi9ob3cgaW1hZ2VzIG9mIHBlb3BsZSB3aWxsIGJlIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXCJcbiAgKS5vcHRpb25hbCgpXG59KS5wYXNzdGhyb3VnaCgpO1xuZnVuY3Rpb24gdG9QYXJhbWV0ZXJzKHJlcXVlc3QpIHtcbiAgY29uc3Qgb3V0ID0ge1xuICAgIHNhbXBsZUNvdW50OiByZXF1ZXN0LmNvbmZpZz8ubnVtYmVyT2ZJbWFnZXMgPz8gMSxcbiAgICAuLi5yZXF1ZXN0Py5jb25maWdcbiAgfTtcbiAgZm9yIChjb25zdCBrIGluIG91dCkge1xuICAgIGlmICghb3V0W2tdKSBkZWxldGUgb3V0W2tdO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiBleHRyYWN0VGV4dChyZXF1ZXN0KSB7XG4gIHJldHVybiByZXF1ZXN0Lm1lc3NhZ2VzLmF0KC0xKS5jb250ZW50Lm1hcCgoYykgPT4gYy50ZXh0IHx8IFwiXCIpLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiBleHRyYWN0QmFzZUltYWdlKHJlcXVlc3QpIHtcbiAgcmV0dXJuIHJlcXVlc3QubWVzc2FnZXMuYXQoLTEpPy5jb250ZW50LmZpbmQoKHApID0+ICEhcC5tZWRpYSk/Lm1lZGlhPy51cmwuc3BsaXQoXCIsXCIpWzFdO1xufVxuY29uc3QgR0VORVJJQ19JTUFHRU5fSU5GTyA9IHtcbiAgbGFiZWw6IGBHb29nbGUgQUkgLSBHZW5lcmljIEltYWdlbmAsXG4gIHN1cHBvcnRzOiB7XG4gICAgbWVkaWE6IHRydWUsXG4gICAgbXVsdGl0dXJuOiBmYWxzZSxcbiAgICB0b29sczogZmFsc2UsXG4gICAgc3lzdGVtUm9sZTogZmFsc2UsXG4gICAgb3V0cHV0OiBbXCJtZWRpYVwiXVxuICB9XG59O1xuZnVuY3Rpb24gZGVmaW5lSW1hZ2VuTW9kZWwoYWksIG5hbWUsIGFwaUtleSkge1xuICBpZiAoYXBpS2V5ICE9PSBmYWxzZSkge1xuICAgIGFwaUtleSA9IGFwaUtleSB8fCAoMCwgaW1wb3J0X2NvbW1vbi5nZXRBcGlLZXlGcm9tRW52VmFyKSgpO1xuICAgIGlmICghYXBpS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2dlbmtpdC5HZW5raXRFcnJvcih7XG4gICAgICAgIHN0YXR1czogXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gICAgICAgIG1lc3NhZ2U6IFwiUGxlYXNlIHBhc3MgaW4gdGhlIEFQSSBrZXkgb3Igc2V0IHRoZSBHRU1JTklfQVBJX0tFWSBvciBHT09HTEVfQVBJX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cXG5Gb3IgbW9yZSBkZXRhaWxzIHNlZSBodHRwczovL2dlbmtpdC5kZXYvZG9jcy9wbHVnaW5zL2dvb2dsZS1nZW5haVwiXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgY29uc3QgbW9kZWxOYW1lID0gYGdvb2dsZWFpLyR7bmFtZX1gO1xuICBjb25zdCBtb2RlbCA9ICgwLCBpbXBvcnRfbW9kZWwubW9kZWxSZWYpKHtcbiAgICBuYW1lOiBtb2RlbE5hbWUsXG4gICAgaW5mbzoge1xuICAgICAgLi4uR0VORVJJQ19JTUFHRU5fSU5GTyxcbiAgICAgIGxhYmVsOiBgR29vZ2xlIEFJIC0gJHtuYW1lfWBcbiAgICB9LFxuICAgIGNvbmZpZ1NjaGVtYTogSW1hZ2VuQ29uZmlnU2NoZW1hXG4gIH0pO1xuICByZXR1cm4gYWkuZGVmaW5lTW9kZWwoXG4gICAge1xuICAgICAgbmFtZTogbW9kZWxOYW1lLFxuICAgICAgLi4ubW9kZWwuaW5mbyxcbiAgICAgIGNvbmZpZ1NjaGVtYTogSW1hZ2VuQ29uZmlnU2NoZW1hXG4gICAgfSxcbiAgICBhc3luYyAocmVxdWVzdCkgPT4ge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSB7XG4gICAgICAgIHByb21wdDogZXh0cmFjdFRleHQocmVxdWVzdClcbiAgICAgIH07XG4gICAgICBjb25zdCBiYXNlSW1hZ2UgPSBleHRyYWN0QmFzZUltYWdlKHJlcXVlc3QpO1xuICAgICAgaWYgKGJhc2VJbWFnZSkge1xuICAgICAgICBpbnN0YW5jZS5pbWFnZSA9IHsgYnl0ZXNCYXNlNjRFbmNvZGVkOiBiYXNlSW1hZ2UgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByZWRpY3RDbGllbnQgPSAoMCwgaW1wb3J0X3ByZWRpY3QucHJlZGljdE1vZGVsKShtb2RlbC52ZXJzaW9uIHx8IG5hbWUsIGFwaUtleSwgXCJwcmVkaWN0XCIpO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwcmVkaWN0Q2xpZW50KFtpbnN0YW5jZV0sIHRvUGFyYW1ldGVycyhyZXF1ZXN0KSk7XG4gICAgICBpZiAoIXJlc3BvbnNlLnByZWRpY3Rpb25zIHx8IHJlc3BvbnNlLnByZWRpY3Rpb25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIk1vZGVsIHJldHVybmVkIG5vIHByZWRpY3Rpb25zLiBQb3NzaWJseSBkdWUgdG8gY29udGVudCBmaWx0ZXJzLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICByb2xlOiBcIm1vZGVsXCIsXG4gICAgICAgIGNvbnRlbnQ6IFtdXG4gICAgICB9O1xuICAgICAgcmVzcG9uc2UucHJlZGljdGlvbnMuZm9yRWFjaCgocCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBiNjRkYXRhID0gcC5ieXRlc0Jhc2U2NEVuY29kZWQ7XG4gICAgICAgIGNvbnN0IG1pbWVUeXBlID0gcC5taW1lVHlwZTtcbiAgICAgICAgbWVzc2FnZS5jb250ZW50LnB1c2goe1xuICAgICAgICAgIG1lZGlhOiB7XG4gICAgICAgICAgICB1cmw6IGBkYXRhOiR7bWltZVR5cGV9O2Jhc2U2NCwke2I2NGRhdGF9YCxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBtaW1lVHlwZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbmlzaFJlYXNvbjogXCJzdG9wXCIsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIHVzYWdlOiAoMCwgaW1wb3J0X21vZGVsLmdldEJhc2ljVXNhZ2VTdGF0cykocmVxdWVzdC5tZXNzYWdlcywgbWVzc2FnZSksXG4gICAgICAgIGN1c3RvbTogcmVzcG9uc2VcbiAgICAgIH07XG4gICAgfVxuICApO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdFTkVSSUNfSU1BR0VOX0lORk8sXG4gIEltYWdlbkNvbmZpZ1NjaGVtYSxcbiAgZGVmaW5lSW1hZ2VuTW9kZWxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1hZ2VuLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/imagen.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar index_exports = {};\n__export(index_exports, {\n  default: () => index_default,\n  gemini: () => import_gemini.gemini,\n  gemini10Pro: () => import_gemini.gemini10Pro,\n  gemini15Flash: () => import_gemini.gemini15Flash,\n  gemini15Flash8b: () => import_gemini.gemini15Flash8b,\n  gemini15Pro: () => import_gemini.gemini15Pro,\n  gemini20Flash: () => import_gemini.gemini20Flash,\n  gemini20FlashExp: () => import_gemini.gemini20FlashExp,\n  gemini20FlashLite: () => import_gemini.gemini20FlashLite,\n  gemini20ProExp0205: () => import_gemini.gemini20ProExp0205,\n  gemini25FlashLite: () => import_gemini.gemini25FlashLite,\n  gemini25FlashPreview0417: () => import_gemini.gemini25FlashPreview0417,\n  gemini25ProExp0325: () => import_gemini.gemini25ProExp0325,\n  gemini25ProPreview0325: () => import_gemini.gemini25ProPreview0325,\n  geminiEmbedding001: () => import_embedder.geminiEmbedding001,\n  googleAI: () => googleAI,\n  googleAIPlugin: () => googleAIPlugin,\n  textEmbedding004: () => import_embedder.textEmbedding004,\n  textEmbeddingGecko001: () => import_embedder.textEmbeddingGecko001\n});\nmodule.exports = __toCommonJS(index_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_logging = __webpack_require__(/*! genkit/logging */ \"(action-browser)/./node_modules/genkit/lib/logging.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_plugin = __webpack_require__(/*! genkit/plugin */ \"(action-browser)/./node_modules/genkit/lib/plugin.js\");\nvar import_common = __webpack_require__(/*! ./common.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nvar import_embedder = __webpack_require__(/*! ./embedder.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js\");\nvar import_gemini = __webpack_require__(/*! ./gemini.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js\");\nvar import_imagen = __webpack_require__(/*! ./imagen.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/imagen.js\");\nvar import_list_models = __webpack_require__(/*! ./list-models.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/list-models.js\");\nvar import_veo = __webpack_require__(/*! ./veo.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/veo.js\");\nasync function initializer(ai, options) {\n  let apiVersions = [\"v1\"];\n  if (options?.apiVersion) {\n    if (Array.isArray(options?.apiVersion)) {\n      apiVersions = options?.apiVersion;\n    } else {\n      apiVersions = [options?.apiVersion];\n    }\n  }\n  if (apiVersions.includes(\"v1beta\")) {\n    Object.keys(import_gemini.SUPPORTED_GEMINI_MODELS).forEach(\n      (name) => (0, import_gemini.defineGoogleAIModel)({\n        ai,\n        name,\n        apiKey: options?.apiKey,\n        apiVersion: \"v1beta\",\n        baseUrl: options?.baseUrl,\n        debugTraces: options?.experimental_debugTraces\n      })\n    );\n  }\n  if (apiVersions.includes(\"v1\")) {\n    Object.keys(import_gemini.SUPPORTED_GEMINI_MODELS).forEach(\n      (name) => (0, import_gemini.defineGoogleAIModel)({\n        ai,\n        name,\n        apiKey: options?.apiKey,\n        apiVersion: void 0,\n        baseUrl: options?.baseUrl,\n        debugTraces: options?.experimental_debugTraces\n      })\n    );\n    Object.keys(import_embedder.SUPPORTED_MODELS).forEach(\n      (name) => (0, import_embedder.defineGoogleAIEmbedder)(ai, name, { apiKey: options?.apiKey })\n    );\n  }\n  if (options?.models) {\n    for (const modelOrRef of options?.models) {\n      const modelName = typeof modelOrRef === \"string\" ? modelOrRef : (\n        // strip out the `googleai/` prefix\n        modelOrRef.name.split(\"/\")[1]\n      );\n      const modelRef2 = typeof modelOrRef === \"string\" ? (0, import_gemini.gemini)(modelOrRef) : modelOrRef;\n      (0, import_gemini.defineGoogleAIModel)({\n        ai,\n        name: modelName,\n        apiKey: options?.apiKey,\n        baseUrl: options?.baseUrl,\n        info: {\n          ...modelRef2.info,\n          label: `Google AI - ${modelName}`\n        },\n        debugTraces: options?.experimental_debugTraces\n      });\n    }\n  }\n}\nasync function resolver(ai, actionType, actionName, options) {\n  if (actionType === \"embedder\") {\n    resolveEmbedder(ai, actionName, options);\n  } else if (actionName.startsWith(\"veo\")) {\n    if (actionType === \"background-model\") {\n      (0, import_veo.defineVeoModel)(ai, actionName, options?.apiKey);\n    }\n  } else if (actionType === \"model\") {\n    resolveModel(ai, actionName, options);\n  }\n}\nfunction resolveModel(ai, actionName, options) {\n  if (actionName.startsWith(\"imagen\")) {\n    (0, import_imagen.defineImagenModel)(ai, actionName, options?.apiKey);\n    return;\n  }\n  const modelRef2 = (0, import_gemini.gemini)(actionName);\n  (0, import_gemini.defineGoogleAIModel)({\n    ai,\n    name: modelRef2.name,\n    apiKey: options?.apiKey,\n    baseUrl: options?.baseUrl,\n    info: {\n      ...modelRef2.info,\n      label: `Google AI - ${actionName}`\n    },\n    debugTraces: options?.experimental_debugTraces\n  });\n}\nfunction resolveEmbedder(ai, actionName, options) {\n  (0, import_embedder.defineGoogleAIEmbedder)(ai, `googleai/${actionName}`, {\n    apiKey: options?.apiKey\n  });\n}\nasync function listActions(options) {\n  const apiKey = options?.apiKey || (0, import_common.getApiKeyFromEnvVar)();\n  if (!apiKey) {\n    import_logging.logger.error(\n      \"Pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\"\n    );\n    return [];\n  }\n  const models = await (0, import_list_models.listModels)(\n    options?.baseUrl || \"https://generativelanguage.googleapis.com\",\n    apiKey\n  );\n  return [\n    // Imagen\n    ...models.filter(\n      (m) => m.supportedGenerationMethods.includes(\"predict\") && m.name.includes(\"imagen\")\n    ).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n      const name = m.name.split(\"/\").at(-1);\n      return (0, import_genkit.modelActionMetadata)({\n        name: `googleai/${name}`,\n        info: { ...import_imagen.GENERIC_IMAGEN_INFO },\n        configSchema: import_imagen.ImagenConfigSchema\n      });\n    }),\n    // Veo\n    ...models.filter(\n      (m) => m.supportedGenerationMethods.includes(\"predictLongRunning\") && m.name.includes(\"veo\")\n    ).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n      const name = m.name.split(\"/\").at(-1);\n      return (0, import_genkit.modelActionMetadata)({\n        name: `googleai/${name}`,\n        info: { ...import_veo.GENERIC_VEO_INFO },\n        configSchema: import_veo.VeoConfigSchema,\n        background: true\n      });\n    }),\n    // Models\n    ...models.filter((m) => m.supportedGenerationMethods.includes(\"generateContent\")).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n      const ref = (0, import_gemini.gemini)(\n        m.name.startsWith(\"models/\") ? m.name.substring(\"models/\".length) : m.name\n      );\n      return (0, import_genkit.modelActionMetadata)({\n        name: ref.name,\n        info: ref.info,\n        configSchema: import_gemini.GeminiConfigSchema\n      });\n    }),\n    // Embedders\n    ...models.filter((m) => m.supportedGenerationMethods.includes(\"embedContent\")).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n      const name = \"googleai/\" + (m.name.startsWith(\"models/\") ? m.name.substring(\"models/\".length) : m.name);\n      return (0, import_genkit.embedderActionMetadata)({\n        name,\n        configSchema: import_embedder.GeminiEmbeddingConfigSchema,\n        info: {\n          dimensions: 768,\n          label: `Google Gen AI - ${name}`,\n          supports: {\n            input: [\"text\"]\n          }\n        }\n      });\n    })\n  ];\n}\nfunction googleAIPlugin(options) {\n  let listActionsCache;\n  return (0, import_plugin.genkitPlugin)(\n    \"googleai\",\n    async (ai) => await initializer(ai, options),\n    async (ai, actionType, actionName) => await resolver(ai, actionType, actionName, options),\n    async () => {\n      if (listActionsCache) return listActionsCache;\n      listActionsCache = await listActions(options);\n      return listActionsCache;\n    }\n  );\n}\nconst googleAI = googleAIPlugin;\ngoogleAI.model = (name, config) => {\n  if (name.startsWith(\"imagen\")) {\n    return (0, import_model.modelRef)({\n      name: `googleai/${name}`,\n      config,\n      configSchema: import_imagen.ImagenConfigSchema\n    });\n  }\n  if (name.startsWith(\"veo\")) {\n    return (0, import_model.modelRef)({\n      name: `googleai/${name}`,\n      config,\n      configSchema: import_veo.VeoConfigSchema\n    });\n  }\n  return (0, import_model.modelRef)({\n    name: `googleai/${name}`,\n    config,\n    configSchema: import_gemini.GeminiConfigSchema\n  });\n};\ngoogleAI.embedder = (name, config) => {\n  return (0, import_genkit.embedderRef)({\n    name: `googleai/${name}`,\n    config,\n    configSchema: import_embedder.GeminiEmbeddingConfigSchema\n  });\n};\nvar index_default = googleAI;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/list-models.js":
/*!*************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/list-models.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar list_models_exports = {};\n__export(list_models_exports, {\n  listModels: () => listModels\n});\nmodule.exports = __toCommonJS(list_models_exports);\nasync function listModels(baseUrl, apiKey) {\n  const res = await fetch(\n    `${baseUrl}/v1beta/models?pageSize=1000&key=${apiKey}`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n  const modelResponse = JSON.parse(await res.text());\n  return modelResponse.models;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=list-models.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9saXN0LW1vZGVscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxPQUFPLFFBQVEsbUNBQW1DLE9BQU87QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2xpc3QtbW9kZWxzLmpzPzc3YzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGxpc3RfbW9kZWxzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGxpc3RfbW9kZWxzX2V4cG9ydHMsIHtcbiAgbGlzdE1vZGVsczogKCkgPT4gbGlzdE1vZGVsc1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhsaXN0X21vZGVsc19leHBvcnRzKTtcbmFzeW5jIGZ1bmN0aW9uIGxpc3RNb2RlbHMoYmFzZVVybCwgYXBpS2V5KSB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFxuICAgIGAke2Jhc2VVcmx9L3YxYmV0YS9tb2RlbHM/cGFnZVNpemU9MTAwMCZrZXk9JHthcGlLZXl9YCxcbiAgICB7XG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBtb2RlbFJlc3BvbnNlID0gSlNPTi5wYXJzZShhd2FpdCByZXMudGV4dCgpKTtcbiAgcmV0dXJuIG1vZGVsUmVzcG9uc2UubW9kZWxzO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxpc3RNb2RlbHNcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdC1tb2RlbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/list-models.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/predict.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/predict.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar predict_exports = {};\n__export(predict_exports, {\n  checkOp: () => checkOp,\n  predictModel: () => predictModel\n});\nmodule.exports = __toCommonJS(predict_exports);\nvar import_common = __webpack_require__(/*! ./common */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nfunction predictEndpoint(options) {\n  return `https://generativelanguage.googleapis.com/${options.apiVersion}/models/${options.model}:${options.method}?key=${options.apiKey}`;\n}\nfunction opCheckEndpoint(options) {\n  return `https://generativelanguage.googleapis.com/${options.apiVersion}/${options.operation}?key=${options.apiKey}`;\n}\nfunction predictModel(model, apiKey, method) {\n  return async (instances, parameters) => {\n    const fetch = (await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(action-browser)/./node_modules/node-fetch/src/index.js\"))).default;\n    const req = {\n      instances,\n      parameters\n    };\n    const response = await fetch(\n      predictEndpoint({\n        model,\n        apiVersion: \"v1beta\",\n        apiKey,\n        method\n      }),\n      {\n        method: \"POST\",\n        body: JSON.stringify(req),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-Goog-Api-Client\": (0, import_common.getGenkitClientHeader)()\n        }\n      }\n    );\n    if (!response.ok) {\n      throw new Error(\n        `Error from Gemini AI predict: HTTP ${response.status}: ${await response.text()}`\n      );\n    }\n    return await response.json();\n  };\n}\nasync function checkOp(operation, apiKey) {\n  const fetch = (await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(action-browser)/./node_modules/node-fetch/src/index.js\"))).default;\n  const response = await fetch(\n    opCheckEndpoint({\n      apiVersion: \"v1beta\",\n      operation,\n      apiKey\n    }),\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Client\": (0, import_common.getGenkitClientHeader)()\n      }\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Error from operation API: HTTP ${response.status}: ${await response.text()}`\n    );\n  }\n  return await response.json();\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=predict.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9wcmVkaWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsbUZBQVU7QUFDdEM7QUFDQSxzREFBc0QsbUJBQW1CLFVBQVUsY0FBYyxHQUFHLGVBQWUsT0FBTyxlQUFlO0FBQ3pJO0FBQ0E7QUFDQSxzREFBc0QsbUJBQW1CLEdBQUcsa0JBQWtCLE9BQU8sZUFBZTtBQUNwSDtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsK2VBQW9CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsZ0JBQWdCLElBQUksc0JBQXNCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwrZUFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxnQkFBZ0IsSUFBSSxzQkFBc0I7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FHTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXRhbG8tc2FudG9zLy4vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL3ByZWRpY3QuanM/MzljOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgcHJlZGljdF9leHBvcnRzID0ge307XG5fX2V4cG9ydChwcmVkaWN0X2V4cG9ydHMsIHtcbiAgY2hlY2tPcDogKCkgPT4gY2hlY2tPcCxcbiAgcHJlZGljdE1vZGVsOiAoKSA9PiBwcmVkaWN0TW9kZWxcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMocHJlZGljdF9leHBvcnRzKTtcbnZhciBpbXBvcnRfY29tbW9uID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuZnVuY3Rpb24gcHJlZGljdEVuZHBvaW50KG9wdGlvbnMpIHtcbiAgcmV0dXJuIGBodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS8ke29wdGlvbnMuYXBpVmVyc2lvbn0vbW9kZWxzLyR7b3B0aW9ucy5tb2RlbH06JHtvcHRpb25zLm1ldGhvZH0/a2V5PSR7b3B0aW9ucy5hcGlLZXl9YDtcbn1cbmZ1bmN0aW9uIG9wQ2hlY2tFbmRwb2ludChvcHRpb25zKSB7XG4gIHJldHVybiBgaHR0cHM6Ly9nZW5lcmF0aXZlbGFuZ3VhZ2UuZ29vZ2xlYXBpcy5jb20vJHtvcHRpb25zLmFwaVZlcnNpb259LyR7b3B0aW9ucy5vcGVyYXRpb259P2tleT0ke29wdGlvbnMuYXBpS2V5fWA7XG59XG5mdW5jdGlvbiBwcmVkaWN0TW9kZWwobW9kZWwsIGFwaUtleSwgbWV0aG9kKSB7XG4gIHJldHVybiBhc3luYyAoaW5zdGFuY2VzLCBwYXJhbWV0ZXJzKSA9PiB7XG4gICAgY29uc3QgZmV0Y2ggPSAoYXdhaXQgaW1wb3J0KFwibm9kZS1mZXRjaFwiKSkuZGVmYXVsdDtcbiAgICBjb25zdCByZXEgPSB7XG4gICAgICBpbnN0YW5jZXMsXG4gICAgICBwYXJhbWV0ZXJzXG4gICAgfTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgcHJlZGljdEVuZHBvaW50KHtcbiAgICAgICAgbW9kZWwsXG4gICAgICAgIGFwaVZlcnNpb246IFwidjFiZXRhXCIsXG4gICAgICAgIGFwaUtleSxcbiAgICAgICAgbWV0aG9kXG4gICAgICB9KSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxKSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiWC1Hb29nLUFwaS1DbGllbnRcIjogKDAsIGltcG9ydF9jb21tb24uZ2V0R2Vua2l0Q2xpZW50SGVhZGVyKSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEVycm9yIGZyb20gR2VtaW5pIEFJIHByZWRpY3Q6IEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9OiAke2F3YWl0IHJlc3BvbnNlLnRleHQoKX1gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gY2hlY2tPcChvcGVyYXRpb24sIGFwaUtleSkge1xuICBjb25zdCBmZXRjaCA9IChhd2FpdCBpbXBvcnQoXCJub2RlLWZldGNoXCIpKS5kZWZhdWx0O1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgIG9wQ2hlY2tFbmRwb2ludCh7XG4gICAgICBhcGlWZXJzaW9uOiBcInYxYmV0YVwiLFxuICAgICAgb3BlcmF0aW9uLFxuICAgICAgYXBpS2V5XG4gICAgfSksXG4gICAge1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJYLUdvb2ctQXBpLUNsaWVudFwiOiAoMCwgaW1wb3J0X2NvbW1vbi5nZXRHZW5raXRDbGllbnRIZWFkZXIpKClcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRXJyb3IgZnJvbSBvcGVyYXRpb24gQVBJOiBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHthd2FpdCByZXNwb25zZS50ZXh0KCl9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBjaGVja09wLFxuICBwcmVkaWN0TW9kZWxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlZGljdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/predict.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/veo.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/veo.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar veo_exports = {};\n__export(veo_exports, {\n  GENERIC_VEO_INFO: () => GENERIC_VEO_INFO,\n  VeoConfigSchema: () => VeoConfigSchema,\n  defineVeoModel: () => defineVeoModel\n});\nmodule.exports = __toCommonJS(veo_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_common = __webpack_require__(/*! ./common.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nvar import_predict = __webpack_require__(/*! ./predict.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/predict.js\");\nconst VeoConfigSchema = import_genkit.z.object({\n  // NOTE: Documentation notes numberOfVideos parameter to pick the number of\n  // output videos, but this setting does not seem to work\n  negativePrompt: import_genkit.z.string().optional(),\n  aspectRatio: import_genkit.z.enum([\"9:16\", \"16:9\"]).describe(\"Desired aspect ratio of the output video.\").optional(),\n  personGeneration: import_genkit.z.enum([\"dont_allow\", \"allow_adult\", \"allow_all\"]).describe(\n    \"Control if/how images of people will be generated by the model.\"\n  ).optional(),\n  durationSeconds: import_genkit.z.number().step(1).min(5).max(8).describe(\"Length of each output video in seconds, between 5 and 8.\").optional(),\n  enhance_prompt: import_genkit.z.boolean().describe(\"Enable or disable the prompt rewriter. Enabled by default.\").optional()\n}).passthrough();\nfunction extractText(request) {\n  return request.messages.at(-1).content.map((c) => c.text || \"\").join(\"\");\n}\nfunction toParameters(request) {\n  const out = {\n    ...request?.config\n  };\n  for (const k in out) {\n    if (!out[k]) delete out[k];\n  }\n  return out;\n}\nfunction extractImage(request) {\n  const media = request.messages.at(-1)?.content.find((p) => !!p.media)?.media;\n  if (media) {\n    const img = media?.url.split(\",\")[1];\n    return {\n      bytesBase64Encoded: img,\n      mimeType: media.contentType\n    };\n  }\n  return void 0;\n}\nconst GENERIC_VEO_INFO = {\n  label: `Google AI - Generic Veo`,\n  supports: {\n    media: true,\n    multiturn: false,\n    tools: false,\n    systemRole: false,\n    output: [\"media\"],\n    longRunning: true\n  }\n};\nfunction defineVeoModel(ai, name, apiKey) {\n  if (apiKey !== false) {\n    apiKey = apiKey || (0, import_common.getApiKeyFromEnvVar)();\n    if (!apiKey) {\n      throw new import_genkit.GenkitError({\n        status: \"FAILED_PRECONDITION\",\n        message: \"Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://genkit.dev/docs/plugins/google-genai\"\n      });\n    }\n  }\n  const modelName = `googleai/${name}`;\n  const model = (0, import_model.modelRef)({\n    name: modelName,\n    info: {\n      ...GENERIC_VEO_INFO,\n      label: `Google AI - ${name}`\n    },\n    configSchema: VeoConfigSchema\n  });\n  return ai.defineBackgroundModel({\n    name: modelName,\n    ...model.info,\n    configSchema: VeoConfigSchema,\n    async start(request) {\n      const instance = {\n        prompt: extractText(request)\n      };\n      const image = extractImage(request);\n      if (image) {\n        instance.image = image;\n      }\n      const predictClient = (0, import_predict.predictModel)(model.version || name, apiKey, \"predictLongRunning\");\n      const response = await predictClient([instance], toParameters(request));\n      return toGenkitOp(response);\n    },\n    async check(operation) {\n      const newOp = await (0, import_predict.checkOp)(operation.id, apiKey);\n      return toGenkitOp(newOp);\n    }\n  });\n}\nfunction toGenkitOp(apiOp) {\n  const res = { id: apiOp.name };\n  if (apiOp.done !== void 0) {\n    res.done = apiOp.done;\n  }\n  if (apiOp.error) {\n    res.error = { message: apiOp.error.message };\n  }\n  if (apiOp.response && apiOp.response.generateVideoResponse && apiOp.response.generateVideoResponse.generatedSamples) {\n    res.output = {\n      finishReason: \"stop\",\n      raw: apiOp.response,\n      message: {\n        role: \"model\",\n        content: apiOp.response.generateVideoResponse.generatedSamples.map(\n          (s) => {\n            return {\n              media: {\n                url: s.video.uri\n              }\n            };\n          }\n        )\n      }\n    };\n  }\n  return res;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=veo.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/veo.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/refs/data.json":
/*!***************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/refs/data.json ***!
  \***************************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON AnySchema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}');

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/node_modules/ajv/dist/refs/json-schema-draft-07.json":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/node_modules/ajv/dist/refs/json-schema-draft-07.json ***!
  \*******************************************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}');

/***/ })

};
;